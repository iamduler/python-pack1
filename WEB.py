import pandas as pd
import streamlit as st
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np
from plotly.subplots import make_subplots
import plotly.express as px
import seaborn as sns
import matplotlib.colors as mcolors
import re
from streamlit_option_menu import option_menu
from ta.trend import SMAIndicator, EMAIndicator, MACD, PSARIndicator
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands, AverageTrueRange
from fpdf import FPDF
from io import BytesIO
import tempfile
import plotly.io as pio
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime

st.set_page_config(layout="wide")  # Giao di·ªán to√†n m√†n h√¨nh

# **Ch√®n CSS t√πy ch·ªânh ƒë·ªÉ √°p d·ª•ng font "Poppins" cho to√†n b·ªô trang**
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
    html, body, [class*="st-"] {
        font-family: 'Poppins', sans-serif;
    }
    h1 {
        font-size: 36px !important;
        font-weight: 700 !important;
        text-align: center;
        color: #111111;
    }

    h2 {
        font-size: 30px !important;
        font-weight: 600 !important;
        text-align: center;
        color: #333333;
    }

    h3 {
        font-size: 22px !important;
        font-weight: 600 !important;
        text-align: center;
        color: #333333;
    }

    .subheader-custom {
        font-size: 18px !important;
        font-weight: 600 !important;
        text-align: center;
        margin-bottom: 5px;
    }

    p, label, div {
        font-weight: 400;
        font-size: 14px;
        color: #444444;
    }

    .stSidebar {
        background-color: #F8F9FA;
    }

    .stButton>button {
        font-family: 'Poppins', sans-serif;
        font-size: 14px;
        font-weight: 600;
        border-radius: 8px;
    }
    </style>
    """,
    unsafe_allow_html=True)


# === H√†m load d·ªØ li·ªáu ===
def load_data(file_path):
    df = pd.read_csv(file_path)
    df['ng√†y'] = pd.to_datetime(df['ng√†y'], format='%Y-%m-%d').dt.date
    return df


# Sidebar v·ªõi menu t√πy ch·ªânh
with st.sidebar:
    st.markdown(
        """
        <style>
            [data-testid="stSidebar"] {
                background-color: Black !important; 
                padding: 20px;
                border-right: 1px solid #8A9BA8;
                border-radius: 2px;
                box-shadow: none !important;
            }
        </style>
        """, unsafe_allow_html=True)
    st.markdown("<h2 style='text-align: center; font-weight: bold; color:yellow ;'>Trang ch·ªß</h2>",
                unsafe_allow_html=True)
    selected = option_menu(
        menu_title=None,
        options=["Th√¥ng tin giao d·ªãch", "T·ªïng quan theo ng√†nh", "T·ªïng quan th·ªã tr∆∞·ªùng", "Xu h∆∞·ªõng th·ªã tr∆∞·ªùng"],
        icons=["bar-chart", "database", "clipboard-data", "book"],
        default_index=0,
        styles={"container": {"background-color": "black", "border-radius": "0px", "box-shadow": "none",
                              "padding": "0px"},
                "nav-link": {"font-size": "16px", "font-weight": "normal", "color": "white", "text-align": "left",
                             "padding": "10px"},
                "nav-link-selected": {"background-color": "#B0BEC5", "font-weight": "bold", "color": "Black",
                                      "border-radius": "5px"}})

if selected == "Th√¥ng tin giao d·ªãch":
    # ----------------------SECTION 1 ------------------#
    st.markdown("<h1>Ph√¢n lo·∫°i theo Nh√† ƒê·∫ßu T∆∞ - Ng√†nh chuy√™n s√¢u </h1>", unsafe_allow_html=True)

    df = load_data("E:\GOI1\MSSV_CHAN_GOI1_GROUP1\MSSV_CHAN_GOI1_GROUP1\Data\output.csv")

    type_options = ['kh·ªõp_r√≤ng', 'th·ªèa_thu·∫≠n_r√≤ng']
    investor_options = ['c√°_nh√¢n', 't·ªï_ch·ª©c_trong_n∆∞·ªõc', 't·ª±_doanh', 'n∆∞·ªõc_ngo√†i']
    with st.expander('üîé **B·ªô l·ªçc**', expanded=True):
        with st.container():
            st.markdown("""
            <style>
                div[data-testid="stExpander"] {
                    background-color: #DDEBF7 !important;
                    border-radius: 10px;
                }
            </style>
            """, unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            type_selected = st.selectbox("Lo·∫°i giao d·ªãch", type_options,
                                         format_func=lambda x: x.replace("_", " ").title())
        with col2:
            investor_selected = st.selectbox("Nh√† ƒë·∫ßu t∆∞", investor_options,
                                             format_func=lambda x: x.replace("_", " ").title())
        with col3:
            start_date = st.date_input("T·ª´ ng√†y", df['ng√†y'].min())
        with col4:
            end_date = st.date_input("ƒê·∫øn ng√†y", df['ng√†y'].max())
        st.markdown("</div>", unsafe_allow_html=True)

    if start_date > end_date:
        st.error("‚ö†Ô∏è Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c!")
        st.stop()

    column_keyword = f"{investor_selected}_{type_selected}"
    matching_columns = [col for col in df.columns if column_keyword in col]

    if not matching_columns:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n.")
        st.stop()

    df_filtered = df[(df['ng√†y'] >= start_date) & (df['ng√†y'] <= end_date)]
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn!")
        st.stop()

    col1, col2 = st.columns([1, 4])
    with col1:
        st.markdown(
            f"<p class='subheader-custom' style='color:#FF9800;margin-bottom: 20px;'>T·ªïng gi√° tr·ªã giao d·ªãch</p>",
            unsafe_allow_html=True)


        # === H√†m v·∫Ω bi·ªÉu ƒë·ªì t·ªïng giao d·ªãch ===
        def plot_total_transaction(df_filtered, matching_columns):
            total_buy = df_filtered[df_filtered[matching_columns].sum(axis=1) > 0][matching_columns].sum().sum() / 1e9
            total_sell = df_filtered[df_filtered[matching_columns].sum(axis=1) < 0][matching_columns].sum().sum() / 1e9

            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=[''], y=[total_buy], marker_color='#4CAF50', name="Mua r√≤ng",
                text=f"{total_buy:,.1f}bn", textposition="inside", insidetextanchor="middle",
                textangle=0, hovertext=f"Mua r√≤ng: {total_buy:.1f}T", hoverinfo="text"
            ))
            fig.add_trace(go.Bar(
                x=[''], y=[total_sell], marker_color='#FF9800', name="B√°n r√≤ng",
                text=f"{total_sell:,.1f}bn", textposition="inside", insidetextanchor="middle",
                textangle=0, hovertext=f"B√°n r√≤ng: {total_sell:.1f}T", hoverinfo="text"
            ))
            fig.update_layout(barmode='relative', showlegend=True, margin=dict(t=10, b=10))
            st.plotly_chart(fig, use_container_width=True)


        plot_total_transaction(df_filtered, matching_columns)
    with col2:
        st.markdown(
            f"<p class='subheader-custom' style='color:#FF9800;margin-bottom: -20px;'>Giao d·ªãch theo Ng√†nh v√† Nh√† ƒë·∫ßu t∆∞</p>",
            unsafe_allow_html=True)
        st.markdown(
            f"<p style='text-align: center; font-size: 12px; color: black; margin-bottom: -5px;'>D·ªØ li·ªáu theo Ng√†nh L2</p>",
            unsafe_allow_html=True)
        st.markdown(
            f"<p style='text-align: center; font-size: 12px; color: black; margin-top: -5px;'>B·ªô l·ªçc: {investor_selected.replace('_', ' ').title()} - {type_selected.replace('_', ' ').title()}</p>",
            unsafe_allow_html=True)


        def plot_sector_transaction(df_filtered, matching_columns):
            df_filtered['Gi√° tr·ªã r√≤ng'] = df_filtered[matching_columns].sum(axis=1) / 1e9
            df_sorted = df_filtered.groupby('ng√†nh')['Gi√° tr·ªã r√≤ng'].sum().reset_index()
            df_sorted['ng√†nh'] = df_sorted['ng√†nh'].str.replace(' L2', '', regex=True)
            df_sorted = df_sorted.sort_values(by='Gi√° tr·ªã r√≤ng', ascending=True)
            df_sorted['Mua r√≤ng'] = df_sorted['Gi√° tr·ªã r√≤ng'].apply(lambda x: x if x > 0 else 0)
            df_sorted['B√°n r√≤ng'] = df_sorted['Gi√° tr·ªã r√≤ng'].apply(lambda x: x if x < 0 else 0)

            fig2 = go.Figure()
            fig2.add_trace(go.Bar(
                y=df_sorted['ng√†nh'], x=df_sorted['Mua r√≤ng'], orientation='h', marker_color='#4CAF50', name="Mua r√≤ng",
                text=[f"{val:,.1f}bn" if val > 0 else "" for val in df_sorted['Mua r√≤ng']], textposition="outside",
                hoverinfo="text"
            ))
            fig2.add_trace(go.Bar(
                y=df_sorted['ng√†nh'], x=df_sorted['B√°n r√≤ng'], orientation='h', marker_color='#FF9800', name="B√°n r√≤ng",
                text=[f"{val:,.1f}bn" if val < 0 else "" for val in df_sorted['B√°n r√≤ng']], textposition="outside",
                hoverinfo="text"
            ))

            fig2.update_layout(barmode='relative', showlegend=True,
                               xaxis=dict(tickformat=',', tickprefix=' ', ticksuffix=' bn'),
                               margin=dict(t=10, b=10))
            st.plotly_chart(fig2, use_container_width=True)


        plot_sector_transaction(df_filtered, matching_columns)
    with st.container():
        st.markdown(
            f"<p class='subheader-custom' style='color:#4B8BBE;'>Gi√° tr·ªã mua/b√°n r√≤ng theo th·ªùi gian</p>",
            unsafe_allow_html=True)

        st.markdown(
            f"<p style='text-align: center; font-size: 12px; color: black; margin-top: -5px;'>B·ªô l·ªçc: {investor_selected.replace('_', ' ').title()} - {type_selected.replace('_', ' ').title()}</p>",
            unsafe_allow_html=True)


        def plot_transaction_by_time(df_filtered, matching_columns):
            df_time = df_filtered[['ng√†y'] + matching_columns].groupby('ng√†y').sum().reset_index().copy()
            df_time['ng√†y'] = pd.to_datetime(df_time['ng√†y'])
            df_time.loc[:, 'T·ªïng gi√° tr·ªã giao d·ªãch'] = df_time[matching_columns].sum(axis=1) / 1e9
            df_time.loc[:, 'T√≠ch l≈©y r√≤ng'] = df_time['T·ªïng gi√° tr·ªã giao d·ªãch'].cumsum()

            fig = go.Figure()
            fig.add_trace(go.Bar(x=df_time['ng√†y'], y=df_time['T·ªïng gi√° tr·ªã giao d·ªãch'],
                                 name="Gi√° tr·ªã mua/b√°n r√≤ng", marker_color='#4B8BBE', opacity=1,
                                 text=[f"{val:,.1f}bn" for val in df_time['T·ªïng gi√° tr·ªã giao d·ªãch']],
                                 textposition='outside', textfont=dict(size=30, color='black'),
                                 yaxis='y1', hovertemplate='Gi√° tr·ªã mua r√≤ng: %{y:,.1f}bn<extra></extra>'))
            fig.add_trace(go.Scatter(x=df_time['ng√†y'], y=df_time['T√≠ch l≈©y r√≤ng'],
                                     mode='lines+markers', name="T√≠ch l≈©y r√≤ng", marker=dict(color='#D62728', size=8),
                                     yaxis='y2', hovertemplate='T√≠ch l≈©y r√≤ng: %{y:,.1f}bn<extra></extra>'))

            fig.update_layout(
                xaxis_title="Ng√†y",
                yaxis=dict(side='left', showgrid=False, showticklabels=False, zeroline=True, domain=[0.2, 1.0]),
                yaxis2=dict(side='right', overlaying='y', showgrid=False, showticklabels=False, zeroline=True,
                            domain=[0.2, 1.0]),
                showlegend=True,
                xaxis=dict(showgrid=False),
                hovermode="x unified", barmode='overlay', height=500, width=2000,
                bargap=0.05, margin=dict(t=10, b=10))
            st.plotly_chart(fig, use_container_width=True)


        plot_transaction_by_time(df_filtered, matching_columns)
    # ========== SECTION 2: PH√ÇN B·ªî GIAO D·ªäCH THEO NG√ÄNH V√Ä NH√Ä ƒê·∫¶U T∆Ø ==========
    st.markdown("<h1>üìä Ph√¢n B·ªï Mua/B√°n R√≤ng Theo Ng√†nh V√† Nh√† ƒê·∫ßu T∆∞</h1>", unsafe_allow_html=True)

    # **B·ªô l·ªçc ng√†y**
    with st.expander('üîé **B·ªô l·ªçc**', expanded=True):
        st.markdown("""
                <style>
                    div[data-testid="stExpander"] {
                        background-color: #DDEBF7 !important;
                        border-radius: 10px;
                    }
                </style>
                """, unsafe_allow_html=True)
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

        with col1:
            type_options = ['kh·ªõp_r√≤ng', 'th·ªèa_thu·∫≠n_r√≤ng', 'T·ªïng h·ª£p']  # üî• Th√™m "T·ªïng h·ª£p" v√†o danh s√°ch
            type_selected = st.selectbox(
                "Lo·∫°i giao d·ªãch",
                type_options,
                format_func=lambda x: x.replace("_", " ").title(),
                key="type_2"
            )

            total_selected = (type_selected == "T·ªïng h·ª£p")  # ‚úÖ Bi·∫øn `total_selected` v·∫´n t·ªìn t·∫°i

        with col2:
            if not total_selected:  # üî• ·∫®n c·ªôt n√†y n·∫øu ch·ªçn "T·ªïng h·ª£p"
                transaction_selected = st.selectbox("Lo·∫°i giao d·ªãch r√≤ng", ['Mua r√≤ng', 'B√°n r√≤ng', 'T·ªïng GT r√≤ng'],
                                                    key="transaction_2")
            else:
                transaction_selected = None  # ‚úÖ ƒê·∫£m b·∫£o gi√° tr·ªã kh√¥ng ·∫£nh h∆∞·ªüng khi b·ªã ·∫©n

        with col3:
            start_date = st.date_input("T·ª´ ng√†y", df['ng√†y'].min(), key="start_date_2")
        with col4:
            end_date = st.date_input("ƒê·∫øn ng√†y", df['ng√†y'].max(), key="end_date_2")
        if start_date > end_date:
            st.error("‚ö†Ô∏è Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c!")
            st.stop()

        # L·ªçc d·ªØ li·ªáu
    filtered_df = df[(df['ng√†y'] >= start_date) & (df['ng√†y'] <= end_date)]
    if filtered_df.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn!")
        st.stop()
    if transaction_selected == "T·ªïng GT r√≤ng":
        khop_columns = [col for col in filtered_df.columns if "kh·ªõp_r√≤ng" in col]
        thoa_thuan_columns = [col for col in filtered_df.columns if "th·ªèa_thu·∫≠n_r√≤ng" in col]
    # X√°c ƒë·ªãnh c·ªôt matching
    if total_selected:
        matching_columns = {
            "C√° nh√¢n": "c√°_nh√¢n_t·ªïng_gt_r√≤ng",
            "T·ªï ch·ª©c trong n∆∞·ªõc": "t·ªï_ch·ª©c_trong_n∆∞·ªõc_t·ªïng_gt_r√≤ng",
            "T·ª± doanh": "t·ª±_doanh_t·ªïng_gt_r√≤ng",
            "N∆∞·ªõc ngo√†i": "n∆∞·ªõc_ngo√†i_t·ªïng_gt_r√≤ng"
        }
    else:
        matching_columns = {
            "C√° nh√¢n": f"c√°_nh√¢n_{type_selected}",
            "T·ªï ch·ª©c trong n∆∞·ªõc": f"t·ªï_ch·ª©c_trong_n∆∞·ªõc_{type_selected}",
            "T·ª± doanh": f"t·ª±_doanh_{type_selected}",
            "N∆∞·ªõc ngo√†i": f"n∆∞·ªõc_ngo√†i_{type_selected}"
        }

    valid_columns = [col for col in matching_columns.values() if col in filtered_df.columns]
    if not valid_columns:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n.")
        st.stop()
    agg_data = filtered_df.groupby('ng√†nh')[valid_columns].sum()
    agg_data = agg_data / 1e9

    # V·∫Ω bi·ªÉu ƒë·ªì

    if transaction_selected == "T·ªïng GT r√≤ng":
        # üéØ ====== BI·ªÇU ƒê·ªí T·ªîNG GT R√íNG (C√ì GI√Å TR·ªä √ÇM/D∆Ø∆†NG) ======
        fig_khop = go.Figure()
        fig_thoa_thuan = go.Figure()

        # üî• M√†u s·∫Øc c·ªë ƒë·ªãnh cho t·ª´ng nh√≥m nh√† ƒë·∫ßu t∆∞
        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
        investor_list = ["c√°_nh√¢n", "t·ªï_ch·ª©c_trong_n∆∞·ªõc", "t·ª±_doanh", "n∆∞·ªõc_ngo√†i"]

        # üî• L·ªçc d·ªØ li·ªáu cho t·ª´ng nh√≥m (kh·ªõp r√≤ng & th·ªèa thu·∫≠n r√≤ng)
        agg_data_khop = filtered_df.groupby('ng√†nh')[khop_columns].sum() if khop_columns else None
        agg_data_thoa_thuan = filtered_df.groupby('ng√†nh')[thoa_thuan_columns].sum() if thoa_thuan_columns else None

        # üî• Chuy·ªÉn ƒë∆°n v·ªã v·ªÅ t·ª∑ VND
        if agg_data_khop is not None:
            agg_data_khop /= 1e9
        if agg_data_thoa_thuan is not None:
            agg_data_thoa_thuan /= 1e9

        # üî• Ki·ªÉm tra n·∫øu c·∫£ 2 ƒë·ªÅu tr·ªëng
        if (agg_data_khop is None or agg_data_khop.empty) and (
                agg_data_thoa_thuan is None or agg_data_thoa_thuan.empty):
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu T·ªïng GT r√≤ng ƒë·ªÉ hi·ªÉn th·ªã!")
            st.stop()

        # üî• S·∫Øp x·∫øp d·ªØ li·ªáu theo t·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi ƒë·ªÉ ƒë∆∞a thanh d√†i nh·∫•t l√™n tr√™n
        if agg_data_khop is not None and not agg_data_khop.empty:
            agg_data_khop["T·ªïng GT tuy·ªát ƒë·ªëi"] = agg_data_khop.abs().sum(axis=1)
            agg_data_khop_sorted = agg_data_khop.sort_values(by="T·ªïng GT tuy·ªát ƒë·ªëi", ascending=True)
            agg_data_khop_sorted = agg_data_khop_sorted.drop(columns=["T·ªïng GT tuy·ªát ƒë·ªëi"])
        if agg_data_thoa_thuan is not None and not agg_data_thoa_thuan.empty:
            agg_data_thoa_thuan["T·ªïng GT tuy·ªát ƒë·ªëi"] = agg_data_thoa_thuan.abs().sum(axis=1)
            agg_data_thoa_thuan_sorted = agg_data_thoa_thuan.sort_values(by="T·ªïng GT tuy·ªát ƒë·ªëi", ascending=True)
            agg_data_thoa_thuan_sorted = agg_data_thoa_thuan_sorted.drop(columns=["T·ªïng GT tuy·ªát ƒë·ªëi"])

        # üî• V·∫Ω bi·ªÉu ƒë·ªì Kh·ªõp R√≤ng
        if agg_data_khop is not None and not agg_data_khop.empty:
            for index, investor in enumerate(investor_list):
                color = colors[index % len(colors)]
                df_col_khop = f"{investor}_kh·ªõp_r√≤ng"

                if df_col_khop in agg_data_khop.columns:
                    fig_khop.add_trace(go.Bar(
                        y=agg_data_khop.index,
                        x=agg_data_khop[df_col_khop],
                        name=f"{investor.replace('_', ' ').title()}",
                        marker_color=color,
                        orientation='h',
                        text=[f"{x:,.1f}bn" if abs(x) > 500 else "" for x in agg_data_khop[df_col_khop]],
                        textposition="inside",
                        insidetextanchor="middle",
                        hovertemplate=f"{investor.replace('_', ' ').title()} - Kh·ªõp R√≤ng<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                    ))

            # üî• C·∫≠p nh·∫≠t layout cho Kh·ªõp R√≤ng
            fig_khop.update_layout(
                title="üìä KH·ªöP L·ªÜNH",
                xaxis_title="Gi√° tr·ªã giao d·ªãch (T·ª∑ VND)",
                height=600,
                width=700,
                margin=dict(t=50, b=50),
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
                barmode='relative',
                xaxis=dict(zeroline=True, zerolinewidth=2, zerolinecolor='black'),
                yaxis=dict(categoryorder="array", categoryarray=agg_data_khop_sorted.index.tolist())
            )

        # üî• V·∫Ω bi·ªÉu ƒë·ªì Th·ªèa Thu·∫≠n R√≤ng
        if agg_data_thoa_thuan is not None and not agg_data_thoa_thuan.empty:
            for index, investor in enumerate(investor_list):
                color = colors[index % len(colors)]
                df_col_thoa_thuan = f"{investor}_th·ªèa_thu·∫≠n_r√≤ng"

                if df_col_thoa_thuan in agg_data_thoa_thuan.columns:
                    fig_thoa_thuan.add_trace(go.Bar(
                        y=agg_data_thoa_thuan.index,
                        x=agg_data_thoa_thuan[df_col_thoa_thuan],
                        name=f"{investor.replace('_', ' ').title()}",
                        marker_color=color,
                        orientation='h',
                        text=[f"{x:,.1f}bn" if abs(x) > 500 else "" for x in agg_data_thoa_thuan[df_col_thoa_thuan]],
                        textposition="inside",
                        insidetextanchor="middle",
                        hovertemplate=f"{investor.replace('_', ' ').title()} - Th·ªèa Thu·∫≠n R√≤ng<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                    ))

            # üî• C·∫≠p nh·∫≠t layout cho Th·ªèa Thu·∫≠n R√≤ng
            fig_thoa_thuan.update_layout(
                title="üìä TH·ªéA THU·∫¨N",
                xaxis_title="Gi√° tr·ªã giao d·ªãch (T·ª∑ VND)",
                height=600,
                width=700,
                margin=dict(t=50, b=50),
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
                barmode='relative',
                xaxis=dict(zeroline=True, zerolinewidth=2, zerolinecolor='black'),
                yaxis=dict(categoryorder="array", categoryarray=agg_data_thoa_thuan_sorted.index.tolist())
            )

        # üî• Hi·ªÉn th·ªã hai bi·ªÉu ƒë·ªì t√°ch bi·ªát
        col1, col2 = st.columns(2)
        with col1:
            st.plotly_chart(fig_khop, use_container_width=True)
        with col2:
            st.plotly_chart(fig_thoa_thuan, use_container_width=True)

    else:
        fig = go.Figure()
        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
        if total_selected:
            # ====== BI·ªÇU ƒê·ªí T·ªîNG H·ª¢P ======
            agg_data["T·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi"] = agg_data.abs().sum(axis=1)
            agg_data_sorted = agg_data.sort_values(by="T·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi", ascending=True)
            agg_data_sorted = agg_data_sorted.drop(columns=["T·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi"])

            for i, investor in enumerate(matching_columns.keys()):
                df_col = matching_columns[investor]
                if df_col not in agg_data_sorted.columns:
                    continue

                fig.add_trace(go.Bar(
                    y=agg_data_sorted.index,
                    x=agg_data_sorted[df_col],
                    name=investor,
                    marker_color=colors[i % len(colors)],
                    orientation='h',
                    text=[f"{x:,.1f}bn" if abs(x) > 300 else "" for x in agg_data_sorted[df_col]],
                    textposition="inside", insidetextanchor="middle",
                    hovertemplate=f"{investor}<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                ))

            fig.update_layout(
                title="üìä BI·ªÇU ƒê·ªí TH·ªä TR∆Ø·ªúNG (KH·ªöP L·ªÜNH + TH·ªéA THU·∫¨N)",
                font=dict(family="Poppins, sans-serif", size=18, color="black"),
                xaxis_title="Gi√° tr·ªã mua/b√°n r√≤ng (T·ª∑ VND)",
                height=700,
                margin=dict(t=50, b=50),
                legend=dict(title="Nh√† ƒë·∫ßu t∆∞"),
                barmode='relative',
                xaxis=dict(zeroline=True, zerolinewidth=2, zerolinecolor='black'),
                yaxis=dict(categoryorder="array", categoryarray=agg_data_sorted.index.tolist()))

        else:
            agg_data["T·ªïng gi√° tr·ªã"] = agg_data.sum(axis=1)
            agg_data = agg_data.sort_values(by="T·ªïng gi√° tr·ªã", ascending=False)
            agg_data = agg_data.drop(columns=["T·ªïng gi√° tr·ªã"])
            # ====== BI·ªÇU ƒê·ªí MUA R√íNG / B√ÅN R√íNG ======
            for i, investor in enumerate(matching_columns.keys()):
                df_col = matching_columns[investor]
                if df_col not in agg_data.columns:
                    continue

                data_filtered = agg_data[df_col]
                if transaction_selected == "Mua r√≤ng":
                    data_buy = data_filtered[data_filtered > 0]
                    data_sell = None
                elif transaction_selected == "B√°n r√≤ng":
                    data_sell = data_filtered[data_filtered < 0]
                    data_buy = None
                elif transaction_selected == "T·ªïng GT r√≤ng":
                    data_buy = data_filtered[data_filtered > 0]
                    data_sell = data_filtered[data_filtered < 0]

                if data_buy is not None and not data_buy.empty:
                    fig.add_trace(go.Bar(
                        y=data_buy.index,
                        x=data_buy.values,
                        name=f"{investor}",
                        marker_color=colors[i % len(colors)],
                        orientation='h',
                        text=[f"{val:,.1f}bn" if abs(val) > 100 else "" for val in data_buy],
                        textposition="inside", insidetextanchor="middle",
                        hovertemplate=f"{investor} - Mua r√≤ng<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                    ))

                if data_sell is not None and not data_sell.empty:
                    fig.add_trace(go.Bar(
                        y=data_sell.index,
                        x=data_sell.values,
                        name=f"{investor}",
                        marker_color=colors[i % len(colors)],
                        orientation='h',
                        text=[f"{val:,.1f}bn" if abs(val) > 100 else "" for val in data_sell],
                        textposition="inside", insidetextanchor="middle",
                        hovertemplate=f"{investor} - B√°n r√≤ng<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                    ))

            fig.update_layout(
                title=f"üìä BI·ªÇU ƒê·ªí TH·ªä TR∆Ø·ªúNG ({transaction_selected.upper()})",
                font=dict(family="Poppins, sans-serif", size=18, color="black"),
                xaxis_title="Gi√° tr·ªã giao d·ªãch (T·ª∑ VND)",
                yaxis_title="Ng√†nh",
                height=700,
                margin=dict(t=50, b=50),
                legend=dict(title="Nh√† ƒë·∫ßu t∆∞"),
                barmode='relative',
                xaxis=dict(zeroline=True, zerolinewidth=2, zerolinecolor='black'),
                yaxis=dict(categoryorder="total ascending"))
        st.plotly_chart(fig, use_container_width=True)


    def plot_investor_charts(agg_data, matching_columns, total_selected, transaction_selected):
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=list(matching_columns.keys()),
            vertical_spacing=0.1,
            horizontal_spacing=0.2
        )

        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']

        if total_selected:
            # üéØ ====== BI·ªÇU ƒê·ªí T·ªîNG H·ª¢P ======
            agg_data["T·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi"] = agg_data.abs().sum(axis=1)
            agg_data_sorted = agg_data.sort_values(by="T·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi", ascending=True)
            agg_data_sorted = agg_data_sorted.drop(columns=["T·ªïng gi√° tr·ªã tuy·ªát ƒë·ªëi"])

            for i, (investor, column) in enumerate(matching_columns.items()):
                row, col = (i // 2) + 1, (i % 2) + 1

                if column in agg_data_sorted.columns:
                    fig.add_trace(go.Bar(
                        y=agg_data_sorted.index,
                        x=agg_data_sorted[column],
                        name=investor,
                        marker_color=colors[i % len(colors)],
                        orientation='h',
                        hovertemplate=f"{investor}<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                    ), row=row, col=col)
                    fig.update_yaxes(categoryorder="array", categoryarray=agg_data_sorted.index.tolist(), row=row,
                                     col=col)

            title_text = "üìä PH√ÇN B·ªî GIAO D·ªäCH THEO NH√Ä ƒê·∫¶U T∆Ø (KH·ªöP L·ªÜNH + TH·ªéA THU·∫¨N)"
            fig.update_layout(
                title=title_text,
                font=dict(family="Poppins, sans-serif", size=18, color="black"),
                height=700,
                width=500,
                margin=dict(l=0, r=0, t=60, b=60),
                showlegend=False,
                barmode='relative')

        else:
            # üéØ ====== BI·ªÇU ƒê·ªí MUA R√íNG / B√ÅN R√íNG ======
            agg_data["T·ªïng gi√° tr·ªã"] = agg_data.sum(axis=1)
            agg_data = agg_data.sort_values(by="T·ªïng gi√° tr·ªã", ascending=False)
            agg_data = agg_data.drop(columns=["T·ªïng gi√° tr·ªã"])

            for i, (investor, column) in enumerate(matching_columns.items()):
                row, col = (i // 2) + 1, (i % 2) + 1

                if column in agg_data.columns:
                    data_filtered = agg_data[column]
                    data_buy, data_sell = None, None
                    if transaction_selected == "Mua r√≤ng":
                        data_buy = data_filtered[data_filtered > 0]
                        data_sell = None
                    elif transaction_selected == "B√°n r√≤ng":
                        data_sell = data_filtered[data_filtered < 0]
                        data_buy = None
                    elif transaction_selected == "T·ªïng GT r√≤ng":
                        data_buy = data_filtered[data_filtered > 0]
                        data_sell = data_filtered[data_filtered < 0]

                    if data_buy is not None and not data_buy.empty:
                        fig.add_trace(go.Bar(
                            y=data_buy.index,
                            x=data_buy.values,
                            name=f"{investor}",
                            marker_color=colors[i % len(colors)],
                            orientation='h',
                            hovertemplate=f"{investor} - Mua r√≤ng<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                        ), row=row, col=col)

                    if data_sell is not None and not data_sell.empty:
                        fig.add_trace(go.Bar(
                            y=data_sell.index,
                            x=data_sell.values,
                            name=f"{investor}",
                            marker_color=colors[i % len(colors)],
                            orientation='h',
                            hovertemplate=f"{investor} - B√°n r√≤ng<br>Ng√†nh: %{{y}}<br>Gi√° tr·ªã: %{{x:.2f}} t·ª∑ VND"
                        ), row=row, col=col)
                    fig.update_yaxes(categoryorder="total ascending", row=row, col=col)
            title_text = f"üìä PH√ÇN B·ªî GIAO D·ªäCH THEO NH√Ä ƒê·∫¶U T∆Ø ({transaction_selected.upper()})"
            fig.update_layout(
                title=title_text,
                font=dict(family="Poppins, sans-serif", size=18, color="black"),
                height=700,
                width=500,
                margin=dict(l=0, r=0, t=50, b=50),
                showlegend=False,
                barmode='relative'
            )

        st.plotly_chart(fig, use_container_width=True)


    plot_investor_charts(agg_data, matching_columns, total_selected, transaction_selected)
    # -------- SECTION 3: Th·ªëng k√™ d√≤ng ti·ªÅn ----------#
    # Ti√™u ƒë·ªÅ
    st.markdown("<h1>üìä Th·ªëng K√™ D√≤ng Ti·ªÅn</h1>", unsafe_allow_html=True)

    # B·ªô l·ªçc ng√†y
    with st.expander('üîé **B·ªô l·ªçc**', expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("T·ª´ ng√†y", df['ng√†y'].min(), key="start_date_3")
        with col2:
            end_date = st.date_input("ƒê·∫øn ng√†y", df['ng√†y'].max(), key="end_date_3")

    # Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if start_date > end_date:
        st.error("‚ö†Ô∏è Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c!")
        st.stop()

    df_filtered = df[(df['ng√†y'] >= start_date) & (df['ng√†y'] <= end_date)]
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn!")
        st.stop()

    # Mapping nh√≥m nh√† ƒë·∫ßu t∆∞
    col_mapping = {
        "C√° nh√¢n": "c√°_nh√¢n",
        "T·ªï ch·ª©c": "t·ªï_ch·ª©c_trong_n∆∞·ªõc",
        "T·ª± doanh": "t·ª±_doanh",
        "N∆∞·ªõc ngo√†i": "n∆∞·ªõc_ngo√†i"
    }
    investor_types = list(col_mapping.keys())

    # T√≠nh gi√° tr·ªã kh·ªõp v√† th·ªèa thu·∫≠n (ƒë·ªïi sang ƒë∆°n v·ªã T·ª∑ VND)
    khop_values = [df_filtered[f"{col_mapping[inv]}_kh·ªõp_r√≤ng"].sum() / 1e9 for inv in investor_types]
    thoa_thuan_values = [df_filtered[f"{col_mapping[inv]}_th·ªèa_thu·∫≠n_r√≤ng"].sum() / 1e9 for inv in investor_types]

    # T·∫°o figure
    fig = go.Figure()

    # Bi·ªÉu ƒë·ªì ‚ÄúKh·ªõp l·ªánh‚Äù Ribbon + hi·ªÉn th·ªã s·ªë
    fig.add_trace(go.Scatter(
        x=investor_types,
        y=khop_values,
        mode='lines+markers+text',  # hi·ªÉn th·ªã ƒë∆∞·ªùng, marker, v√† text
        line=dict(shape='spline', smoothing=1.2, color='rgba(30, 144, 255, 0.9)', width=2),
        fill='tonexty',
        fillcolor='rgba(30, 144, 255)',
        name='Kh·ªõp l·ªánh',
        text=[f"{v:.1f}" for v in khop_values],  # chu·ªói text hi·ªÉn th·ªã
        textposition='top center',  # v·ªã tr√≠ text
        textfont=dict(color='black', size=14),  # m√†u & c·ª° ch·ªØ
        marker=dict(size=6)  # k√≠ch th∆∞·ªõc marker
    ))

    # Bi·ªÉu ƒë·ªì ‚ÄúTh·ªèa thu·∫≠n‚Äù Ribbon + hi·ªÉn th·ªã s·ªë
    fig.add_trace(go.Scatter(
        x=investor_types,
        y=thoa_thuan_values,
        mode='lines+markers+text',
        line=dict(shape='spline', smoothing=1.2, color='rgba(0, 0, 139, 0.9)', width=2),
        fill='tonexty',
        fillcolor='rgba(0, 0, 139)',
        name='Th·ªèa thu·∫≠n',
        text=[f"{v:.1f}" for v in thoa_thuan_values],
        textposition='top center',
        textfont=dict(color='white', size=14),
        marker=dict(size=6),
    ))
    # N·∫øu b·∫°n kh√¥ng mu·ªën c√°c ƒë∆∞·ªùng th·∫≥ng ƒë·ª©ng ‚Äún·ªëi t·ª´ 0 ƒë·∫øn gi√° tr·ªã‚Äù, h√£y b·ªè h·∫≥n for-loop n√†y.
    # (Ho·∫∑c gi·ªØ l·∫°i nh∆∞ng s·∫Ω v·∫´n l√† ƒë∆∞·ªùng th·∫≥ng, kh√¥ng th·ªÉ bo tr√≤n do c√πng ho√†nh ƒë·ªô.)
    # for i, investor in enumerate(investor_types):
    #     fig.add_trace(go.Scatter(
    #         x=[investor, investor],
    #         y=[0, khop_values[i]],
    #         mode="lines",
    #         line=dict(width=10, color='rgba(30, 144, 255, 0.9)'),
    #         name=f"Kh·ªõp l·ªánh ({investor})"
    #     ))
    #     fig.add_trace(go.Scatter(
    #         x=[investor, investor],
    #         y=[0, thoa_thuan_values[i]],
    #         mode="lines",
    #         line=dict(width=10, color='rgba(0, 0, 139, 0.9)'),
    #         name=f"Th·ªèa thu·∫≠n ({investor})"
    #     ))

    # T√πy ch·ªânh layout
    fig.update_layout(
        title="üìä Th·ªëng K√™ D√≤ng Ti·ªÅn",
        xaxis_title="Nh√≥m nh√† ƒë·∫ßu t∆∞",
        yaxis_title="Gi√° tr·ªã giao d·ªãch (T·ª∑ VND)",
        showlegend=True,
        xaxis=dict(showgrid=False, zeroline=False),
        yaxis=dict(showgrid=True, zeroline=True),
        plot_bgcolor='white',
        font=dict(size=14),
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True)
    # ============BI·ªÇU ƒê·ªí THANH BAR============#
    # **T√≠nh t·ªïng theo ng√†y**
    df_grouped = df_filtered.groupby("ng√†y").sum()

    # T·∫°o figure cho Kh·ªõp l·ªánh & Th·ªèa thu·∫≠n
    fig_khop = go.Figure()
    fig_thoa_thuan = go.Figure()

    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
    investor_list = ["c√°_nh√¢n", "t·ªï_ch·ª©c_trong_n∆∞·ªõc", "t·ª±_doanh", "n∆∞·ªõc_ngo√†i"]

    # X√°c ƒë·ªãnh gi√° tr·ªã l·ªõn nh·∫•t ƒë·ªÉ t·ª± ƒë·ªông scale tr·ª•c Y
    all_values = []

    for investor in investor_list:
        df_col_khop = f"{investor}_kh·ªõp_r√≤ng"
        df_col_thoa_thuan = f"{investor}_th·ªèa_thu·∫≠n_r√≤ng"

        if df_col_khop in df_grouped.columns:
            all_values.extend(df_grouped[df_col_khop].tolist())

        if df_col_thoa_thuan in df_grouped.columns:
            all_values.extend(df_grouped[df_col_thoa_thuan].tolist())

    # **T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh tr·ª•c Y**
    y_max = max(abs(v / 1e9) for v in all_values if v != 0)
    y_range = [-y_max * 1.1, y_max * 1.1]

    for index, investor in enumerate(investor_list):
        color = colors[index % len(colors)]
        df_col_khop = f"{investor}_kh·ªõp_r√≤ng"
        df_col_thoa_thuan = f"{investor}_th·ªèa_thu·∫≠n_r√≤ng"

        if df_col_khop in df_grouped.columns:
            fig_khop.add_trace(go.Bar(
                x=df_grouped.index,
                y=df_grouped[df_col_khop] / 1e9,  # Chia cho 1e9 ƒë·ªÉ hi·ªÉn th·ªã T·ª∑ VND
                name=investor.replace('_', ' ').title(),
                marker_color=color,
                text=[f"{int(x)} bn" if abs(x) > 3000 else "" for x in df_grouped[df_col_khop] / 1e9],  # L√†m tr√≤n s·ªë
                textposition="inside",  # S·ªë li·ªáu n·∫±m trong c·ªôt
                insidetextanchor="middle"  # **Gi·ªØ text ·ªü ch√≠nh gi·ªØa**
            ))

        if df_col_thoa_thuan in df_grouped.columns:
            fig_thoa_thuan.add_trace(go.Bar(
                x=df_grouped.index,
                y=df_grouped[df_col_thoa_thuan] / 1e9,  # Chia cho 1e9 ƒë·ªÉ hi·ªÉn th·ªã T·ª∑ VND
                name=investor.replace('_', ' ').title(),
                marker_color=color,
                text=[f"{int(x)} bn" if abs(x) > 3000 else "" for x in df_grouped[df_col_thoa_thuan] / 1e9],
                # L√†m tr√≤n s·ªë
                textposition="inside",  # S·ªë li·ªáu n·∫±m trong c·ªôt
                insidetextanchor="middle"  # **Gi·ªØ text ·ªü ch√≠nh gi·ªØa**
            ))

    fig_khop.update_layout(
        title="üìä KH·ªöP L·ªÜNH",
        barmode='relative',
        bargap=0.1,  # C·ªôt s√°t nhau nh∆∞ng kh√¥ng d√≠nh
        xaxis=dict(type="category", tickangle=-45),  # Xoay ng√†y th√†nh x√©o
        yaxis=dict(visible=False),  # ·∫®n tr·ª•c Y
        showlegend=True,
        legend=dict(orientation="h", yanchor="bottom", y=1.1, xanchor="center", x=0.5),  # Ch√∫ th√≠ch n·∫±m ngang
    )

    fig_thoa_thuan.update_layout(
        title="üìä TH·ªéA THU·∫¨N",
        barmode='relative',
        bargap=0.1,
        xaxis=dict(type="category", tickangle=-45),  # Xoay ng√†y th√†nh x√©o
        yaxis=dict(visible=False),  # ·∫®n tr·ª•c Y
        showlegend=True,
        legend=dict(orientation="h", yanchor="bottom", y=1.1, xanchor="center", x=0.5),  # Ch√∫ th√≠ch n·∫±m ngang
    )

    # Hi·ªÉn th·ªã hai bi·ªÉu ƒë·ªì c·∫°nh nhau
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_khop, use_container_width=True)
    with col2:
        st.plotly_chart(fig_thoa_thuan, use_container_width=True)

elif selected == "T·ªïng quan th·ªã tr∆∞·ªùng":
    st.markdown("<h1>üìä T·ªïng quan v·ªÅ v·ªën h√≥a TTCK Vi·ªát Nam</h1>", unsafe_allow_html=True)
    EXCEL_PATH = "E:/GOI1_B3/cat1/Cleaned_Vietnam_Marketcap.xlsx"


    @st.cache_data
    def load_and_process_data():
        # Load the Excel file and process the data
        xls = pd.ExcelFile(EXCEL_PATH, engine="openpyxl")
        df1 = xls.parse("Sheet1").fillna({"Sector": "Unknown Sector"})
        df1["Sector"] = df1["Sector"].replace("-", "Uncategorized")

        df2 = xls.parse("Sheet2")
        df2.columns = [str(col).replace(" 00:00:00", "") for col in df2.columns]
        df2["Name"] = df2["Name"].str.replace(" - MARKET VALUE", "", regex=False)
        df2["Code"] = df2["Code"].str.replace("(MV)", "", regex=False)

        merged_df = df2.merge(df1[["Name", "Sector"]], on="Name", how="left")
        date_columns = merged_df.columns[2:-1]
        merged_df[date_columns] = merged_df[date_columns].apply(pd.to_numeric, errors='coerce')

        return df1, merged_df, date_columns


    # Load data globally
    DF1, MERGED_DF, DATE_COLUMNS = load_and_process_data()


    # Helper function to plot stock price
    def plot_stock_price(merged_df, stock_code):
        """V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng gi√° c·ªï phi·∫øu theo m√£ c·ªï phi·∫øu."""
        stock_data = merged_df[merged_df['Code'] == stock_code]
        if stock_data.empty:
            st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu c√≥ m√£ {stock_code}")
            return None

        stock_data = stock_data.iloc[:, 2:-1]  # Exclude 'Name', 'Code', 'Sector' columns
        stock_data = stock_data.T  # Transpose so that dates are on the x-axis
        stock_data.index = pd.to_datetime(stock_data.index)  # Convert index to datetime

        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(stock_data, label=f"{stock_code}")
        ax.set_title(f"Gi√° tr·ªã v·ªën ho√° th·ªã tr∆∞·ªùng c·ªßa {stock_code} theo th·ªùi gian")
        ax.set_xlabel("Th·ªùi gian")
        ax.set_ylabel("Gi√° tr·ªã v·ªën ho√° th·ªã tr∆∞·ªùng")
        ax.legend()
        ax.grid(True)
        return fig


    # Plot sector count
    def plot_sector_count():
        fig, ax = plt.subplots(figsize=(10, 5), dpi=100)
        sector_counts = DF1["Sector"].value_counts()
        top_sectors = sector_counts.head(15)
        top_sectors.plot(kind="bar", ax=ax, color='skyblue', edgecolor='black')
        ax.set_xlabel("Ng√†nh")
        ax.set_ylabel("S·ªë l∆∞·ª£ng c√¥ng ty")
        ax.set_title("Th·ªëng k√™ v·ªÅ s·ªë l∆∞·ª£ng c√¥ng ty trong m·ªói ng√†nh")
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        return fig


    # Plot market cap
    def plot_market_cap():
        SECTOR_MARKETCAP_T = MERGED_DF.groupby("Sector")[DATE_COLUMNS].sum().T
        SECTOR_MARKETCAP_T.index = pd.to_datetime(SECTOR_MARKETCAP_T.index)

        fig, ax = plt.subplots(figsize=(10, 5), dpi=100)
        top_sectors = SECTOR_MARKETCAP_T.sum().nlargest(5).index
        for sector in top_sectors:
            ax.plot(SECTOR_MARKETCAP_T.index, SECTOR_MARKETCAP_T[sector], label=sector)
        ax.set_xlabel("Th·ªùi gian")
        ax.set_ylabel("T·ªïng v·ªën h√≥a th·ªã tr∆∞·ªùng (VNƒê)")
        ax.set_title("Th·ªëng k√™ v·ªÅ v·ªën h√≥a th·ªã tr∆∞·ªùng qua c√°c nƒÉm")
        ax.legend(loc="upper left")
        ax.grid(True)
        return fig


    # Plot sector treemap
    def plot_sector_treemap(selected_date):
        sector_marketcap = MERGED_DF.groupby('Sector')[selected_date].sum().reset_index()
        fig = px.treemap(sector_marketcap, path=['Sector'], values=selected_date,
                         title=f'V·ªën h√≥a th·ªã tr∆∞·ªùng theo ng√†nh ({selected_date})',
                         color=selected_date, color_continuous_scale='blues', height=600)
        return fig


    # Plot bubble chart
    def plot_bubble_chart(selected_date):
        bubble_data = MERGED_DF.groupby(['Sector', 'Code'])[selected_date].sum().reset_index()
        bubble_data = bubble_data[bubble_data[selected_date] > 0]
        if bubble_data.empty:
            st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá cho ng√†y {selected_date}!")
            return None

        fig = px.scatter(
            bubble_data, x='Sector', y=selected_date, size=selected_date,
            hover_name='Code', title=f'Bubble Chart ({selected_date})',
            size_max=50, color='Sector', width=1000, height=600
        )
        return fig


    # Generate PDF report with stock price plot
    def generate_pdf(stock_code):
        progress_bar = st.progress(0)  # Initialize progress bar
        with st.spinner("üìÑ ƒêang t·∫°o b√°o c√°o PDF, vui l√≤ng ƒë·ª£i..."):
            # Define SECTOR_MARKETCAP_T inside the function or globally
            SECTOR_MARKETCAP_T = MERGED_DF.groupby("Sector")[DATE_COLUMNS].sum().T
            SECTOR_MARKETCAP_T.index = pd.to_datetime(SECTOR_MARKETCAP_T.index)

            # Initialize PDF
            pdf = FPDF()
            pdf.add_page()
            pdf.add_font("DejaVu", "", r"E:/GOI1/MSSV_CHAN_GOI1_GROUP1/ttf/DejaVuSans.ttf", uni=True)
            pdf.set_font("DejaVu", size=12)

            pdf.cell(200, 10, "B√°o c√°o th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam", ln=True, align='C')
            pdf.ln(10)

            # Calculate top sectors
            top_sectors = SECTOR_MARKETCAP_T.sum().nlargest(5)
            for sector, value in top_sectors.items():
                pdf.cell(200, 10, f"{sector}: {value:,.0f} VNƒê", ln=True)

            pdf.ln(10)

        for i, plot_func in enumerate([plot_sector_count, plot_market_cap, plot_sector_treemap, plot_bubble_chart]):
            progress_bar.progress((i + 1) / 4)  # Update progress
            if plot_func in [plot_sector_treemap, plot_bubble_chart]:
                fig = plot_func(DATE_COLUMNS[-1])
            else:
                fig = plot_func()

            if fig is None:
                continue

            with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_img:
                if hasattr(fig, "write_image"):
                    fig.write_image(temp_img.name, format="png", width=800, height=600, engine="kaleido")
                else:
                    fig.savefig(temp_img.name, format="png", dpi=100)

            pdf.image(temp_img.name, x=10, w=180)
            pdf.ln(5)

        # Generate the stock price plot for the given stock code
        fig_stock = plot_stock_price(MERGED_DF, stock_code)
        if fig_stock:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_img_stock:
                fig_stock.savefig(temp_img_stock.name, format="png", dpi=100)

            pdf.ln(10)  # Adding some space before the image
            pdf.image(temp_img_stock.name, x=10, w=180)  # Adding the stock price plot image

        # Save the PDF to a file
        pdf_path = "market_report.pdf"
        pdf.output(pdf_path, "F")

        with open(pdf_path, "rb") as file:
            st.success(f"‚úÖ PDF ƒë√£ ƒë∆∞·ª£c t·∫°o: {pdf_path}")
            st.download_button("üì• T·∫£i xu·ªëng PDF", data=file, file_name="market_report.pdf", mime="application/pdf")


    st.pyplot(plot_sector_count())
    st.pyplot(plot_market_cap())

    selected_date = st.selectbox("Ch·ªçn ng√†y ƒë·ªÉ hi·ªÉn th·ªã Treemap", DATE_COLUMNS[::-1])
    st.plotly_chart(plot_sector_treemap(selected_date))
    st.plotly_chart(plot_bubble_chart(selected_date))

    # Get the stock code input from the user
    stock_codes = MERGED_DF["Code"].dropna().unique()
    stock_code = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu ƒë·ªÉ xem gi√° tr·ªã th·ªã tr∆∞·ªùng", options=stock_codes)
    if stock_code:
        fig_stock = plot_stock_price(MERGED_DF, stock_code)
        if fig_stock:
            st.pyplot(fig_stock)
        # Pass the stock code to generate_pdf function when button is clicked
    if st.button("Xu·∫•t b√°o c√°o PDF"):
        generate_pdf(stock_code)  # Pass stock_code to generate_pdf
elif selected == "T·ªïng quan theo ng√†nh":
    st.markdown("<h1>üìä Ph√¢n lo·∫°i theo nh√† ƒë·∫ßu t∆∞ - kh·ªëi ngo·∫°i FT</h1>", unsafe_allow_html=True)
    subpage = st.radio("Ch·ªçn danh m·ª•c", ["Net FT Overview", "Net FT - Ticker", "TOP_FT"], horizontal=True)
    file_paths = {
        "E:/GOI1_B3/Cleaned data/CleanedFT/FT1921_cleaned.csv",
        "E:/GOI1_B3/Cleaned data/CleanedFT/FT2123_cleaned.csv",
        "E:/GOI1_B3/Cleaned data/CleanedFT/FT2325_cleaned.csv"
    }
    if subpage == "Net FT Overview":
        def load_data():
            dfs = [pd.read_csv(path) for path in file_paths]
            df = pd.concat(dfs, ignore_index=True)
            df.columns = df.columns.str.strip()
            df["Date"] = pd.to_datetime(df["Date"], format="%d/%m/%Y", errors="coerce")
            df = df.dropna(subset=["Date", "Net.F_Val", "Close", "%Chg"])
            df = df.sort_values(by="Date").reset_index(drop=True)
            return df

        # Calculate % price change
        def calculate_price_change(df, start_date, end_date):
            first_day = df[df['Date'] == start_date].groupby('Ticker')['Close'].mean()
            last_day = df[df['Date'] == end_date].groupby('Ticker')['Close'].mean()
            price_change = ((last_day - first_day) / first_day).fillna(0)
            return price_change.reset_index().rename(columns={'Close': 'Price_Chg'})


        # Draw treemap
        def draw_treemap(df, title):
            df['color'] = df['Price_Chg'].apply(lambda x: 'green' if x >= 0 else 'red')
            fig = px.treemap(df,
                             path=['Ticker'],
                             values='abs_val',
                             color='color',
                             color_discrete_map={'green': '#00cc96', 'red': '#EF553B'})
            fig.update_traces(texttemplate='%{label}<br>%{customdata[0]:.2%}',
                              customdata=df[['Price_Chg']],
                              marker=dict(line=dict(color='black', width=1)))
            fig.update_layout(title=title, margin=dict(t=40, l=0, r=0, b=0), coloraxis_showscale=False)
            return fig


        def export_pdf(start_date, end_date, fig_time_series, fig1, fig2, filename="treemap_full.pdf"):
            fig_time_series.write_image("time_series.png", width=1000, height=500)
            fig1.write_image("mua_rong.png", width=1000, height=500)
            fig2.write_image("ban_rong.png", width=1000, height=500)

            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(0, 10, f"Data from: {start_date} to: {end_date}", ln=True, align='C')

            pdf.image("time_series.png", x=10, y=30, w=190)
            pdf.add_page()
            pdf.image("mua_rong.png", x=10, y=20, w=190)
            pdf.add_page()
            pdf.image("ban_rong.png", x=10, y=20, w=190)

            pdf.output(filename)
            with open(filename, "rb") as file:
                st.download_button(
                    label="üì• Download PDF",
                    data=file,
                    file_name=filename,
                    mime="application/pdf"
                )


        st.title("Net Foreign Trading Overview ")

        df = load_data()
        start_date, end_date = st.date_input("Select date range:", [df.Date.min(), df.Date.max()])

        filtered_df = df[(df['Date'] >= pd.to_datetime(start_date)) & (df['Date'] <= pd.to_datetime(end_date))]

        st.subheader("üìà Total Foreign Trading Value")
        fig_time_series = go.Figure()
        fig_time_series.add_trace(
            go.Scatter(x=filtered_df["Date"], y=filtered_df["F.Buy_Val"], mode='lines', name="Foreign Buy",
                       line=dict(color='blue', width=5)))
        fig_time_series.add_trace(
            go.Scatter(x=filtered_df["Date"], y=filtered_df["F.Sell_Val"], mode='lines', name="Foreign Sell",
                       line=dict(color='red', width=5)))
        fig_time_series.add_trace(
            go.Scatter(x=filtered_df["Date"], y=filtered_df["Net.F_Val"], mode='lines', name="Net Foreign Trading",
                       line=dict(color='green', width=5)))
        fig_time_series.update_layout(xaxis_title="Date", yaxis_title="Billion VND", template="plotly_dark", width=1200,
                                      height=600)
        st.plotly_chart(fig_time_series)

        total_net_df = filtered_df.groupby('Ticker')['Net.F_Val'].sum().reset_index()
        price_change = calculate_price_change(filtered_df, pd.to_datetime(start_date), pd.to_datetime(end_date))
        merged_df = total_net_df.merge(price_change, on='Ticker')

        mua_rong = merged_df[merged_df['Net.F_Val'] > 0].copy()
        ban_rong = merged_df[merged_df['Net.F_Val'] < 0].copy()

        mua_rong['abs_val'] = mua_rong['Net.F_Val']
        ban_rong['abs_val'] = ban_rong['Net.F_Val'].abs()

        total_mua = mua_rong['abs_val'].sum()
        total_ban = ban_rong['abs_val'].sum()

        col1, col2 = st.columns([total_mua, total_ban])

        with col1:
            st.subheader(f"Net Buy ({total_mua:,.0f} Billion)")
            fig1 = draw_treemap(mua_rong, "Net Buy")
            st.plotly_chart(fig1, use_container_width=True)

        with col2:
            st.subheader(f"Net Sell ({total_ban:,.0f} Billion)")
            fig2 = draw_treemap(ban_rong, "Net Sell")
            st.plotly_chart(fig2, use_container_width=True)
        if st.button("Export PDF"):
            export_pdf(start_date, end_date, fig_time_series, fig1, fig2)
    if subpage == "Net FT - Ticker":
        def load_data(files):
            dfs = {}
            for path in files:
                df = pd.read_csv(path, encoding='utf-8')
                df.columns = df.columns.str.strip()  # X√≥a kho·∫£ng tr·∫Øng
                df["Date"] = pd.to_datetime(df["Date"], format="%d/%m/%Y", errors="coerce")  # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng Date
                dfs[path] = df
            return dfs


        # T·∫£i d·ªØ li·ªáu
        dataframes = load_data(file_paths)

        # G·ªôp t·∫•t c·∫£ d·ªØ li·ªáu v√†o m·ªôt dataframe chung
        data = pd.concat(dataframes.values(), ignore_index=True)

        # L·ªçc b·ªè ng√†y kh√¥ng c√≥ d·ªØ li·ªáu
        data = data.dropna(subset=["Date", "Net.F_Val", "Close"])  # Gi·ªØ l·∫°i c√°c ng√†y c√≥ d·ªØ li·ªáu h·ª£p l·ªá

        # S·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu theo th·ªùi gian
        data = data.sort_values(by=["Date"]).reset_index(drop=True)

        # Giao di·ªán Streamlit
        st.title("üìä NET FT - Ticker")

        # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu r·ªóng
        if data.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.")
        else:
            # Ch·ªçn m√£ c·ªï phi·∫øu
            tickers = sorted(data["Ticker"].dropna().unique())
            ticker_selected = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", tickers)

            # Ch·ªçn kho·∫£ng th·ªùi gian
            min_date = data["Date"].min()
            max_date = data["Date"].max()
            if pd.isna(min_date) or pd.isna(max_date):
                st.warning("D·ªØ li·ªáu kh√¥ng c√≥ ng√†y h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                min_date, max_date = pd.to_datetime("2025-01-01"), pd.to_datetime("2025-02-28")
            start_date = st.date_input("Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", min_date)
            end_date = st.date_input("Ch·ªçn ng√†y k·∫øt th√∫c", max_date)

            # L·ªçc d·ªØ li·ªáu theo m√£ c·ªï phi·∫øu v√† th·ªùi gian
            filtered_data = data[(data["Ticker"] == ticker_selected) & (data["Date"] >= pd.to_datetime(start_date)) & (
                    data["Date"] <= pd.to_datetime(end_date))].copy()

            # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc
            if filtered_data.empty:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
            else:
                # L·ªçc b·ªè ng√†y kh√¥ng c√≥ d·ªØ li·ªáu v√† s·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu ƒë·ªÉ kh√¥ng c√≥ kho·∫£ng tr·ªëng tr√™n bi·ªÉu ƒë·ªì
                filtered_data = filtered_data.dropna(subset=["Net.F_Val", "Close"]).sort_values(by="Date").reset_index(
                    drop=True)

                # T·∫°o d·ªØ li·ªáu ri√™ng cho mua r√≤ng v√† b√°n r√≤ng
                buy_data = filtered_data[filtered_data["Net.F_Val"] >= 0]
                sell_data = filtered_data[filtered_data["Net.F_Val"] < 0]

                # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt gi√° tr·ªã r√≤ng v√† ƒë∆∞·ªùng gi√° ƒë√≥ng c·ª≠a
                fig = go.Figure()
                fig.add_trace(go.Bar(
                    x=buy_data["Date"],
                    y=buy_data["Net.F_Val"],
                    name="Mua r√≤ng",
                    marker_color="#007bff",
                    opacity=0.9,
                    yaxis='y1'
                ))
                fig.add_trace(go.Bar(
                    x=sell_data["Date"],
                    y=sell_data["Net.F_Val"],
                    name="B√°n r√≤ng",
                    marker_color="#dc3545",
                    opacity=0.9,
                    yaxis='y1'
                ))

                # Th√™m ƒë∆∞·ªùng gi√° ƒë√≥ng c·ª≠a tr√™n tr·ª•c y th·ª© hai
                fig.add_trace(go.Scatter(
                    x=filtered_data["Date"],
                    y=filtered_data["Close"],
                    mode='lines+markers',
                    name="Gi√° ƒë√≥ng c·ª≠a",
                    line=dict(color='#ffcc00', width=2),
                    marker=dict(size=4),
                    yaxis='y2'
                ))

                # C·∫≠p nh·∫≠t layout v·ªõi n·ªÅn t·ªëi ƒë·ªÉ n·ªïi b·∫≠t bi·ªÉu ƒë·ªì
                fig.update_layout(
                    title=f"D√≤ng ti·ªÅn v√† Gi√° ƒë√≥ng c·ª≠a - {ticker_selected}",
                    xaxis_title="Th·ªùi gian",
                    xaxis=dict(
                        tickmode='array',
                        tickvals=filtered_data["Date"].iloc[::max(len(filtered_data) // 10, 1)],
                        tickformat='%Y-%m-%d'
                    ),
                    yaxis=dict(
                        title="D√≤ng ti·ªÅn (T·ª∑ VND)",
                        side='left',
                        showgrid=False
                    ),
                    yaxis2=dict(
                        title="Gi√° ƒë√≥ng c·ª≠a",
                        overlaying='y',
                        side='right',
                        showgrid=False
                    ),
                    legend=dict(
                        orientation="v",
                        yanchor="top",
                        y=1,
                        xanchor="right",
                        x=1.15
                    ),
                    template="plotly_dark",
                    width=1200,
                    height=600
                )

                st.plotly_chart(fig)
                # PDF Export Functionality using Matplotlib
                def export_pdf_combined(fig_plot, date):
                    buf = BytesIO()
                    with PdfPages(buf) as pdf:
                        plt.figure(figsize=(8, 6))
                        plt.text(0.5, 0.8, "Foreign Investor Trading Report", fontsize=14, ha='center')
                        plt.text(0.5, 0.6, f"Date Extracted: {date.strftime('%d/%m/%Y')}", fontsize=12, ha='center')
                        plt.axis("off")
                        pdf.savefig()
                        plt.close()
                        fig_bytes = pio.to_image(fig_plot, format="png")
                        img = plt.imread(BytesIO(fig_bytes))
                        plt.figure(figsize=(10, 6))
                        plt.imshow(img)
                        plt.axis("off")
                        pdf.savefig()
                        plt.close()
                    buf.seek(0)
                    return buf
                if st.button("üìÑ Export PDF"):
                    pdf_output = export_pdf_combined(fig, datetime.now())
                    st.download_button(
                        label="Download PDF",
                        data=pdf_output,
                        file_name=f"NET_FT_{ticker_selected}.pdf",
                        mime="application/pdf"
                    )
    if subpage == "TOP_FT":
        st.title("üìä TOP Net Foreign Buying and Selling")
        def load_and_merge_data(files):
            dataframes = []
            for path in files:
                df = pd.read_csv(path, encoding='utf-8')
                df.columns = df.columns.str.strip()
                df["Date"] = pd.to_datetime(df["Date"], format="%d/%m/%Y", errors="coerce")
                df = df.dropna(subset=["Date", "Net.F_Val", "%Chg", "Close"])
                dataframes.append(df)
            return pd.concat(dataframes, ignore_index=True)


        # H√†m xu·∫•t PDF v·ªõi 4 bi·ªÉu ƒë·ªì trong c√πng m·ªôt ·∫£nh
        def export_pdf_combined(figs, top_mua_rong, top_ban_rong, date):
            buf = BytesIO()
            with PdfPages(buf) as pdf:
                plt.figure(figsize=(8, 6))
                plt.text(0.5, 0.8, f"B√°o c√°o giao d·ªãch nh√† ƒë·∫ßu t∆∞ n∆∞·ªõc ngo√†i", fontsize=14, ha='center')
                plt.text(0.5, 0.6, f"Ng√†y tr√≠ch xu·∫•t: {date.strftime('%d/%m/%Y')}", fontsize=12, ha='center')
                plt.axis("off")
                pdf.savefig()
                plt.close()
                fig, axes = plt.subplots(2, 2, figsize=(14, 10))
                titles = ["Top GTGD NN mua r√≤ng", "Top KLGD NN mua r√≤ng", "Top GTGD NN b√°n r√≤ng",
                          "Top KLGD NN b√°n r√≤ng"]
                for ax, fig_plot, title in zip(axes.flatten(), figs, titles):
                    fig_bytes = pio.to_image(fig_plot, format="png")
                    img = plt.imread(BytesIO(fig_bytes))
                    ax.imshow(img)
                    ax.set_title(title, fontsize=14, fontweight="bold")
                    ax.axis("off")
                plt.tight_layout()
                pdf.savefig()
                plt.close()
                # Xu·∫•t b·∫£ng Top Mua/B√°n R√≤ng
                for title, df in [("üìà Top Mua R√≤ng", top_mua_rong), ("üìâ Top B√°n R√≤ng", top_ban_rong)]:
                    fig, ax = plt.subplots(figsize=(10, 4))
                    ax.axis("off")
                    ax.table(cellText=df[['Ticker', 'Close', '%Chg', 'Net.F_Val']].values,
                             colLabels=['M√£', 'Gi√° (Ngh√¨n ƒë·ªìng)', 'Thay ƒë·ªïi (%)', 'Gi√° tr·ªã (T·ª∑ VND)'],
                             cellLoc='center', loc='center')
                    ax.set_title(title, fontsize=14)
                    pdf.savefig()
                    plt.close()
            buf.seek(0)
            return buf

        df = load_and_merge_data(file_paths)


        def plot_bar_chart(df, net_col, buy_col, sell_col, title):
            df_sorted = df.sort_values(by=net_col, ascending=('sell' in title.lower())).head(10)

            fig = go.Figure()

            fig.add_trace(go.Bar(
                y=df_sorted["Ticker"],
                x=df_sorted[sell_col],
                name="Sell",
                orientation="h",
                marker=dict(color="red"),
                text=df_sorted[sell_col].apply(lambda x: f"{x:.1f}bn"),
                textposition="inside"
            ))

            fig.add_trace(go.Bar(
                y=df_sorted["Ticker"],
                x=df_sorted[buy_col],
                name="Buy",
                orientation="h",
                marker=dict(color="green"),
                text=df_sorted[buy_col].apply(lambda x: f"{x:.1f}bn"),
                textposition="inside"
            ))

            color_net = ["yellow" if val >= 0 else "blue" for val in df_sorted[net_col]]
            fig.add_trace(go.Bar(
                y=df_sorted["Ticker"],
                x=df_sorted[net_col],
                name="Net",
                orientation="h",
                marker=dict(color=color_net),
                text=df_sorted[net_col].apply(lambda x: f"{x:.1f}bn"),
                textposition="inside"
            ))

            fig.update_layout(
                title=title,
                barmode="relative",
                xaxis_title="VL",
                yaxis_title="Ticker",
                template="plotly_dark",
                height=400,
                legend=dict(orientation="h", yanchor="top", y=-0.2, xanchor="center", x=0.5),
            )

            return fig

        # Date selection
        selected_date = st.date_input("üìÖ Select Date", pd.to_datetime("2025-02-01"))
        filtered_df = df[df['Date'].dt.date == selected_date]
        if filtered_df.empty:
            st.warning(f"‚ö†Ô∏è No trading data available for {selected_date}. Please choose another date.")
        else:
            st.success(f"‚úÖ Successfully loaded data for {selected_date.strftime('%d/%m/%Y')}")
            st.dataframe(filtered_df)

            # Display top net buying and selling
            top_buy = filtered_df.nlargest(10, 'Net.F_Val')
            top_sell = filtered_df.nsmallest(10, 'Net.F_Val')

            col1, col2 = st.columns(2)

            with col1:
                st.write("### üìà Top Net Buy")
                st.dataframe(top_buy[['Ticker', 'Close', '%Chg', 'Net.F_Val']])

            with col2:
                st.write("### üìâ Top Net Sell")
                st.dataframe(top_sell[['Ticker', 'Close', '%Chg', 'Net.F_Val']])

            # Bar charts
            fig1 = plot_bar_chart(top_buy, 'Net.F_Val', 'F.Buy_Val', 'F.Sell_Val', 'Top Net Buy')
            fig2 = plot_bar_chart(top_sell, 'Net.F_Val', 'F.Buy_Val', 'F.Sell_Val', 'Top Net Sell')
            fig3 = plot_bar_chart(filtered_df[filtered_df["Net.F_Vol"] >= 0], "Net.F_Vol", "F.Buy_Vol", "F.Sell_Vol",
                                  "Top Net Buy Volume")
            fig4 = plot_bar_chart(filtered_df[filtered_df["Net.F_Vol"] < 0], "Net.F_Vol", "F.Buy_Vol", "F.Sell_Vol",
                                  "Top Net Sell Volume")

            st.plotly_chart(fig1)
            st.plotly_chart(fig2)
            st.plotly_chart(fig3)
            st.plotly_chart(fig4)
            # Export PDF
            if st.button("üì• Export PDF"):
                pdf_file = export_pdf_combined([fig1, fig3, fig2, fig4], top_buy, top_sell, selected_date)
                st.download_button("Download PDF", pdf_file, f"report_{selected_date}.pdf", "application/pdf")

# CAT 4
elif selected == "Xu h∆∞·ªõng th·ªã tr∆∞·ªùng":
    st.markdown("<h1>üìä Xu h∆∞·ªõng th·ªã tr∆∞·ªùng - Ph√¢n t√≠ch k·ªπ thu·∫≠t</h1>", unsafe_allow_html=True)
    # ‚úÖ T·∫°o menu subpage
    subpage = st.radio("Ch·ªçn danh m·ª•c",
                       ["T·ªïng quan", "Chi ti·∫øt c·ªï phi·∫øu", "So s√°nh c·ªï phi·∫øu", "Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v·ªõi MA",
                        "ƒê·ªânh c·ªßa CP"], horizontal=True)
    PRICE_DATA_PATH = 'E:/GOI1/MSSV_CHAN_GOI1_GROUP1/MSSV_CHAN_GOI1_GROUP1/Data/Processed_Vietnam_Price.xlsx'
    VOLUME_DATA_PATH = 'E:/GOI1/MSSV_CHAN_GOI1_GROUP1/MSSV_CHAN_GOI1_GROUP1/Data/Processed_Vietnam_volume_2.xlsx'


    # üìå Load d·ªØ li·ªáu t·ª´ file Excel
    @st.cache_data
    def load_data():
        # Load d·ªØ li·ªáu t·ª´ file Excel
        df_price = pd.read_excel(PRICE_DATA_PATH)
        df_volume = pd.read_excel(VOLUME_DATA_PATH)

        # Ch·ªçn ƒë√∫ng c·ªôt ng√†y t·ª´ H -> BHN (c·ªôt ng√†y)
        date_columns = df_price.columns[7:]  # C·ªôt H l√† c·ªôt th·ª© 7 (0-based index)

        return df_price, df_volume, date_columns


    def select_date(date_columns):
        return st.selectbox("üìÖ Ch·ªçn ng√†y ƒë·ªÉ hi·ªÉn th·ªã", date_columns)


    def select_time_period():
        """Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn kho·∫£ng th·ªùi gian"""
        return st.slider("‚è≥ Ch·ªçn s·ªë tu·∫ßn ph√¢n t√≠ch", min_value=4, max_value=104, value=52, step=2)


    def select_time_period1():
        """Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn kho·∫£ng th·ªùi gian"""
        return st.selectbox("‚è≥ Ch·ªçn kho·∫£ng th·ªùi gian", [
            "1 tu·∫ßn", "1 th√°ng", "3 th√°ng", "6 th√°ng", "1 nƒÉm", "2 nƒÉm", "3 nƒÉm", "To√†n b·ªô"
        ])


    def load_data2(price_file, volume_file):
        """T·∫£i d·ªØ li·ªáu t·ª´ file CSV n√©n"""
        try:
            df_price = pd.read_csv(price_file, compression="gzip")
            df_volume = pd.read_csv(volume_file, compression="gzip")

            df_price['Date'] = pd.to_datetime(df_price['Date'], format='%Y%m%d')
            df_volume['Date'] = pd.to_datetime(df_volume['Date'], format='%Y%m%d')

            return df_price, df_volume
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
            return None, None


    file_price = "E:/GOI1_B3/L·ª£i/Processed_Vietnam_Price_Long.csv.gz"
    file_volume = "E:/GOI1_B3/L·ª£i/Processed_Vietnam_Volume_Long.csv.gz"


    def select_date1(df_price):
        available_dates = sorted(df_price['Date'].dropna().unique())
        return st.date_input("üìÖ Ch·ªçn ng√†y", value=available_dates[-1], min_value=available_dates[0],
                             max_value=available_dates[-1])


    def create_summary_table(df_price, df_volume, selected_date):
        if selected_date not in df_price.columns or selected_date not in df_volume.columns:
            st.warning(f"‚ö† Ng√†y {selected_date} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
            return None

        # üìå Chuy·ªÉn c·ªôt ng√†y th√†nh ki·ªÉu s·ªë (float) ƒë·ªÉ tr√°nh l·ªói khi t√≠nh to√°n
        df_price[selected_date] = pd.to_numeric(df_price[selected_date], errors='coerce')
        df_volume[selected_date] = pd.to_numeric(df_volume[selected_date], errors='coerce')

        # L·∫•y ng√†y tr∆∞·ªõc ƒë√≥ ƒë·ªÉ t√≠nh % Change
        prev_day_index = df_price.columns.get_loc(selected_date) - 1
        if prev_day_index < 7:  # ƒê·∫£m b·∫£o kh√¥ng l·∫•y c·ªôt kh√¥ng h·ª£p l·ªá
            st.warning("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n % thay ƒë·ªïi.")
            return None

        prev_day = df_price.columns[prev_day_index]

        # üìå Chuy·ªÉn ƒë·ªïi ng√†y tr∆∞·ªõc ƒë√≥ th√†nh s·ªë
        df_price[prev_day] = pd.to_numeric(df_price[prev_day], errors='coerce')

        # T·∫°o b·∫£ng k·∫øt qu·∫£
        df_selected_price = df_price[['Code', 'Name', selected_date]].copy()
        df_selected_volume = df_volume[['Code', selected_date]].copy()

        # T√≠nh % thay ƒë·ªïi
        df_selected_price["% Change"] = ((df_price[selected_date] - df_price[prev_day]) / df_price[prev_day]) * 100

        # G·ªôp d·ªØ li·ªáu
        df_summary = df_selected_price.merge(df_selected_volume, on="Code", suffixes=("_Gi√°", "_Kh·ªëi l∆∞·ª£ng"))

        df_summary = df_summary.rename(columns={
            str(selected_date) + "_Gi√°": "Gi√° ƒë√≥ng c·ª≠a",
            str(selected_date) + "_Kh·ªëi l∆∞·ª£ng": "Kh·ªëi l∆∞·ª£ng giao d·ªãch"
        })
        # S·∫Øp x·∫øp theo % Change gi·∫£m d·∫ßn
        df_summary = df_summary.sort_values(by="% Change", ascending=False)

        return df_summary


    # üìå Hi·ªÉn th·ªã b·∫£ng trong Streamlit v·ªõi m√†u s·∫Øc
    def display_colored_table(df_summary):
        if df_summary is None:
            return

        def highlight_cells(val):
            """
            T√¥ m√†u d·ª±a tr√™n gi√° tr·ªã % Change:
            - M√†u ƒë·ªè: Gi·∫£m m·∫°nh
            - M√†u v√†ng: Bi·∫øn ƒë·ªông nh·∫π
            - M√†u xanh: TƒÉng m·∫°nh
            """
            color = 'red' if val < 0 else 'lightgreen' if 0 <= val <= 20 else 'green' if val > 20 else 'white'
            return f'background-color: {color}'

        styled_df = df_summary.style.applymap(highlight_cells, subset=['% Change'])

        st.write("üìä **B·∫£ng th·ªëng k√™ gi√° ƒë√≥ng c·ª≠a & kh·ªëi l∆∞·ª£ng giao d·ªãch**")
        st.dataframe(styled_df)


    def plot_sector_distribution(df_price):
        """
        V·∫Ω bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng c√¥ng ty trong t·ª´ng ng√†nh.
        """
        # ƒê·ªïi t√™n ng√†nh '-' th√†nh 'Others'
        df_price['Sector'] = df_price['Sector'].replace('-', 'Others')

        # Nh√≥m d·ªØ li·ªáu theo ng√†nh v√† ƒë·∫øm s·ªë l∆∞·ª£ng c√¥ng ty
        grouped_by_sector = df_price.groupby('Sector').agg({'Name': 'count'}).reset_index()
        grouped_by_sector.columns = ['Ng√†nh', 'S·ªë l∆∞·ª£ng c√¥ng ty']

        # S·∫Øp x·∫øp theo th·ª© t·ª± t·ª´ cao ƒë·∫øn th·∫•p
        grouped_by_sector = grouped_by_sector.sort_values(by='S·ªë l∆∞·ª£ng c√¥ng ty', ascending=False)

        # T·∫°o b·∫£ng m√†u t·ª± ƒë·ªông t·ª´ Seaborn
        colors = sns.color_palette("tab20", len(grouped_by_sector))

        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt d·ªçc v·ªõi m√†u s·∫Øc kh√°c nhau
        fig, ax = plt.subplots(figsize=(15, 8))
        bars = ax.bar(grouped_by_sector['Ng√†nh'], grouped_by_sector['S·ªë l∆∞·ª£ng c√¥ng ty'], color=colors)

        ax.set_xticklabels(grouped_by_sector['Ng√†nh'], rotation=45, ha='right', fontsize=10)
        ax.set_title('S·ªë l∆∞·ª£ng c√¥ng ty trong t·ª´ng ng√†nh', fontsize=16)
        ax.set_xlabel('Ng√†nh', fontsize=12)
        ax.set_ylabel('S·ªë l∆∞·ª£ng c√¥ng ty', fontsize=12)
        ax.grid(axis='y', linestyle='--', alpha=0.7)

        # Th√™m gi√° tr·ªã ch√∫ th√≠ch ph√≠a tr√™n t·ª´ng c·ªôt
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width() / 2, height + 0.5, f'{int(height)}', ha='center', fontsize=10,
                    color='blue')

        plt.tight_layout()

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.pyplot(fig)


    def plot_treemap_ma200(df_price, selected_date):
        # üìå Ki·ªÉm tra n·∫øu ng√†y ƒë∆∞·ª£c ch·ªçn kh√¥ng h·ª£p l·ªá
        if selected_date not in df_price.columns:
            st.warning(f"‚ö† Ng√†y {selected_date} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
            return

        # üìå Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ng√†y th√†nh ki·ªÉu float ƒë·ªÉ t√≠nh to√°n ch√≠nh x√°c
        df_price[selected_date] = pd.to_numeric(df_price[selected_date], errors='coerce')

        # üìå X√°c ƒë·ªãnh ng√†y tr∆∞·ªõc ƒë√≥ (d√πng ƒë·ªÉ l·∫•y gi√° m·ªü c·ª≠a h√¥m nay)
        prev_day_index = df_price.columns.get_loc(selected_date) - 1
        if prev_day_index < 7:
            st.warning("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n MA200.")
            return

        prev_day = df_price.columns[prev_day_index]
        df_price[prev_day] = pd.to_numeric(df_price[prev_day], errors='coerce')

        # üìå T√≠nh gi√° m·ªü c·ª≠a h√¥m nay = Gi√° ƒë√≥ng c·ª≠a ng√†y tr∆∞·ªõc ƒë√≥
        df_price["Open"] = df_price[prev_day]

        # üìå T√≠nh MA200 (Trung b√¨nh ƒë·ªông 200 ng√†y)
        df_price["MA200"] = df_price.iloc[:, -200:].mean(axis=1)

        # üìå X√°c ƒë·ªãnh c·ªï phi·∫øu c√≥ MA200 ƒëang tƒÉng
        df_price["MA200 Change"] = ((df_price[selected_date] - df_price["MA200"]) / df_price["MA200"]) * 100
        df_ma200_up = df_price[df_price["MA200 Change"] > 0].copy()

        # üìå Ki·ªÉm tra n·∫øu kh√¥ng c√≥ c·ªï phi·∫øu n√†o th·ªèa m√£n
        if df_ma200_up.empty:
            st.warning("‚ö† Kh√¥ng c√≥ c·ªï phi·∫øu n√†o c√≥ MA200 ƒëang tƒÉng.")
            return

        # üìå X·ª≠ l√Ω c·ªôt ng√†nh (Sector)
        df_ma200_up["Sector"] = df_ma200_up["Sector"].fillna("Unknown Sectors")
        df_ma200_up["Sector"] = df_ma200_up["Sector"].replace("-", "Others")

        # üìå Chu·∫©n b·ªã d·ªØ li·ªáu cho TreeMap
        df_ma200_up["Custom Data"] = df_ma200_up["Code"] + "<br> MA200 Change: " + df_ma200_up["MA200 Change"].round(
            2).astype(str) + "%"

        # üìå V·∫Ω bi·ªÉu ƒë·ªì TreeMap v·ªõi Plotly
        fig = px.treemap(
            df_ma200_up,
            path=['Sector', 'Code'],
            values=selected_date,  # K√≠ch th∆∞·ªõc √¥ d·ª±a tr√™n gi√° tr·ªã ƒë√≥ng c·ª≠a
            color='MA200 Change',  # M√†u s·∫Øc th·ªÉ hi·ªán m·ª©c ƒë·ªô thay ƒë·ªïi so v·ªõi MA200
            hover_data=['Code', selected_date, "MA200 Change"],
            title=f"TreeMap - C·ªï phi·∫øu c√≥ MA200 ƒëang tƒÉng ({selected_date})",
            custom_data=['Custom Data'],
            color_continuous_scale='RdBu',
            color_continuous_midpoint=0
        )

        # üìå Hi·ªÉn th·ªã m√£ c·ªï phi·∫øu + % thay ƒë·ªïi tr·ª±c ti·∫øp tr√™n TreeMap
        fig.update_traces(texttemplate='%{customdata[0]}')

        fig.update_layout(
            width=3200,
            height=700,
        )

        # üìå Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.plotly_chart(fig)

        # üìå Load d·ªØ li·ªáu


    def plot_price_trend(df_price, tickers, selected_date, start_date, date_columns):
        """
        V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a theo th·ªùi gian.
        """
        # ‚úÖ Chuy·ªÉn ƒë·ªïi `date_columns` th√†nh `datetime`
        date_columns_dt = pd.to_datetime(date_columns, format="%Y-%m-%d", errors="coerce").dropna().sort_values()

        # ‚úÖ Ki·ªÉm tra n·∫øu `selected_date` kh√¥ng c√≥ trong `date_columns_dt`, ch·ªçn ng√†y g·∫ßn nh·∫•t
        if selected_date not in date_columns_dt.values:
            st.warning(f"‚ö† Ng√†y {selected_date.date()} kh√¥ng c√≥ trong d·ªØ li·ªáu! ƒêang ch·ªçn ng√†y g·∫ßn nh·∫•t...")
            selected_date = date_columns_dt.max()  # Ch·ªçn ng√†y g·∫ßn nh·∫•t c√≥ trong d·ªØ li·ªáu

        # ‚úÖ L·ªçc d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
        selected_dates = date_columns_dt[(date_columns_dt >= start_date) & (date_columns_dt <= selected_date)]

        if selected_dates.empty:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn!")
            return

        # ‚úÖ Ki·ªÉm tra n·∫øu t·∫•t c·∫£ c√°c ng√†y ƒë√£ ch·ªçn c√≥ trong `df_price`
        selected_dates = selected_dates.intersection(df_price.columns)

        if selected_dates.empty:
            st.warning("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu n√†o cho c√°c ng√†y ƒë√£ ch·ªçn!")
            return

        # ‚úÖ L·ªçc d·ªØ li·ªáu
        df_filtered = df_price[["Code", "Name"] + list(selected_dates)].copy()

        # ‚úÖ Ch·ªâ gi·ªØ l·∫°i c√°c m√£ c·ªï phi·∫øu ƒë∆∞·ª£c ch·ªçn
        df_filtered = df_filtered[df_filtered["Code"].isin(tickers)]

        if df_filtered.empty:
            st.warning("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi m√£ c·ªï phi·∫øu ƒë√£ ch·ªçn!")
            return

        # ‚úÖ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
        df_melted = df_filtered.melt(id_vars=["Code", "Name"], var_name="Date", value_name="Price")

        # ‚úÖ Chuy·ªÉn ƒë·ªïi ng√†y th√†nh datetime ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
        df_melted["Date"] = pd.to_datetime(df_melted["Date"], errors="coerce")

        # ‚úÖ V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a
        fig = px.line(df_melted, x="Date", y="Price", color="Code",
                      title=f"üìà Xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a",
                      labels={"Price": "Gi√° ƒë√≥ng c·ª≠a", "Date": "", "Code": "M√£ c·ªï phi·∫øu"})

        st.plotly_chart(fig, use_container_width=True)


    def plot_price_change(df_price, tickers, selected_date, previous_date):
        """
        V·∫Ω bi·ªÉu ƒë·ªì Bar Chart % thay ƒë·ªïi gi√° trong ng√†y.
        """

        # üîπ Ki·ªÉm tra n·∫øu `previous_date` kh√¥ng c√≥ trong d·ªØ li·ªáu
        if previous_date not in df_price.columns:
            st.warning(
                f"‚ö† Ng√†y {previous_date.date()} kh√¥ng c√≥ trong d·ªØ li·ªáu! Kh√¥ng th·ªÉ t√≠nh % thay ƒë·ªïi gi√° trong ng√†y.")
            return

        df_filtered = df_price[df_price["Code"].isin(tickers)][["Code", selected_date, previous_date]].copy()

        # ‚úÖ T√≠nh to√°n % Change so v·ªõi ng√†y tr∆∞·ªõc ƒë√≥
        df_filtered["% Change"] = ((df_filtered[selected_date] - df_filtered[previous_date]) / df_filtered[
            previous_date]) * 100

        # ‚úÖ V·∫Ω Bar Chart
        fig = go.Figure(data=[
            go.Bar(x=df_filtered["Code"], y=df_filtered["% Change"],
                   text=df_filtered["% Change"].round(2), textposition='outside',
                   marker_color=["green" if x > 0 else "red" for x in df_filtered["% Change"]])
        ])

        fig.update_layout(title="üìä % Thay ƒë·ªïi gi√° trong ng√†y",
                          xaxis_title="M√£ c·ªï phi·∫øu", yaxis_title="% Change")

        st.plotly_chart(fig, use_container_width=True)


    def plot_price_change_period(df_price, tickers, selected_date, start_date):
        """
        V·∫Ω bi·ªÉu ƒë·ªì Bar Chart % thay ƒë·ªïi gi√° t·ª´ ƒë·∫ßu k·ª≥ (so v·ªõi `start_date`).
        """

        # üîπ Ki·ªÉm tra n·∫øu `start_date` kh√¥ng c√≥ trong d·ªØ li·ªáu
        if start_date not in df_price.columns:
            st.warning(f"‚ö† Ng√†y {start_date.date()} kh√¥ng c√≥ trong d·ªØ li·ªáu! Kh√¥ng th·ªÉ t√≠nh % thay ƒë·ªïi gi√° t·ª´ ƒë·∫ßu k·ª≥.")
            return

        df_filtered = df_price[df_price["Code"].isin(tickers)][["Code", selected_date, start_date]].copy()

        # ‚úÖ T√≠nh to√°n % Change so v·ªõi ng√†y ƒë·∫ßu k·ª≥
        df_filtered["% Change"] = ((df_filtered[selected_date] - df_filtered[start_date]) / df_filtered[
            start_date]) * 100

        # ‚úÖ V·∫Ω Bar Chart
        fig = go.Figure(data=[
            go.Bar(x=df_filtered["Code"], y=df_filtered["% Change"],
                   text=df_filtered["% Change"].round(2), textposition='outside',
                   marker_color=["blue" if x > 0 else "orange" for x in df_filtered["% Change"]])
        ])

        fig.update_layout(
            title="üìä % Thay ƒë·ªïi gi√° t·ª´ ƒë·∫ßu k·ª≥",
            xaxis_title="M√£ c·ªï phi·∫øu",
            yaxis_title="% Change",
            width=1200,  # Chi·ªÅu r·ªông (px)
            height=600  # Chi·ªÅu cao (px), n·∫øu mu·ªën
        )

        st.plotly_chart(fig, use_container_width=True)


    def calculate_highs(df_price, df_volume, selected_date):
        selected_date = pd.to_datetime(selected_date)
        df_price_sorted = df_price[df_price['Date'] < selected_date].sort_values(by='Date', ascending=False)
        df_price_valid = df_price_sorted.groupby('Code').head(260)
        df_price_max = df_price_valid.groupby('Code')['Value'].max().reset_index()
        df_price_max.columns = ['Code', 'H52W']

        df_latest = df_price[df_price['Date'] == selected_date][['Code', 'Value', 'Sector']]
        df_combined = df_latest.merge(df_price_max, on='Code', how='left').dropna(subset=['H52W'])
        df_combined['% ƒê·ªânh 52W'] = ((df_combined['Value'] - df_combined['H52W']) / df_combined['H52W']) * 100

        df_new_highs = df_combined[df_combined['Value'] > df_combined['H52W']]
        df_new_highs['H52W'] = df_new_highs['Value']

        # üî• Ch·ªâ l·∫•y c√°c c·ªï phi·∫øu c√≥ % ƒê·ªânh 52W < 10%
        df_near_highs = df_combined[(df_combined['% ƒê·ªânh 52W'] > -10) & (df_combined['% ƒê·ªânh 52W'] < 0)]

        df_volume_5_avg = df_volume[df_volume['Date'] < selected_date].groupby('Code').tail(5)
        df_volume_5_avg['GTGDQ5P'] = df_volume_5_avg['Value'] * df_volume_5_avg.groupby('Code')['Value'].transform(
            'mean')
        df_volume_5_avg = df_volume_5_avg.groupby('Code')['GTGDQ5P'].mean().reset_index()

        df_new_highs = df_new_highs.merge(df_volume_5_avg, on='Code', how='left')
        df_near_highs = df_near_highs.merge(df_volume_5_avg, on='Code', how='left')

        df_new_highs = df_new_highs[df_new_highs['GTGDQ5P'] >= 10000]
        df_new_highs = df_new_highs[df_new_highs['Sector'] != "-"]
        df_near_highs = df_near_highs[df_near_highs['Sector'] != "-"]

        for col in ['Value', 'H52W', '% ƒê·ªânh 52W', 'GTGDQ5P']:
            df_new_highs[col] = df_new_highs[col].round(2)
            df_near_highs[col] = df_near_highs[col].round(2)

        df_new_highs = df_new_highs.sort_values(by='GTGDQ5P', ascending=False)
        df_near_highs = df_near_highs.sort_values(by='GTGDQ5P', ascending=False)

        return df_new_highs, df_near_highs


    def highlight_gradient(val):
        """T√¥ m√†u d·∫£i m√†u gradient cho % ƒê·ªânh 52W v·ªõi ch·ªØ m√†u tr·∫Øng"""
        if pd.isna(val):
            return 'background-color: white; color: black; text-align: center;'

        # üî• Gi·ªõi h·∫°n ph·∫°m vi ch·ªâ t·ª´ -10% ƒë·∫øn 0%
        val = max(min(val, 0), -10)

        # S·ª≠ d·ª•ng thang m√†u s√°ng h∆°n ƒë·ªÉ tr√°nh qu√° ƒë·∫≠m ·ªü cu·ªëi
        color = px.colors.sample_colorscale("Viridis", (val + 10) / 12)  # L√†m s√°ng m√†u

        # N·∫øu l√† danh s√°ch l·ªìng nhau, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
        if isinstance(color, list):
            color = color[0]

        # üî• N·∫øu `color` l√† chu·ªói "rgb(x, y, z)", c·∫ßn t√°ch th√†nh tuple (x, y, z)
        if isinstance(color, str) and color.startswith("rgb"):
            rgb_values = re.findall(r"[\d.]+", color)  # L·∫•y s·ªë t·ª´ chu·ªói
            rgb_color = tuple(float(v) / 255 for v in rgb_values[:3])  # Chuy·ªÉn v·ªÅ d·∫°ng (R, G, B)
        else:
            rgb_color = color[:3]  # N·∫øu ƒë√£ l√† tuple, ch·ªâ l·∫•y 3 gi√° tr·ªã ƒë·∫ßu

        # Chuy·ªÉn RGB sang HEX
        hex_color = mcolors.to_hex(rgb_color)

        return f'background-color: {hex_color}; color: white; text-align: center;'


    def display_styled_table(df, title, show_percent_col=True, sort_by_percent=False):
        """Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu c√≥ m√†u gradient, cƒÉn gi·ªØa ch·ªØ v√† s·∫Øp x·∫øp n·∫øu c·∫ßn"""
        if df.empty:
            st.warning(f"‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu cho {title}")
            return

        columns_to_show = ['Code', 'Value', 'H52W', '% ƒê·ªânh 52W', 'GTGDQ5P', 'Sector'] if show_percent_col else ['Code',
                                                                                                                 'Value',
                                                                                                                 'H52W',
                                                                                                                 'GTGDQ5P',
                                                                                                                 'Sector']
        df = df[columns_to_show].copy()

        # üî• N·∫øu l√† b·∫£ng ti·ªám c·∫≠n ƒë·ªânh, sort theo % ƒê·ªânh 52W tƒÉng d·∫ßn
        if sort_by_percent:
            df = df.sort_values(by='% ƒê·ªânh 52W', ascending=True)

        # üî• Gi·ªõi h·∫°n ch·ªâ hi·ªÉn th·ªã 40 d√≤ng
        df = df.head(40)

        styled_df = df.style.format(
            {'Value': "{:.2f}", 'H52W': "{:.2f}", '% ƒê·ªânh 52W': "{:.2f}%", 'GTGDQ5P': "{:,.0f}"}) \
            .applymap(highlight_gradient, subset=['% ƒê·ªânh 52W'] if '% ƒê·ªânh 52W' in df.columns else []) \
            .set_properties(**{
            'text-align': 'center',  # CƒÉn gi·ªØa t·∫•t c·∫£ n·ªôi dung
            'vertical-align': 'middle',  # CƒÉn gi·ªØa theo chi·ªÅu d·ªçc
            'white-space': 'nowrap'  # Tr√°nh b·ªã xu·ªëng d√≤ng
        }) \
            .bar(subset=['GTGDQ5P'], color='#3498db')

        st.write(f"üìä **{title}**")
        st.dataframe(styled_df)


    def display_sector_chart(df_near_highs):
        """Bi·ªÉu ƒë·ªì thanh th·ªÉ hi·ªán s·ªë l∆∞·ª£ng c·ªï phi·∫øu ti·ªám c·∫≠n ƒë·ªânh theo ng√†nh (ch·ªâ l·∫•y top 10 ng√†nh cao nh·∫•t)"""
        sector_counts = df_near_highs['Sector'].value_counts().reset_index()
        sector_counts.columns = ['Sector', 'Count']
        sector_counts = sector_counts.head(10)

        fig = px.bar(
            sector_counts, x='Sector', y='Count', color='Sector',
            title="üìä SLCP V∆∞·ª£t & Ti·ªám C·∫≠n 10% ƒê·ªânh 52T Theo Ng√†nh (Top 10)",
            text_auto=True, color_discrete_sequence=px.colors.sequential.Plasma_r
        )

        fig.update_layout(
            xaxis_title="Ng√†nh",
            yaxis_title="S·ªë l∆∞·ª£ng CP",
            showlegend=False,
            xaxis=dict(tickangle=-45),
            plot_bgcolor='white'
        )
        st.plotly_chart(fig, use_container_width=True)


    def calculate_indicators_snapshot(df_price, df_volume, selected_date):
        """
        T√≠nh to√°n c√°c ch·ªâ b√°o (theo snapshot) cho c·ªï phi·∫øu d·ª±a tr√™n d·ªØ li·ªáu gi√° v√† kh·ªëi l∆∞·ª£ng.
        H√†m n√†y d√πng ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng ch·ªâ b√°o.
        """
        if selected_date not in df_price.columns or selected_date not in df_volume.columns:
            st.warning(f"‚ö† Ng√†y {selected_date} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
            return None

        prev_day_index = df_price.columns.get_loc(selected_date) - 1
        if prev_day_index < 7:
            st.warning("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n ch·ªâ b√°o.")
            return None
        prev_day = df_price.columns[prev_day_index]

        df = pd.DataFrame()
        df['Code'] = df_price['Code']
        df['open'] = pd.to_numeric(df_price[prev_day], errors='coerce')
        df['close'] = pd.to_numeric(df_price[selected_date], errors='coerce')
        df['high'] = df_price.loc[:, prev_day:selected_date].max(axis=1)
        df['low'] = df_price.loc[:, prev_day:selected_date].min(axis=1)
        df['volume'] = pd.to_numeric(df_volume[selected_date], errors='coerce')
        df = df.dropna()

        # T√≠nh to√°n MA
        for period in [20, 50, 100, 200]:
            df[f'sma_{period}'] = SMAIndicator(close=df['close'], window=period).sma_indicator()
            df[f'ema_{period}'] = EMAIndicator(close=df['close'], window=period).ema_indicator()
        # MACD
        macd = MACD(close=df['close'], window_slow=26, window_fast=12, window_sign=9)
        df['macd_line'] = macd.macd()
        df['macd_signal'] = macd.macd_signal()
        df['macd_histogram'] = macd.macd_diff()
        # PSAR
        psar = PSARIndicator(high=df['high'], low=df['low'], close=df['close'])
        df['psar'] = psar.psar()
        # RSI
        for period in [9, 14, 21]:
            df[f'rsi_{period}'] = RSIIndicator(close=df['close'], window=period).rsi()
        # Stochastic Oscillator
        stochastic = StochasticOscillator(high=df['high'], low=df['low'], close=df['close'], window=14, smooth_window=3)
        df['stochastic_%k'] = stochastic.stoch()
        df['stochastic_%d'] = stochastic.stoch_signal()
        # CCI
        for period in [10, 20, 30]:
            df[f'cci_{period}'] = (df['close'] - df['close'].rolling(period).mean()) / (
                    0.015 * df['close'].rolling(period).std())
        # Bollinger Bands
        bollinger = BollingerBands(close=df['close'], window=20, window_dev=2)
        df['bb_middle'] = bollinger.bollinger_mavg()
        df['bb_upper'] = bollinger.bollinger_hband()
        df['bb_lower'] = bollinger.bollinger_lband()
        # ATR
        atr = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=14)
        df['atr'] = atr.average_true_range()
        # Chaikin Volatility
        df['chaikin_volatility'] = (df['high'] - df['low']).ewm(span=10, adjust=False).mean().diff() / df['low'] * 100
        # OBV
        df['obv'] = (np.sign(df['close'].diff()) * df['volume']).fillna(0).cumsum()
        # MFI
        df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3
        df['raw_money_flow'] = df['typical_price'] * df['volume']
        df['money_flow_ratio'] = df['raw_money_flow'].rolling(14).sum() / df['raw_money_flow'].rolling(14).sum().shift(
            1)
        df['mfi'] = 100 - (100 / (1 + df['money_flow_ratio']))
        return df


    def get_stock_timeseries(stock, df_price, df_volume, date_columns_dt, start_date, end_date):
        """
        Tr√≠ch xu·∫•t chu·ªói th·ªùi gian cho m√£ c·ªï phi·∫øu ƒë√£ ch·ªçn.
        Ch·ªâ l·∫•y c√°c ng√†y trong kho·∫£ng [start_date, end_date].
        Gi·∫£ s·ª≠ c√°c c·ªôt c·ªßa df_price, df_volume c√≥ t√™n l√† chu·ªói 'YYYY-MM-DD'.
        """
        # L·ªçc c√°c ng√†y h·ª£p l·ªá
        valid_dates = [d for d in date_columns_dt if start_date <= d <= end_date]

        stock_row = df_price[df_price['Code'] == stock]
        volume_row = df_volume[df_volume['Code'] == stock]
        if stock_row.empty or volume_row.empty:
            st.error("‚ö† Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu n√†y!")
            return None

        prices = []
        volumes = []
        for date_str in valid_dates:
            price_val = pd.to_numeric(stock_row[date_str].values[0], errors='coerce')
            volume_val = pd.to_numeric(volume_row[date_str].values[0], errors='coerce')
            prices.append(price_val)
            volumes.append(volume_val)
        df_ts = pd.DataFrame({
            'Date': valid_dates,
            'close': prices,
            'volume': volumes
        })
        # X√°c ƒë·ªãnh gi√° m·ªü: l·∫•y gi√° ƒë√≥ng c·ªßa ng√†y tr∆∞·ªõc ƒë√≥ (v·ªõi ng√†y ƒë·∫ßu ti√™n th√¨ open = close)
        df_ts['open'] = df_ts['close'].shift(1)
        df_ts.loc[df_ts['open'].isna(), 'open'] = df_ts['close']
        # Gi·∫£ ƒë·ªãnh high = max(open, close), low = min(open, close)
        df_ts['high'] = df_ts[['open', 'close']].max(axis=1)
        df_ts['low'] = df_ts[['open', 'close']].min(axis=1)
        return df_ts


    def compute_timeseries_indicators(df):
        n = len(df)
        # T√≠nh SMA & EMA: n·∫øu kh√¥ng ƒë·ªß d·ªØ li·ªáu cho period, g√°n NaN
        for period in [20, 50, 100, 200]:
            if n >= period:
                df[f'sma_{period}'] = SMAIndicator(close=df['close'], window=period).sma_indicator()
                df[f'ema_{period}'] = EMAIndicator(close=df['close'], window=period).ema_indicator()
            else:
                df[f'sma_{period}'] = np.nan
                df[f'ema_{period}'] = np.nan

        macd = MACD(close=df['close'], window_slow=26, window_fast=12, window_sign=9)
        df['macd_line'] = macd.macd()
        df['macd_signal'] = macd.macd_signal()
        df['macd_histogram'] = macd.macd_diff()

        psar = PSARIndicator(high=df['high'], low=df['low'], close=df['close'])
        df['psar'] = psar.psar()

        for period in [9, 14, 21]:
            if n >= period:
                df[f'rsi_{period}'] = RSIIndicator(close=df['close'], window=period).rsi()
            else:
                df[f'rsi_{period}'] = np.nan

        stochastic = StochasticOscillator(high=df['high'], low=df['low'], close=df['close'], window=14, smooth_window=3)
        df['stochastic_%k'] = stochastic.stoch()
        df['stochastic_%d'] = stochastic.stoch_signal()

        for period in [10, 20, 30]:
            if n >= period:
                df[f'cci_{period}'] = (df['close'] - df['close'].rolling(period).mean()) / (
                        0.015 * df['close'].rolling(period).std())
            else:
                df[f'cci_{period}'] = np.nan

        bollinger = BollingerBands(close=df['close'], window=20, window_dev=2)
        df['bb_middle'] = bollinger.bollinger_mavg()
        df['bb_upper'] = bollinger.bollinger_hband()
        df['bb_lower'] = bollinger.bollinger_lband()

        # ƒêi·ªÅu ch·ªânh window cho ATR d·ª±a tr√™n s·ªë h√†ng c√≥ s·∫µn
        window_atr = 14 if n >= 14 else n
        if window_atr < 1:
            window_atr = 1  # ƒê·∫£m b·∫£o window kh√¥ng nh·ªè h∆°n 1
        atr = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=window_atr)
        df['atr'] = atr.average_true_range()

        df['chaikin_volatility'] = (df['high'] - df['low']).ewm(span=10, adjust=False).mean().diff() / df['low'] * 100
        df['obv'] = (np.sign(df['close'].diff()) * df['volume']).fillna(0).cumsum()
        df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3
        df['raw_money_flow'] = df['typical_price'] * df['volume']
        df['money_flow_ratio'] = df['raw_money_flow'].rolling(14).sum() / df['raw_money_flow'].rolling(14).sum().shift(
            1)
        df['mfi'] = 100 - (100 / (1 + df['money_flow_ratio']))
        return df


    def update_chart(df, company, selected_indicators, selected_ma, selected_rsi, selected_cci,
                     selected_indicator_combination):
        """
        X√¢y d·ª±ng bi·ªÉu ƒë·ªì Plotly d·ª±a tr√™n d·ªØ li·ªáu chu·ªói th·ªùi gian (df) v√† c√°c l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng.
        Phi√™n b·∫£n n√†y ƒë∆∞·ª£c chuy·ªÉn th·ªÉ t·ª´ code Dash (update_graph).
        """
        # N·∫øu kh√¥ng ch·ªçn ch·ªâ b√°o hay t·ªï h·ª£p n√†o, ch·ªâ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn
        # T·∫°o figure
        fig = go.Figure(
            data=[
                go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Price',
                    increasing_line_color='green',
                    decreasing_line_color='red',
                )
            ]
        )
        if not selected_indicators and not selected_indicator_combination:
            # Ch·ªâ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn
            return fig
        # N·∫øu ch·ªçn t·ªï h·ª£p ch·ªâ b√°o, ∆∞u ti√™n hi·ªÉn th·ªã t·ªï h·ª£p
        if selected_indicator_combination:
            if selected_indicator_combination == 'PSAR + SMA':
                # V·∫Ω PSAR
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['psar'],
                    mode='markers',
                    name='PSAR',
                    marker=dict(color='purple', size=6, symbol='circle'),
                    opacity=0.8
                ))

                # V·∫Ω SMA 20 (ng·∫Øn h·∫°n)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['sma_20'],
                    mode='lines',
                    name='SMA 20 (Short Term)',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ))

                # V·∫Ω SMA 100 (d√†i h·∫°n)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['sma_100'],
                    mode='lines',
                    name='SMA 100 (Long Term)',
                    line=dict(color='orange', width=2),
                    opacity=0.8
                ))

                # T√≠n hi·ªáu ti·∫øp t·ª•c xu h∆∞·ªõng gi·∫£m m·∫°nh:
                # SMA 20 c·∫Øt xu·ªëng SMA 100 v√† PSAR n·∫±m ph√≠a tr√™n gi√°
                bearish_signal = (
                        (df['sma_20'] < df['sma_100']) &  # SMA 20 n·∫±m d∆∞·ªõi SMA 100
                        (df['sma_20'].shift(1) >= df['sma_100'].shift(1)) &  # SMA 20 v·ª´a c·∫Øt xu·ªëng
                        (df['psar'] > df['close'])  # PSAR n·∫±m tr√™n gi√°
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][bearish_signal],
                    y=df['close'][bearish_signal],
                    mode='markers',
                    name='Bearish Signal (Strong Downtrend)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ))

                # T√≠n hi·ªáu ti·∫øp t·ª•c xu h∆∞·ªõng tƒÉng m·∫°nh:
                # SMA 20 c·∫Øt l√™n SMA 100 v√† PSAR n·∫±m d∆∞·ªõi gi√°
                bullish_signal = (
                        (df['sma_20'] > df['sma_100']) &  # SMA 20 n·∫±m tr√™n SMA 100
                        (df['sma_20'].shift(1) <= df['sma_100'].shift(1)) &  # SMA 20 v·ª´a c·∫Øt l√™n
                        (df['psar'] < df['close'])  # PSAR n·∫±m d∆∞·ªõi gi√°
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][bullish_signal],
                    y=df['close'][bullish_signal],
                    mode='markers',
                    name='Bullish Signal (Strong Uptrend)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ))
            elif selected_indicator_combination == 'PSAR + RSI':
                # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + PSAR, 1 h√†ng cho RSI
                fig = make_subplots(
                    rows=2,
                    cols=1,
                    shared_xaxes=True,  # D√πng chung tr·ª•c X
                    row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                    vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    subplot_titles=["Candlestick with PSAR", "RSI"]
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Candlestick(
                        x=df['Date'],
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close'],
                        name='Price',
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    ),
                    row=1, col=1
                )

                # V·∫Ω PSAR tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['psar'],
                        mode='markers',
                        name='PSAR',
                        marker=dict(color='purple', size=6, symbol='circle'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # V·∫Ω RSI ·ªü subplot th·ª© 2 (h√†ng 2)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['rsi_14'],
                        mode='lines',
                        name='RSI 14',
                        line=dict(color='blue', width=2),
                        opacity=0.8
                    ),
                    row=2, col=1
                )

                # V·∫Ω t√≠n hi·ªáu MUA tr√™n bi·ªÉu ƒë·ªì n·∫øn
                buy_signal = (
                        (df['psar'] < df['close']) &
                        (df['rsi_14'] < 30) &
                        (df['rsi_14'].shift(1) <= df['rsi_14'])
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][buy_signal],
                        y=df['close'][buy_signal],
                        mode='markers',
                        name='Buy Signal (PSAR + RSI)',
                        marker=dict(color='blue', size=20, symbol='triangle-up'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                # V·∫Ω t√≠n hi·ªáu B√ÅN tr√™n bi·ªÉu ƒë·ªì n·∫øn
                sell_signal = (
                        (df['psar'] > df['close']) &
                        (df['rsi_14'] > 70) &
                        (df['rsi_14'].shift(1) >= df['rsi_14'])
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][sell_signal],
                        y=df['close'][sell_signal],
                        mode='markers',
                        name='Sell Signal (PSAR + RSI)',
                        marker=dict(color='orange', size=20, symbol='triangle-down'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # Th√™m d·∫£i m√†u cho v√πng qu√° mua (RSI > 70) v√† qu√° b√°n (RSI < 30)
                fig.add_shape(
                    # V√πng qu√° mua (RSI > 70) - M√†u ƒë·ªè
                    go.layout.Shape(
                        type="rect",
                        x0=df['Date'].iloc[0], x1=df['Date'].iloc[-1],
                        y0=70, y1=100,
                        line=dict(color="red", width=0),
                        fillcolor="rgba(255, 0, 0, 0.2)",  # M√†u ƒë·ªè nh·∫°t
                    ),
                    row=2, col=1
                )
                fig.add_shape(
                    # V√πng qu√° b√°n (RSI < 30) - M√†u xanh
                    go.layout.Shape(
                        type="rect",
                        x0=df['Date'].iloc[0], x1=df['Date'].iloc[-1],
                        y0=0, y1=30,
                        line=dict(color="green", width=0),
                        fillcolor="rgba(0, 255, 0, 0.2)",  # M√†u xanh nh·∫°t
                    ),
                    row=2, col=1
                )
            elif selected_indicator_combination == 'PSAR + MACD':
                # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + PSAR, 1 h√†ng cho MACD
                fig = make_subplots(
                    rows=2,
                    cols=1,
                    shared_xaxes=True,  # D√πng chung tr·ª•c X
                    row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                    vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    subplot_titles=["Candlestick with PSAR", "MACD"]
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Candlestick(
                        x=df['Date'],
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close'],
                        name='Price',
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    ),
                    row=1, col=1
                )

                # V·∫Ω PSAR tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['psar'],
                        mode='markers',
                        name='PSAR',
                        marker=dict(color='purple', size=6, symbol='circle'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # V·∫Ω MACD Line ·ªü subplot th·ª© 2 (h√†ng 2)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['macd_line'],
                        mode='lines',
                        name='MACD Line',
                        line=dict(color='blue', width=2),
                        opacity=0.8
                    ),
                    row=2, col=1
                )

                # V·∫Ω Signal Line
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['macd_signal'],
                        mode='lines',
                        name='Signal Line',
                        line=dict(color='red', width=2, dash='dot'),
                        opacity=0.8
                    ),
                    row=2, col=1
                )

                # V·∫Ω Histogram
                fig.add_trace(
                    go.Bar(
                        x=df['Date'],
                        y=df['macd_histogram'],
                        name='MACD Histogram',
                        marker_color=df['macd_histogram'].apply(lambda x: 'green' if x > 0 else 'red'),
                        opacity=0.6
                    ),
                    row=2, col=1
                )

                # T√≠n hi·ªáu MUA
                buy_signal = (
                        (df['psar'] < df['close']) &  # PSAR n·∫±m d∆∞·ªõi gi√°
                        (df['macd_line'] > df['macd_signal']) &  # MACD Line c·∫Øt Signal Line t·ª´ d∆∞·ªõi l√™n
                        (df['macd_histogram'] > 0) &  # Histogram chuy·ªÉn t·ª´ √¢m sang d∆∞∆°ng
                        (df['macd_histogram'].shift(1) <= 0)  # X√°c nh·∫≠n chuy·ªÉn ƒë·ªïi t·ª´ √¢m sang d∆∞∆°ng
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][buy_signal],
                        y=df['close'][buy_signal],
                        mode='markers',
                        name='Buy Signal (PSAR + MACD)',
                        marker=dict(color='blue', size=20, symbol='triangle-up'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # T√≠n hi·ªáu B√ÅN
                sell_signal = (
                        (df['psar'] > df['close']) &  # PSAR n·∫±m tr√™n gi√°
                        (df['macd_line'] < df['macd_signal']) &  # MACD Line c·∫Øt Signal Line t·ª´ tr√™n xu·ªëng
                        (df['macd_histogram'] < 0) &  # Histogram chuy·ªÉn t·ª´ d∆∞∆°ng sang √¢m
                        (df['macd_histogram'].shift(1) >= 0)  # X√°c nh·∫≠n chuy·ªÉn ƒë·ªïi t·ª´ d∆∞∆°ng sang √¢m
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][sell_signal],
                        y=df['close'][sell_signal],
                        mode='markers',
                        name='Sell Signal (PSAR + MACD)',
                        marker=dict(color='orange', size=20, symbol='triangle-down'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
            elif selected_indicator_combination == 'Bollinger Bands + RSI':
                # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + Bollinger Bands, 1 h√†ng cho RSI
                fig = make_subplots(
                    rows=2,
                    cols=1,
                    shared_xaxes=True,  # D√πng chung tr·ª•c X
                    row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                    vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    subplot_titles=["Candlestick with Bollinger Bands", "RSI"]
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Candlestick(
                        x=df['Date'],
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close'],
                        name='Price',
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    ),
                    row=1, col=1
                )

                # V·∫Ω Bollinger Bands tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_upper'],
                        mode='lines',
                        name='Bollinger Upper Band',
                        line=dict(color='blue', width=1, dash='dash'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_middle'],
                        mode='lines',
                        name='Bollinger Middle Band',
                        line=dict(color='grey', width=1),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_lower'],
                        mode='lines',
                        name='Bollinger Lower Band',
                        line=dict(color='blue', width=1, dash='dash'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # V·∫Ω RSI tr√™n subplot th·ª© 2 (h√†ng 2)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['rsi_14'],
                        mode='lines',
                        name='RSI (14)',
                        line=dict(color='purple', width=2),
                        opacity=0.8,
                        yaxis='y2'  # Hi·ªÉn th·ªã RSI tr√™n tr·ª•c y ph·ª•
                    ),
                    row=2, col=1
                )

                # T√≠n hi·ªáu MUA
                buy_signal = (
                        (df['close'] <= df['bb_lower']) &  # Gi√° ch·∫°m ho·∫∑c th·∫•p h∆°n d·∫£i d∆∞·ªõi c·ªßa Bollinger Bands
                        (df['rsi_14'] < 30)  # RSI d∆∞·ªõi 30 (qu√° b√°n)
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][buy_signal],
                        y=df['close'][buy_signal],
                        mode='markers',
                        name='Buy Signal (BB + RSI)',
                        marker=dict(color='blue', size=20, symbol='triangle-up'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # T√≠n hi·ªáu B√ÅN
                sell_signal = (
                        (df['close'] >= df['bb_upper']) &  # Gi√° ch·∫°m ho·∫∑c v∆∞·ª£t d·∫£i tr√™n c·ªßa Bollinger Bands
                        (df['rsi_14'] > 70)  # RSI tr√™n 70 (qu√° mua)
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][sell_signal],
                        y=df['close'][sell_signal],
                        mode='markers',
                        name='Sell Signal (BB + RSI)',
                        marker=dict(color='orange', size=20, symbol='triangle-down'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # Th√™m tr·ª•c y th·ª© hai cho RSI
                fig.update_layout(
                    yaxis2=dict(
                        showgrid=True
                    )
                )
            elif selected_indicator_combination == 'Bollinger Bands + MACD':
                # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + Bollinger Bands, 1 h√†ng cho MACD
                fig = make_subplots(
                    rows=2,
                    cols=1,
                    shared_xaxes=True,  # D√πng chung tr·ª•c X
                    row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                    vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    subplot_titles=["Candlestick with Bollinger Bands", "MACD"]
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Candlestick(
                        x=df['Date'],
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close'],
                        name='Price',
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    ),
                    row=1, col=1
                )

                # V·∫Ω Bollinger Bands tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_upper'],
                        mode='lines',
                        name='Bollinger Upper Band',
                        line=dict(color='blue', width=1, dash='dash'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_middle'],
                        mode='lines',
                        name='Bollinger Middle Band',
                        line=dict(color='grey', width=1),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_lower'],
                        mode='lines',
                        name='Bollinger Lower Band',
                        line=dict(color='blue', width=1, dash='dash'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # V·∫Ω MACD Line tr√™n subplot th·ª© 2 (h√†ng 2)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['macd_line'],
                        mode='lines',
                        name='MACD Line',
                        line=dict(color='purple', width=2),
                        opacity=0.8
                    ),
                    row=2, col=1
                )

                # V·∫Ω Signal Line tr√™n subplot th·ª© 2 (h√†ng 2)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['macd_signal'],
                        mode='lines',
                        name='Signal Line',
                        line=dict(color='red', width=2, dash='dot'),
                        opacity=0.8
                    ),
                    row=2, col=1
                )

                # T√≠n hi·ªáu MUA
                buy_signal = (
                        (df['macd_line'] > df['macd_signal']) &  # MACD Line c·∫Øt l√™n Signal Line
                        (df['macd_line'].shift(1) <= df['macd_signal'].shift(1)) &  # X√°c nh·∫≠n c·∫Øt l√™n
                        (df['close'] <= df['bb_lower'])  # Gi√° n·∫±m d∆∞·ªõi d·∫£i d∆∞·ªõi Bollinger Bands
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][buy_signal],
                        y=df['close'][buy_signal],
                        mode='markers',
                        name='Buy Signal (BB + MACD)',
                        marker=dict(color='blue', size=20, symbol='triangle-up'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # T√≠n hi·ªáu B√ÅN
                sell_signal = (
                        (df['macd_line'] < df['macd_signal']) &  # MACD Line c·∫Øt xu·ªëng Signal Line
                        (df['macd_line'].shift(1) >= df['macd_signal'].shift(1)) &  # X√°c nh·∫≠n c·∫Øt xu·ªëng
                        (df['close'] >= df['bb_upper'])  # Gi√° n·∫±m tr√™n d·∫£i tr√™n Bollinger Bands
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][sell_signal],
                        y=df['close'][sell_signal],
                        mode='markers',
                        name='Sell Signal (BB + MACD)',
                        marker=dict(color='orange', size=20, symbol='triangle-down'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # Thi·∫øt l·∫≠p layout cho tr·ª•c y th·ª© hai c·ªßa MACD (h√†ng 2)
                fig.update_layout(
                    yaxis2=dict(
                        showgrid=True
                    )
                )
            elif selected_indicator_combination == 'Bollinger Bands + Stochastic Oscillator':
                # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + Bollinger Bands, 1 h√†ng cho Stochastic Oscillator
                fig = make_subplots(
                    rows=2,
                    cols=1,
                    shared_xaxes=True,  # D√πng chung tr·ª•c X
                    row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                    vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    subplot_titles=["Candlestick with Bollinger Bands", "Stochastic Oscillator"]
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Candlestick(
                        x=df['Date'],
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close'],
                        name='Price',
                        increasing_line_color='green',
                        decreasing_line_color='red'
                    ),
                    row=1, col=1
                )

                # V·∫Ω Bollinger Bands tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_upper'],
                        mode='lines',
                        name='Bollinger Upper Band',
                        line=dict(color='blue', width=1, dash='dash'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_middle'],
                        mode='lines',
                        name='Bollinger Middle Band',
                        line=dict(color='grey', width=1),
                        opacity=0.8
                    ),
                    row=1, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['bb_lower'],
                        mode='lines',
                        name='Bollinger Lower Band',
                        line=dict(color='blue', width=1, dash='dash'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # V·∫Ω Stochastic Oscillator tr√™n subplot th·ª© 2 (h√†ng 2)
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['stochastic_%k'],
                        mode='lines',
                        name='Stochastic %K',
                        line=dict(color='green', width=2),
                        opacity=0.8,
                        yaxis='y2'
                    ),
                    row=2, col=1
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'],
                        y=df['stochastic_%d'],
                        mode='lines',
                        name='Stochastic %D',
                        line=dict(color='orange', width=2, dash='dot'),
                        opacity=0.8,
                        yaxis='y2'
                    ),
                    row=2, col=1
                )

                # Th√™m v√πng qu√° mua v√† qu√° b√°n cho Stochastic
                fig.add_shape(
                    type='rect',
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=80,
                    y1=100,
                    fillcolor='red',
                    opacity=0.2,
                    layer='below',
                    line_width=0,
                    yref='y2'
                )
                fig.add_shape(
                    type='rect',
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=0,
                    y1=20,
                    fillcolor='green',
                    opacity=0.2,
                    layer='below',
                    line_width=0,
                    yref='y2'
                )

                # T√≠n hi·ªáu MUA
                buy_signal = (
                        (df['close'] <= df['bb_lower']) &  # Gi√° ch·∫°m ho·∫∑c d∆∞·ªõi d·∫£i d∆∞·ªõi Bollinger Bands
                        (df['stochastic_%k'] < 20) &  # %K trong v√πng qu√° b√°n
                        (df['stochastic_%k'] > df['stochastic_%d'])  # %K c·∫Øt l√™n %D
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][buy_signal],
                        y=df['close'][buy_signal],
                        mode='markers',
                        name='Buy Signal (BB + Stochastic)',
                        marker=dict(color='blue', size=20, symbol='triangle-up'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # T√≠n hi·ªáu B√ÅN
                sell_signal = (
                        (df['close'] >= df['bb_upper']) &  # Gi√° ch·∫°m ho·∫∑c tr√™n d·∫£i tr√™n Bollinger Bands
                        (df['stochastic_%k'] > 80) &  # %K trong v√πng qu√° mua
                        (df['stochastic_%k'] < df['stochastic_%d'])  # %K c·∫Øt xu·ªëng %D
                )
                fig.add_trace(
                    go.Scatter(
                        x=df['Date'][sell_signal],
                        y=df['close'][sell_signal],
                        mode='markers',
                        name='Sell Signal (BB + Stochastic)',
                        marker=dict(color='orange', size=20, symbol='triangle-down'),
                        opacity=0.8
                    ),
                    row=1, col=1
                )

                # Thi·∫øt l·∫≠p layout cho tr·ª•c y th·ª© hai c·ªßa Stochastic (h√†ng 2)
                fig.update_layout(
                    yaxis2=dict(
                        showgrid=True
                    )
                )
            elif selected_indicator_combination == 'RSI + MACD':
                # T·∫°o subplots v·ªõi 3 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn, 1 h√†ng cho RSI, 1 h√†ng cho MACD
                fig = make_subplots(
                    rows=3,
                    cols=1,
                    shared_xaxes=True,  # D√πng chung tr·ª•c X
                    row_heights=[0.6, 0.2, 0.2],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                    vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    subplot_titles=('Candlestick Chart', 'RSI', 'MACD'),  # Ti√™u ƒë·ªÅ cho m·ªói subplot
                    shared_yaxes=True  # D√πng chung tr·ª•c Y
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn trong subplot ch√≠nh (row 1)
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick',
                ), row=1, col=1)

                # V·∫Ω RSI trong subplot 1 (row 2)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['rsi_14'],
                    mode='lines',
                    name='RSI (14)',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ), row=2, col=1)

                # V√πng qu√° mua (RSI > 70)
                fig.add_shape(
                    type='rect',
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=70,
                    y1=100,
                    fillcolor='red',
                    opacity=0.2,
                    layer='below',
                    line_width=0,
                    yref='y2',
                    row=2, col=1
                )

                # V√πng qu√° b√°n (RSI < 30)
                fig.add_shape(
                    type='rect',
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=0,
                    y1=30,
                    fillcolor='green',
                    opacity=0.2,
                    layer='below',
                    line_width=0,
                    yref='y2',
                    row=2, col=1
                )

                # V·∫Ω MACD trong subplot 2 (row 3)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['macd_line'],
                    mode='lines',
                    name='MACD Line',
                    line=dict(color='green', width=2),
                    opacity=0.8
                ), row=3, col=1)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['macd_signal'],
                    mode='lines',
                    name='Signal Line',
                    line=dict(color='red', width=2, dash='dot'),
                    opacity=0.8
                ), row=3, col=1)
                fig.add_trace(go.Bar(
                    x=df['Date'],
                    y=df['macd_histogram'],
                    name='MACD Histogram',
                    marker_color=df['macd_histogram'].apply(lambda x: 'green' if x > 0 else 'red'),
                    opacity=0.6
                ), row=3, col=1)

                # T√≠n hi·ªáu MUA
                buy_signal = (
                        (df['rsi_14'] < 30) &  # RSI trong v√πng qu√° b√°n
                        (df['macd_line'] > df['macd_signal']) &  # Giao c·∫Øt tƒÉng c·ªßa MACD
                        (df['macd_line'].shift(1) <= df['macd_signal'].shift(1))  # MACD tr∆∞·ªõc ƒë√≥ ·ªü d∆∞·ªõi Signal
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][buy_signal],
                    y=df['close'][buy_signal],
                    mode='markers',
                    name='Buy Signal (RSI + MACD)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=1, col=1)  # V·∫Ω tr√™n bi·ªÉu ƒë·ªì n·∫øn ch√≠nh

                # T√≠n hi·ªáu B√ÅN
                sell_signal = (
                        (df['rsi_14'] > 70) &  # RSI trong v√πng qu√° mua
                        (df['macd_line'] < df['macd_signal']) &  # Giao c·∫Øt gi·∫£m c·ªßa MACD
                        (df['macd_line'].shift(1) >= df['macd_signal'].shift(1))  # MACD tr∆∞·ªõc ƒë√≥ ·ªü tr√™n Signal
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][sell_signal],
                    y=df['close'][sell_signal],
                    mode='markers',
                    name='Sell Signal (RSI + MACD)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=1, col=1)  # V·∫Ω tr√™n bi·ªÉu ƒë·ªì n·∫øn ch√≠nh
        else:
            # V√≠ d·ª•: t√≠ch h·ª£p Moving Averages n·∫øu "MA" ƒë∆∞·ª£c ch·ªçn
            if 'MA' in selected_indicators:
                ma_pairs = {
                    'sma_20': 'SMA 20',
                    'sma_50': 'SMA 50',
                    'sma_100': 'SMA 100',
                    'sma_200': 'SMA 200',
                    'ema_20': 'EMA 20',
                    'ema_50': 'EMA 50',
                    'ema_100': 'EMA 100',
                    'ema_200': 'EMA 200'
                }
                if selected_ma:
                    for short_ma, long_ma in ma_pairs:
                        # Ki·ªÉm tra n·∫øu c·∫£ 2 MA ƒë∆∞·ª£c ch·ªçn
                        if short_ma in selected_ma and long_ma in selected_ma:
                            short_ma_series = df[short_ma]
                            long_ma_series = df[long_ma]

                            # T√≠n hi·ªáu MUA: MA ng·∫Øn h·∫°n c·∫Øt l√™n MA d√†i h·∫°n
                            buy_signals = (short_ma_series > long_ma_series) & (
                                    short_ma_series.shift(1) <= long_ma_series.shift(1))
                            fig.add_trace(go.Scatter(
                                x=df['Date'][buy_signals],
                                y=df['close'][buy_signals],
                                mode='markers',
                                name=f'Buy Signal ({short_ma} vs {long_ma})',
                                marker=dict(color='purple', size=20, symbol='triangle-up'),
                                opacity=0.8
                            ))

                            # T√≠n hi·ªáu B√ÅN: MA ng·∫Øn h·∫°n c·∫Øt xu·ªëng MA d√†i h·∫°n
                            sell_signals = (short_ma_series < long_ma_series) & (
                                    short_ma_series.shift(1) >= long_ma_series.shift(1))
                            fig.add_trace(go.Scatter(
                                x=df['Date'][sell_signals],
                                y=df['close'][sell_signals],
                                mode='markers',
                                name=f'Sell Signal ({short_ma} vs {long_ma})',
                                marker=dict(color='pink', size=20, symbol='triangle-down'),
                                opacity=0.8
                            ))

                # V·∫Ω c√°c ƒë∆∞·ªùng MA m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
                ma_columns = {
                    'sma_20': 'SMA 20',
                    'sma_50': 'SMA 50',
                    'sma_100': 'SMA 100',
                    'sma_200': 'SMA 200',
                    'ema_20': 'EMA 20',
                    'ema_50': 'EMA 50',
                    'ema_100': 'EMA 100',
                    'ema_200': 'EMA 200'
                }

                # V·∫Ω t·ª´ng ƒë∆∞·ªùng MA ƒë∆∞·ª£c ch·ªçn v√† t√≠nh t√≠n hi·ªáu giao d·ªãch n·∫øu ch·ªâ ch·ªçn 1 MA
                for ma_column, ma_label in ma_columns.items():
                    if ma_column in selected_ma:
                        # V·∫Ω ƒë∆∞·ªùng MA tr√™n bi·ªÉu ƒë·ªì n·∫øn
                        fig.add_trace(go.Scatter(
                            x=df['Date'],
                            y=df[ma_column],
                            mode='lines',
                            name=ma_label,
                            line=dict(width=2, dash='solid'),
                            opacity=0.8
                        ))

                        # N·∫øu ch·ªâ ch·ªçn 1 MA, th√™m t√≠n hi·ªáu giao c·∫Øt v·ªõi gi√°
                        buy_signals = (df['close'] > df[ma_column]) & (df['close'].shift(1) <= df[ma_column].shift(1))
                        sell_signals = (df['close'] < df[ma_column]) & (df['close'].shift(1) >= df[ma_column].shift(1))

                        # V·∫Ω t√≠n hi·ªáu MUA
                        fig.add_trace(go.Scatter(
                            x=df['Date'][buy_signals],
                            y=df['close'][buy_signals],
                            mode='markers',
                            name=f'Buy Signal ({ma_label})',
                            marker=dict(color='blue', size=20, symbol='triangle-up'),
                            opacity=0.8
                        ))

                        # V·∫Ω t√≠n hi·ªáu B√ÅN
                        fig.add_trace(go.Scatter(
                            x=df['Date'][sell_signals],
                            y=df['close'][sell_signals],
                            mode='markers',
                            name=f'Sell Signal ({ma_label})',
                            marker=dict(color='orange', size=20, symbol='triangle-down'),
                            opacity=0.8
                        ))
            elif 'MACD' in selected_indicators:
                # T·∫°o subplot cho MACD
                fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                                    vertical_spacing=0.02, row_heights=[0.7, 0.3])
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['macd_line'],
                    mode='lines',
                    name='MACD Line',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ), row=2, col=1)
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['macd_signal'],
                    mode='lines',
                    name='Signal Line',
                    line=dict(color='red', width=2, dash='dot'),
                    opacity=0.8
                ), row=2, col=1)
                fig.add_trace(go.Bar(
                    x=df['Date'],
                    y=df['macd_histogram'],
                    name='MACD Histogram',
                    marker_color=df['macd_histogram'].apply(lambda x: 'green' if x >= 0 else 'red'),
                    opacity=0.6
                ), row=2, col=1)
                # T√≠n hi·ªáu giao d·ªãch d·ª±a tr√™n MACD Line v√† Signal Line
                buy_signals = (df['macd_line'] > df['macd_signal']) & (
                        df['macd_line'].shift(1) <= df['macd_signal'].shift(1))
                sell_signals = (df['macd_line'] < df['macd_signal']) & (
                        df['macd_line'].shift(1) >= df['macd_signal'].shift(1))

                # V·∫Ω t√≠n hi·ªáu MUA
                fig.add_trace(go.Scatter(
                    x=df['Date'][buy_signals],
                    y=df['macd_line'][buy_signals],  # Ch·ªçn macd_line ƒë·ªÉ hi·ªán tr√™n MACD chart
                    mode='markers',
                    name='Buy Signal (MACD)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)

                # V·∫Ω t√≠n hi·ªáu B√ÅN
                fig.add_trace(go.Scatter(
                    x=df['Date'][sell_signals],
                    y=df['macd_line'][sell_signals],  # Ch·ªçn macd_line ƒë·ªÉ hi·ªán tr√™n MACD chart
                    mode='markers',
                    name='Sell Signal (MACD)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)

                # Zero Line Crossover
                zero_cross_up = (df['macd_line'] > 0) & (df['macd_line'].shift(1) <= 0)
                zero_cross_down = (df['macd_line'] < 0) & (df['macd_line'].shift(1) >= 0)

                # T√≠n hi·ªáu Zero Line Crossover (TƒÉng gi√°)
                fig.add_trace(go.Scatter(
                    x=df['Date'][zero_cross_up],
                    y=df['macd_line'][zero_cross_up],
                    mode='markers',
                    name='Zero Line Up (MACD)',
                    marker=dict(color='blue', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu Zero Line Crossover (Gi·∫£m gi√°)
                fig.add_trace(go.Scatter(
                    x=df['Date'][zero_cross_down],
                    y=df['macd_line'][zero_cross_down],
                    mode='markers',
                    name='Zero Line Down (MACD)',
                    marker=dict(color='purple', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)
            elif 'PSAR' in selected_indicators:
                # V·∫Ω c√°c ƒëi·ªÉm SAR tr√™n bi·ªÉu ƒë·ªì n·∫øn
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['psar'],
                    mode='markers',
                    name='PSAR',
                    marker=dict(color='purple', size=6, symbol='circle'),
                    opacity=0.8
                ))

                # T√≠n hi·ªáu giao d·ªãch t·ª´ PSAR
                buy_signals = (df['psar'] < df['low']) & (df['psar'].shift(1) >= df['high'].shift(1))
                sell_signals = (df['psar'] > df['high']) & (df['psar'].shift(1) <= df['low'].shift(1))

                # V·∫Ω t√≠n hi·ªáu MUA
                fig.add_trace(go.Scatter(
                    x=df['Date'][buy_signals],
                    y=df['close'][buy_signals],
                    mode='markers',
                    name='Buy Signal (PSAR)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ))

                # V·∫Ω t√≠n hi·ªáu B√ÅN
                fig.add_trace(go.Scatter(
                    x=df['Date'][sell_signals],
                    y=df['close'][sell_signals],
                    mode='markers',
                    name='Sell Signal (PSAR)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ))
            # T√≠ch h·ª£p RSI n·∫øu ƒë∆∞·ª£c ch·ªçn
            elif 'RSI' in selected_indicators and selected_rsi:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: RSI)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† RSI
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω ƒë∆∞·ªùng RSI trong h√†ng 2
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df[selected_rsi],
                    mode='lines',
                    name=f'{selected_rsi.upper()}',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ), row=2, col=1)  # Ch·ªâ r√µ v·∫Ω ·ªü h√†ng 2

                # V√πng Overbought (RSI > 70)
                fig.add_shape(
                    type='rect',
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=70,
                    y1=100,
                    fillcolor='red',
                    opacity=0.2,
                    layer='below',
                    line_width=0,
                    row=2, col=1  # Ch·ªâ r√µ shape n·∫±m ·ªü h√†ng 2
                )

                # V√πng Oversold (RSI < 30)
                fig.add_shape(
                    type='rect',
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=0,
                    y1=30,
                    fillcolor='green',
                    opacity=0.2,
                    layer='below',
                    line_width=0,
                    row=2, col=1  # Ch·ªâ r√µ shape n·∫±m ·ªü h√†ng 2
                )

                # T√≠n hi·ªáu qu√° mua/qu√° b√°n
                overbought_signals = df[selected_rsi] > 70
                oversold_signals = df[selected_rsi] < 30

                # T√≠n hi·ªáu MUA (qu√° b√°n)
                fig.add_trace(go.Scatter(
                    x=df['Date'][oversold_signals],
                    y=df[selected_rsi][oversold_signals],
                    mode='markers',
                    name='Buy Signal (RSI)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu MUA ·ªü h√†ng 2

                # T√≠n hi·ªáu B√ÅN (qu√° mua)
                fig.add_trace(go.Scatter(
                    x=df['Date'][overbought_signals],
                    y=df[selected_rsi][overbought_signals],
                    mode='markers',
                    name='Sell Signal (RSI)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu B√ÅN ·ªü h√†ng 2

                # C·∫Øt m·ª©c 50
                cross_up_50 = (df[selected_rsi] > 50) & (df[selected_rsi].shift(1) <= 50)
                cross_down_50 = (df[selected_rsi] < 50) & (df[selected_rsi].shift(1) >= 50)

                # V·∫Ω t√≠n hi·ªáu c·∫Øt m·ª©c 50
                fig.add_trace(go.Scatter(
                    x=df['Date'][cross_up_50],
                    y=df[selected_rsi][cross_up_50],
                    mode='markers',
                    name='RSI Cross Up 50',
                    marker=dict(color='blue', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu c·∫Øt l√™n ·ªü h√†ng 2

                fig.add_trace(go.Scatter(
                    x=df['Date'][cross_down_50],
                    y=df[selected_rsi][cross_down_50],
                    mode='markers',
                    name='RSI Cross Down 50',
                    marker=dict(color='purple', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu c·∫Øt xu·ªëng ·ªü h√†ng 2
            # T√≠ch h·ª£p Stochastic Oscillator
            elif 'Stochastic Oscillator' in selected_indicators:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: Stochastic Oscillator)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† Stochastic Oscillator
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω %K Line trong h√†ng 2
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['stochastic_%k'],
                    mode='lines',
                    name='%K Line',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ), row=2, col=1)

                # V·∫Ω %D Line trong h√†ng 2
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['stochastic_%d'],
                    mode='lines',
                    name='%D Line',
                    line=dict(color='orange', width=2, dash='dot'),
                    opacity=0.8
                ), row=2, col=1)

                # V√πng Overbought (Tr√™n 80) trong h√†ng 2
                fig.add_shape(
                    type='rect',
                    xref='x2',  # Tham chi·∫øu ƒë·∫øn h√†ng th·ª© 2 (x-axis c·ªßa h√†ng 2)
                    yref='y2',  # Tham chi·∫øu ƒë·∫øn h√†ng th·ª© 2 (y-axis c·ªßa h√†ng 2)
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=80,
                    y1=100,
                    fillcolor='red',
                    opacity=0.2,
                    layer='below',
                    line_width=0
                )

                # V√πng Oversold (D∆∞·ªõi 20) trong h√†ng 2
                fig.add_shape(
                    type='rect',
                    xref='x2',  # Tham chi·∫øu ƒë·∫øn h√†ng th·ª© 2
                    yref='y2',  # Tham chi·∫øu ƒë·∫øn h√†ng th·ª© 2
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=0,
                    y1=20,
                    fillcolor='green',
                    opacity=0.2,
                    layer='below',
                    line_width=0
                )

                # T√≠n hi·ªáu giao d·ªãch: Crossovers
                buy_signals = (df['stochastic_%k'] > df['stochastic_%d']) & (
                        df['stochastic_%k'].shift(1) <= df['stochastic_%d'].shift(1))
                sell_signals = (df['stochastic_%k'] < df['stochastic_%d']) & (
                        df['stochastic_%k'].shift(1) >= df['stochastic_%d'].shift(1))

                # V·∫Ω t√≠n hi·ªáu MUA trong h√†ng 2
                fig.add_trace(go.Scatter(
                    x=df['Date'][buy_signals],
                    y=df['stochastic_%k'][buy_signals],
                    mode='markers',
                    name='Buy Signal (Stochastic)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)

                # V·∫Ω t√≠n hi·ªáu B√ÅN trong h√†ng 2
                fig.add_trace(go.Scatter(
                    x=df['Date'][sell_signals],
                    y=df['stochastic_%k'][sell_signals],
                    mode='markers',
                    name='Sell Signal (Stochastic)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)

            # T√≠ch h·ª£p CCI
            elif 'CCI' in selected_indicators and selected_cci:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: CCI)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† CCI
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω ƒë∆∞·ªùng CCI ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df[selected_cci],
                    mode='lines',
                    name=f'{selected_cci.upper()}',
                    line=dict(color='purple', width=2),
                    opacity=0.8
                ), row=2, col=1)

                # V√πng Overbought (> +100) ·ªü h√†ng th·ª© 2
                fig.add_shape(
                    type='rect',
                    xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                    yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=100,
                    y1=300,
                    fillcolor='red',
                    opacity=0.2,
                    layer='below',
                    line_width=0
                )

                # V√πng Oversold (< -100) ·ªü h√†ng th·ª© 2
                fig.add_shape(
                    type='rect',
                    xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                    yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=-300,
                    y1=-100,
                    fillcolor='green',
                    opacity=0.2,
                    layer='below',
                    line_width=0
                )

                # T√≠n hi·ªáu giao d·ªãch CCI
                buy_signals = df[selected_cci] < -100
                sell_signals = df[selected_cci] > 100

                # V·∫Ω t√≠n hi·ªáu MUA (qu√° b√°n) ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'][buy_signals],
                    y=df[selected_cci][buy_signals],
                    mode='markers',
                    name='Buy Signal (CCI)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)

                # V·∫Ω t√≠n hi·ªáu B√ÅN (qu√° mua) ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'][sell_signals],
                    y=df[selected_cci][sell_signals],
                    mode='markers',
                    name='Sell Signal (CCI)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)

                # Zero Line Crossover
                cross_up_zero = (df[selected_cci] > 0) & (df[selected_cci].shift(1) <= 0)
                cross_down_zero = (df[selected_cci] < 0) & (df[selected_cci].shift(1) >= 0)

                # T√≠n hi·ªáu CCI c·∫Øt l√™n 0 ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'][cross_up_zero],
                    y=df[selected_cci][cross_up_zero],
                    mode='markers',
                    name='CCI Cross Up 0',
                    marker=dict(color='blue', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu CCI c·∫Øt xu·ªëng 0 ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'][cross_down_zero],
                    y=df[selected_cci][cross_down_zero],
                    mode='markers',
                    name='CCI Cross Down 0',
                    marker=dict(color='purple', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)

            # T√≠ch h·ª£p Bollinger Bands
            elif 'Bollinger Bands' in selected_indicators:
                # V·∫Ω Middle Band
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['bb_middle'],
                    mode='lines',
                    name='Middle Band',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ))

                # V·∫Ω Upper Band
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['bb_upper'],
                    mode='lines',
                    name='Upper Band',
                    line=dict(color='red', width=2, dash='dot'),
                    opacity=0.8
                ))

                # V·∫Ω Lower Band
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['bb_lower'],
                    mode='lines',
                    name='Lower Band',
                    line=dict(color='green', width=2, dash='dot'),
                    opacity=0.8
                ))

                # T√≠n hi·ªáu giao d·ªãch:
                # Qu√° mua: Gi√° ch·∫°m Upper Band
                overbought_signals = df['close'] >= df['bb_upper']
                fig.add_trace(go.Scatter(
                    x=df['Date'][overbought_signals],
                    y=df['close'][overbought_signals],
                    mode='markers',
                    name='Overbought (Sell Signal)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ))

                # Qu√° b√°n: Gi√° ch·∫°m Lower Band
                oversold_signals = df['close'] <= df['bb_lower']
                fig.add_trace(go.Scatter(
                    x=df['Date'][oversold_signals],
                    y=df['close'][oversold_signals],
                    mode='markers',
                    name='Oversold (Buy Signal)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ))

                # Breakout
                breakout_upper = df['high'] > df['bb_upper']
                breakout_lower = df['low'] < df['bb_lower']
                fig.add_trace(go.Scatter(
                    x=df['Date'][breakout_upper],
                    y=df['high'][breakout_upper],
                    mode='markers',
                    name='Breakout Above Upper Band',
                    marker=dict(color='purple', size=10, symbol='circle'),
                    opacity=0.8
                ))
                fig.add_trace(go.Scatter(
                    x=df['Date'][breakout_lower],
                    y=df['low'][breakout_lower],
                    mode='markers',
                    name='Breakout Below Lower Band',
                    marker=dict(color='orange', size=10, symbol='circle'),
                    opacity=0.8
                ))
            # T√≠ch h·ª£p ATR
            if 'ATR' in selected_indicators:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: ATR)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† ATR
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω ƒë∆∞·ªùng ATR ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['atr'],
                    mode='lines',
                    name='ATR',
                    line=dict(color='purple', width=2),
                    opacity=0.8
                ), row=2, col=1)

            # T√≠ch h·ª£p Chaikin Volatility
            if 'Chaikin Volatility' in selected_indicators:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: Chaikin Volatility)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† CV
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω ƒë∆∞·ªùng Chaikin Volatility ·ªü h√†ng th·ª© 2
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['chaikin_volatility'],
                    mode='lines',
                    name='Chaikin Volatility',
                    line=dict(color='orange', width=2),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu bi·∫øn ƒë·ªông tƒÉng (High CV)
                high_cv = df['chaikin_volatility'] > df['chaikin_volatility'].rolling(window=20).mean()
                fig.add_trace(go.Scatter(
                    x=df['Date'][high_cv],
                    y=df['chaikin_volatility'][high_cv],
                    mode='markers',
                    name='High CV (Potential Breakout)',
                    marker=dict(color='orange', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu bi·∫øn ƒë·ªông gi·∫£m (Low CV)
                low_cv = df['chaikin_volatility'] < df['chaikin_volatility'].rolling(window=20).mean()
                fig.add_trace(go.Scatter(
                    x=df['Date'][low_cv],
                    y=df['chaikin_volatility'][low_cv],
                    mode='markers',
                    name='Low CV (Potential Accumulation)',
                    marker=dict(color='blue', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)

            # T√≠ch h·ª£p OBV
            if 'OB' in selected_indicators:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: OBV)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† OBV
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω ƒë∆∞·ªùng OBV ·ªü h√†ng th·ª© hai
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['obv'],
                    mode='lines',
                    name='OBV',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu ph√¢n k·ª≥ tƒÉng (Bullish Divergence)
                bullish_divergence = (
                        (df['close'] < df['close'].shift(1)) & (df['obv'] > df['obv'].shift(1))
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][bullish_divergence],
                    y=df['obv'][bullish_divergence],
                    mode='markers',
                    name='Bullish Divergence',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu ph√¢n k·ª≥ gi·∫£m (Bearish Divergence)
                bearish_divergence = (
                        (df['close'] > df['close'].shift(1)) & (df['obv'] < df['obv'].shift(1))
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][bearish_divergence],
                    y=df['obv'][bearish_divergence],
                    mode='markers',
                    name='Bearish Divergence',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu breakout (OBV tƒÉng c√πng gi√°)
                breakout_signal = (
                        (df['obv'] > df['obv'].shift(1)) & (df['close'] > df['close'].shift(1))
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][breakout_signal],
                    y=df['obv'][breakout_signal],
                    mode='markers',
                    name='Breakout Signal',
                    marker=dict(color='purple', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)

            # T√≠ch h·ª£p MFI
            if 'MFI' in selected_indicators:
                # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: MFI)
                fig = make_subplots(
                    rows=2, cols=1,
                    shared_xaxes=True,
                    vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                    row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† MFI
                )

                # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
                fig.add_trace(go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Candlestick'
                ), row=1, col=1)

                # V·∫Ω ƒë∆∞·ªùng MFI ·ªü h√†ng th·ª© hai
                fig.add_trace(go.Scatter(
                    x=df['Date'],
                    y=df['mfi'],
                    mode='lines',
                    name='MFI',
                    line=dict(color='purple', width=2),
                    opacity=0.8
                ), row=2, col=1)

                # V√πng Overbought (MFI > 80) ·ªü h√†ng th·ª© hai
                fig.add_shape(
                    type='rect',
                    xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                    yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=80,
                    y1=100,
                    fillcolor='red',
                    opacity=0.2,
                    layer='below',
                    line_width=0
                )

                # V√πng Oversold (MFI < 20) ·ªü h√†ng th·ª© hai
                fig.add_shape(
                    type='rect',
                    xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                    yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                    x0=df['Date'].min(),
                    x1=df['Date'].max(),
                    y0=0,
                    y1=20,
                    fillcolor='green',
                    opacity=0.2,
                    layer='below',
                    line_width=0
                )

                # T√≠n hi·ªáu ph√¢n k·ª≥ tƒÉng (Bullish Divergence)
                bullish_divergence = (
                        (df['close'] < df['close'].shift(1)) & (df['mfi'] > df['mfi'].shift(1))
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][bullish_divergence],
                    y=df['mfi'][bullish_divergence],
                    mode='markers',
                    name='Bullish Divergence',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ), row=2, col=1)

                # T√≠n hi·ªáu ph√¢n k·ª≥ gi·∫£m (Bearish Divergence)
                bearish_divergence = (
                        (df['close'] > df['close'].shift(1)) & (df['mfi'] < df['mfi'].shift(1))
                )
                fig.add_trace(go.Scatter(
                    x=df['Date'][bearish_divergence],
                    y=df['mfi'][bearish_divergence],
                    mode='markers',
                    name='Bearish Divergence',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ), row=2, col=1)

                # S·ª± v∆∞·ª£t qua ng∆∞·ª°ng 50
                cross_up_50 = (df['mfi'] > 50) & (df['mfi'].shift(1) <= 50)
                cross_down_50 = (df['mfi'] < 50) & (df['mfi'].shift(1) >= 50)

                fig.add_trace(go.Scatter(
                    x=df['Date'][cross_up_50],
                    y=df['mfi'][cross_up_50],
                    mode='markers',
                    name='MFI Cross Up 50',
                    marker=dict(color='blue', size=10, symbol='circle'),
                    opacity=0.8
                ), row=2, col=1)
        # C·∫≠p nh·∫≠t layout
        title_text = f"Bi·ªÉu ƒë·ªì {company} - "
        if selected_indicator_combination:
            title_text += selected_indicator_combination
        elif selected_indicators:
            title_text += ", ".join(selected_indicators)
        else:
            title_text += "Price"
        fig.update_layout(
            xaxis_rangeslider_visible=False,
            title=title_text,
            xaxis_title="Date",
            yaxis_title="Price / Indicators",
            template='plotly_dark',
            plot_bgcolor='rgb(0,0,0)',
            showlegend=True
        )
        return fig


    # Ph√¢n t√≠ch k·ªπ thu·∫≠t v·ªõi MA
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSV tr√™n backend
    FILE_PATH1 = "E:/GOI1/MSSV_CHAN_GOI1_GROUP1/MSSV_CHAN_GOI1_GROUP1/Data/Processed_Vietnam_Price.xlsx - Processed_Sheet2.csv"


    # H√†m ƒë·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu
    def load_data_TA():
        df = pd.read_csv(FILE_PATH1, dtype=str, low_memory=False, encoding="utf-8")
        df_long = df.melt(id_vars=["Name", "Code"], var_name="Date", value_name="Close_Price")
        invalid_dates = ["RIC", "Start Date", "Exchange", "Sector", "Activity"]
        df_long = df_long[~df_long["Date"].isin(invalid_dates)]
        df_long["Date"] = df_long["Date"].astype(str).str.split().str[0]
        df_long["Date"] = pd.to_datetime(df_long["Date"], format="%Y-%m-%d", errors="coerce")
        df_long["Close_Price"] = pd.to_numeric(df_long["Close_Price"], errors="coerce")
        df_long = df_long.dropna(subset=["Date", "Close_Price"])
        df_long = df_long.sort_values(by=["Code", "Date"])
        return df_long


    # H√†m t√≠nh MA
    def calculate_moving_averages(df_long, ma_periods):
        for ma in ma_periods:
            df_long[f"MA{ma}"] = df_long.groupby("Code")["Close_Price"].transform(
                lambda x: x.rolling(window=ma, min_periods=1).mean())
        return df_long


    # H√†m t√≠nh s·ªë l∆∞·ª£ng c·ªï phi·∫øu tr√™n MA
    def count_stocks_above_ma(df_long, ma_periods):
        above_ma_counts = df_long.copy()
        for ma in ma_periods:
            above_ma_counts[f"Above_MA{ma}"] = above_ma_counts["Close_Price"] > above_ma_counts[f"MA{ma}"]
        return above_ma_counts.groupby("Date")[[f"Above_MA{ma}" for ma in ma_periods]].sum()


    # H√†m t√≠nh s·ªë l∆∞·ª£ng MA ƒëang tƒÉng
    def count_increasing_ma(df_long, ma_periods):
        df_ma_increase = df_long.copy()
        for ma in ma_periods:
            df_ma_increase[f"Increase_MA{ma}"] = df_ma_increase[f"MA{ma}"].diff() > 0
        return df_ma_increase.groupby("Date")[[f"Increase_MA{ma}" for ma in ma_periods]].sum()


    # üìå G·ªçi h√†m v·∫Ω bi·ªÉu ƒë·ªì
    df_price, df_volume, date_columns = load_data()
    if subpage == "T·ªïng quan":
        st.markdown("<h2>üìä T·ªïng quan cho c√°c m√£</h2>", unsafe_allow_html=True)
        # üìå Ch·ªçn ng√†y t·ª´ danh s√°ch
        selected_date = select_date(date_columns)
        # üìå T·∫°o b·∫£ng th·ªëng k√™
        df_summary = create_summary_table(df_price, df_volume, selected_date)
        # Hi·ªÉn th·ªã b·∫£ng c√≥ m√†u s·∫Øc
        display_colored_table(df_summary)
        plot_treemap_ma200(df_price, selected_date)

    elif subpage == "So s√°nh c·ªï phi·∫øu":
        if df_price is None or df_volume is None:
            st.stop()
        # ‚úÖ Chuy·ªÉn ƒë·ªïi `date_columns` th√†nh `datetime`
        date_columns_dt = pd.to_datetime(date_columns, format="%Y-%m-%d", errors="coerce").dropna().sort_values()

        # ‚úÖ L·∫•y `selected_date` t·ª´ `select_date()`
        selected_date = select_date(date_columns_dt)
        # ‚úÖ Ch·ªçn m√£ c·ªï phi·∫øu
        tickers = st.multiselect("Ch·ªçn c√°c m√£ c·ªï phi·∫øu ƒë·ªÉ so s√°nh", df_price["Code"].unique(), default=["VIC", "HPG"])

        # ‚úÖ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ m√£ n√†o ƒë∆∞·ª£c ch·ªçn
        if not tickers:
            st.warning("‚ö† Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√£ c·ªï phi·∫øu!")
            st.stop()

        # ‚úÖ Ch·ªçn kho·∫£ng th·ªùi gian
        time_range = st.selectbox("Ch·ªçn kho·∫£ng th·ªùi gian",
                                  ["1 tu·∫ßn", "1 th√°ng", "3 th√°ng", "6 th√°ng", "1 nƒÉm", "2 nƒÉm", "3 nƒÉm", "To√†n b·ªô"])
        # üîπ N·∫øu ng√†y ƒë∆∞·ª£c ch·ªçn l√† ng√†y ƒë·∫ßu ti√™n, c·∫£nh b√°o v√† d·ª´ng l·∫°i
        if selected_date == date_columns_dt.min():
            st.warning("‚ö† Ng√†y ƒë·∫ßu ti√™n c·ªßa b·ªô d·ªØ li·ªáu kh√¥ng th·ªÉ ch·ªçn m·ªëc th·ªùi gian tr∆∞·ªõc ƒë√≥.")
            st.stop()

        # ‚úÖ X√°c ƒë·ªãnh ng√†y ƒë·∫ßu k·ª≥ theo kho·∫£ng th·ªùi gian
        time_ranges = {
            "1 tu·∫ßn": selected_date - pd.DateOffset(weeks=1),
            "1 th√°ng": selected_date - pd.DateOffset(months=1),
            "3 th√°ng": selected_date - pd.DateOffset(months=3),
            "6 th√°ng": selected_date - pd.DateOffset(months=6),
            "1 nƒÉm": selected_date - pd.DateOffset(years=1),
            "2 nƒÉm": selected_date - pd.DateOffset(years=2),
            "3 nƒÉm": selected_date - pd.DateOffset(years=3),
            "To√†n b·ªô": date_columns_dt.min(),
        }
        start_date = time_ranges.get(time_range, date_columns_dt.min())

        # üîπ Ki·ªÉm tra n·∫øu `start_date` nh·ªè h∆°n ng√†y nh·ªè nh·∫•t trong d·ªØ li·ªáu
        if start_date < date_columns_dt.min():
            st.warning(f"‚ö† Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh {time_range}! ƒêang ch·ªçn ng√†y s·ªõm nh·∫•t c√≥ th·ªÉ.")
            start_date = date_columns_dt.min()

        # ‚úÖ V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng gi√° theo m·ªëc th·ªùi gian ƒë√£ ch·ªçn
        plot_price_trend(df_price, tickers, selected_date, start_date, date_columns_dt)

        # ‚úÖ X√°c ƒë·ªãnh ng√†y tr∆∞·ªõc ƒë√≥
        previous_date = date_columns_dt[date_columns_dt < selected_date].max()

        # üîπ Ki·ªÉm tra n·∫øu `previous_date` h·ª£p l·ªá
        if pd.isna(previous_date):
            st.warning("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu ng√†y tr∆∞·ªõc ƒë√≥ ƒë·ªÉ t√≠nh to√°n thay ƒë·ªïi gi√°.")
        elif previous_date in df_price.columns:
            plot_price_change(df_price, tickers, selected_date, previous_date)

        # ‚úÖ Hi·ªÉn th·ªã % thay ƒë·ªïi gi√° t·ª´ ƒë·∫ßu k·ª≥
        if start_date in df_price.columns:
            plot_price_change_period(df_price, tickers, selected_date, start_date)
    elif subpage == "ƒê·ªânh c·ªßa CP":
        df_price, df_volume = load_data2(file_price, file_volume)
        selected_date = select_date1(df_price)
        # C·ªï phi·∫øu ƒë·∫°t ƒë·ªânh, ti·ªám c·∫≠n ƒë·ªânh
        df_new_highs, df_near_highs = calculate_highs(df_price, df_volume, selected_date)
        display_styled_table(df_new_highs, "üìä Danh s√°ch CP t·∫°o ƒë·ªânh m·ªõi 52T", show_percent_col=False)
        display_styled_table(df_near_highs, "üìä Danh s√°ch CP ti·ªám c·∫≠n ƒë·ªânh 52T (<10%)", show_percent_col=True)
        display_sector_chart(df_near_highs)
    elif subpage == "Chi ti·∫øt c·ªï phi·∫øu":
        st.title("üìà Ph√¢n t√≠ch Chi Ti·∫øt M√£ C·ªï Phi·∫øu")
        if df_price is None or df_volume is None:
            st.stop()

        # Chuy·ªÉn ƒë·ªïi date_columns sang datetime
        date_columns_dt = pd.to_datetime(date_columns, format="%Y-%m-%d", errors="coerce").dropna().sort_values()
        # L·∫•y ng√†y k·∫øt th√∫c
        selected_date = select_date(date_columns_dt)
        # Hi·ªÉn th·ªã b·∫£ng snapshot ch·ªâ b√°o
        df_snapshot = calculate_indicators_snapshot(df_price, df_volume, selected_date)
        if df_snapshot is not None:
            st.write("üîç **B·∫£ng ch·ªâ b√°o k·ªπ thu·∫≠t (snapshot)**")
            st.dataframe(df_snapshot)
            # Dropdown ch·ªçn m√£ c·ªï phi·∫øu
            stock_list = df_snapshot['Code'].unique().tolist()

            selected_stock = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", stock_list)
            if not selected_stock:
                st.warning("‚ö† Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√£ c·ªï phi·∫øu!")
                st.stop()
            # Dropdown ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t
            indicators = [
                "SMA", "EMA", "MACD", "PSAR", "RSI", "Stochastic Oscillator",
                "CCI", "Bollinger Bands", "Chaikin Volatility", "OB", "MFI", "ATR"
            ]
            selected_indicators = st.multiselect("Ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t", indicators)
            # N·∫øu ch·ªçn MA th√¨ cho ph√©p ch·ªçn c√°c ƒë∆∞·ªùng MA c·ª• th·ªÉ
            selected_ma = []
            if "SMA" in selected_indicators or "EMA" in selected_indicators or "MA" in selected_indicators:
                ma_options = ["sma_20", "sma_50", "sma_100", "sma_200", "ema_20", "ema_50", "ema_100", "ema_200"]
                selected_ma = st.multiselect("Ch·ªçn ƒë∆∞·ªùng trung b√¨nh ƒë·ªông", ma_options)
            selected_rsi = None
            if "RSI" in selected_indicators:
                rsi_options = ["rsi_9", "rsi_14", "rsi_21"]
                selected_rsi = st.selectbox("Ch·ªçn RSI", rsi_options)
            selected_cci = None
            if "CCI" in selected_indicators:
                cci_options = ["cci_10", "cci_20", "cci_30"]
                selected_cci = st.selectbox("Ch·ªçn CCI", cci_options)
            # Dropdown ch·ªçn t·ªï h·ª£p ch·ªâ b√°o
            indicator_combinations = [
                "PSAR + SMA", "PSAR + EMA", "PSAR + RSI", "PSAR + MACD",
                "Bollinger Bands + RSI", "Bollinger Bands + MACD", "Bollinger Bands + Stochastic Oscillator",
                "RSI + MACD"
            ]
            selected_combination = st.selectbox("Ch·ªçn t·ªï h·ª£p ch·ªâ b√°o", [None] + indicator_combinations)
            # Ch·ªçn kho·∫£ng th·ªùi gian (t√≠nh theo chu·ªói th·ªùi gian t·ª´ d·ªØ li·ªáu Excel)
            time_range = select_time_period1()
            # X√°c ƒë·ªãnh ng√†y b·∫Øt ƒë·∫ßu d·ª±a tr√™n kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn
            time_ranges = {
                "1 tu·∫ßn": selected_date - pd.DateOffset(weeks=1),
                "1 th√°ng": selected_date - pd.DateOffset(months=1),
                "3 th√°ng": selected_date - pd.DateOffset(months=3),
                "6 th√°ng": selected_date - pd.DateOffset(months=6),
                "1 nƒÉm": selected_date - pd.DateOffset(years=1),
                "2 nƒÉm": selected_date - pd.DateOffset(years=2),
                "3 nƒÉm": selected_date - pd.DateOffset(years=3),
                "To√†n b·ªô": date_columns_dt.min(),
            }
            start_date = time_ranges.get(time_range, date_columns_dt.min())
            if start_date < date_columns_dt.min():
                st.warning(f"‚ö† Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh {time_range}! ƒêang ch·ªçn ng√†y s·ªõm nh·∫•t c√≥ th·ªÉ.")
                start_date = date_columns_dt.min()

            # L·∫•y chu·ªói th·ªùi gian cho m√£ ƒë∆∞·ª£c ch·ªçn (s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ file Excel)
            df_ts = get_stock_timeseries(selected_stock, df_price, df_volume, date_columns_dt, start_date,
                                         selected_date)
            if df_ts is None or df_ts.empty:
                st.error("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu th·ªùi gian cho m√£ ƒë∆∞·ª£c ch·ªçn.")
                st.stop()
            # T√≠nh to√°n c√°c ch·ªâ b√°o tr√™n chu·ªói th·ªùi gian
            df_ts = compute_timeseries_indicators(df_ts)
            # X√¢y d·ª±ng bi·ªÉu ƒë·ªì d·ª±a tr√™n c√°c l·ª±a ch·ªçn
            fig = update_chart(df_ts, selected_stock, selected_indicators, selected_ma, selected_rsi, selected_cci,
                               selected_combination)
            st.plotly_chart(fig, use_container_width=True)
    elif subpage == "Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v·ªõi MA":
        st.title("Ph√¢n T√≠ch Xu H∆∞·ªõng Th·ªã Tr∆∞·ªùng v·ªõi ch·ªâ s·ªë Moving Average (MA)")

        df_long = load_data_TA()
        ma_periods = [10, 20, 50, 100, 200]
        df_long = calculate_moving_averages(df_long, ma_periods)
        df_above_ma_final = count_stocks_above_ma(df_long, ma_periods)
        df_ma_increase_final = count_increasing_ma(df_long, ma_periods)

        # Ch·ªçn kho·∫£ng th·ªùi gian
        min_date = df_long["Date"].min()
        max_date = df_long["Date"].max()
        start_date, end_date = st.date_input("Ch·ªçn kho·∫£ng th·ªùi gian", [min_date, max_date], min_value=min_date,
                                             max_value=max_date)

        df_above_ma_final = df_above_ma_final.loc[start_date:end_date]
        df_ma_increase_final = df_ma_increase_final.loc[start_date:end_date]

        # T·∫°o layout 2x2 v·ªõi Plotly Subplots
        fig = make_subplots(rows=2, cols=2, subplot_titles=[
            "SLCP c√≥ gi√° n·∫±m tr√™n c√°c MA t∆∞∆°ng ·ª©ng (D)",
            "SLCP c√≥ MA t∆∞∆°ng ·ª©ng ƒëang tƒÉng (D)",
            "SLCP trend template ng√†y (D) v√† tu·∫ßn (W)",
            "SLCP trend template v√† bi·∫øn thi√™n (D)"
        ], specs=[[{}, {}], [{"secondary_y": False}, {"secondary_y": True}]])

        # Bi·ªÉu ƒë·ªì 1: S·ªë l∆∞·ª£ng c·ªï phi·∫øu c√≥ gi√° tr√™n MA
        for ma in ma_periods:
            fig.add_trace(go.Scatter(x=df_above_ma_final.index, y=df_above_ma_final[f"Above_MA{ma}"], mode='lines',
                                     name=f"Above MA{ma}"), row=1, col=1)
        fig.update_xaxes(title_text="Date", row=1, col=1)
        fig.update_yaxes(title_text="S·ªë l∆∞·ª£ng CP", row=1, col=1)
        fig.update_layout(showlegend=True)

        # Bi·ªÉu ƒë·ªì 2: S·ªë l∆∞·ª£ng c·ªï phi·∫øu c√≥ MA tƒÉng
        for ma in ma_periods:
            fig.add_trace(
                go.Scatter(x=df_ma_increase_final.index, y=df_ma_increase_final[f"Increase_MA{ma}"], mode='lines',
                           name=f"Increase MA{ma}"), row=1, col=2)
        fig.update_xaxes(title_text="Date", row=1, col=2)
        fig.update_yaxes(title_text="S·ªë l∆∞·ª£ng CP", row=1, col=2)

        # Bi·ªÉu ƒë·ªì 3: Xu h∆∞·ªõng ng√†y v√† tu·∫ßn
        df_trend = df_above_ma_final.mean(axis=1).rolling(window=10).mean()
        df_trend_weekly = df_above_ma_final.mean(axis=1).rolling(window=50).mean()
        fig.add_trace(
            go.Scatter(x=df_trend.index, y=df_trend, mode='lines', name="TrendTP_D", line=dict(color='orange')), row=2,
            col=1)
        fig.add_trace(go.Scatter(x=df_trend_weekly.index, y=df_trend_weekly, mode='lines', name="TrendTP_W",
                                 line=dict(color='blue')), row=2, col=1)
        fig.update_xaxes(title_text="Date", row=2, col=1)
        fig.update_yaxes(title_text="Trend", row=2, col=1)

        # Bi·ªÉu ƒë·ªì 4: Xu h∆∞·ªõng v√† bi·∫øn thi√™n v·ªõi 2 tr·ª•c tung
        trend_diff = df_trend.diff().fillna(0)
        fig.add_trace(go.Bar(x=trend_diff.index, y=trend_diff, name="Bi·∫øn thi√™n",
                             marker_color=['red' if x < 0 else 'green' for x in trend_diff]), row=2, col=2,
                      secondary_y=False)
        fig.add_trace(
            go.Scatter(x=df_trend.index, y=df_trend, mode='lines', name="TrendTP_D", line=dict(color='orange')), row=2,
            col=2, secondary_y=True)
        fig.update_xaxes(title_text="Date", row=2, col=2)
        fig.update_yaxes(title_text="Bi·∫øn thi√™n", row=2, col=2, secondary_y=False)
        fig.update_yaxes(title_text="Trend", row=2, col=2, secondary_y=True)

        st.plotly_chart(fig)
