import pandas as pd
import streamlit as st
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np
from plotly.subplots import make_subplots
import plotly.express as px
import seaborn as sns
import matplotlib.colors as mcolors
import re
from streamlit_option_menu import option_menu
from ta.trend import SMAIndicator, EMAIndicator, MACD, PSARIndicator
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands
from fpdf import FPDF
from io import BytesIO
import tempfile
import plotly.io as pio
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime

from pdf import generate_pdf
from readdata import process_financial_data
from drawchart import draw_chart

st.set_page_config(layout="wide")  # Giao di·ªán to√†n m√†n h√¨nh

# **Ch√®n CSS t√πy ch·ªânh ƒë·ªÉ √°p d·ª•ng font "Poppins" cho to√†n b·ªô trang**
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
    html, body, [class*="st-"] {
        font-family: 'Poppins', sans-serif;
    }
    h1 {
        font-size: 36px !important;
        font-weight: 700 !important;
        text-align: center;
        color: #111111;
    }

    h2 {
        font-size: 30px !important;
        font-weight: 600 !important;
        text-align: center;
        color: #333333;
    }

    h3 {
        font-size: 22px !important;
        font-weight: 600 !important;
        text-align: center;
        color: #333333;
    }

    .subheader-custom {
        font-size: 18px !important;
        font-weight: 600 !important;
        text-align: center;
        margin-bottom: 5px;
    }

    p, label, div {
        font-weight: 400;
        font-size: 14px;
        color: #444444;
    }

    .stSidebar {
        background-color: #F8F9FA;
    }

    .stButton>button {
        font-family: 'Poppins', sans-serif;
        font-size: 14px;
        font-weight: 600;
        border-radius: 8px;
    }
    </style>
    """,
    unsafe_allow_html=True)

# === H√†m load d·ªØ li·ªáu ===
def load_data_by_path(file_path):
    df = pd.read_csv(file_path)
    df['ng√†y'] = pd.to_datetime(df['ng√†y'], format='%Y-%m-%d').dt.date
    return df


# Sidebar v·ªõi menu t√πy ch·ªânh
with st.sidebar:
    st.markdown(
        """
        <style>
            [data-testid="stSidebar"] {
                background-color: Black !important; 
                padding: 20px;
                border-right: 1px solid #8A9BA8;
                border-radius: 2px;
                box-shadow: none !important;
            }
        </style>
        """, unsafe_allow_html=True)
    st.markdown("<h2 style='text-align: center; font-weight: bold; color:yellow ;'>Trang ch·ªß</h2>",
                unsafe_allow_html=True)
    selected = option_menu(
        menu_title=None,
        options=["0. PH√ÇN T√çCH T·ªîNG H·ª¢P", "1. T·ªïng quan th·ªã tr∆∞·ªùng","2. T·ªïng quan theo ng√†nh", "3. Ph√¢n t√≠ch k·ªπ thu·∫≠t", "4. B√°o c√°o t√†i ch√≠nh"],
        icons=["stars", "bar-chart", "database", "clipboard-data", "book"],
        default_index=0,
        styles={"container": {"background-color": "black", "border-radius": "0px", "box-shadow": "none",
                              "padding": "0px"},
                "nav-link": {"font-size": "16px", "font-weight": "normal", "color": "white", "text-align": "left",
                             "padding": "10px"},
                "nav-link-selected": {"background-color": "#B0BEC5", "font-weight": "bold", "color": "Black",
                                      "border-radius": "5px"}})

@st.cache_data
def load_and_process_data():
    # Load the Excel file and process the data
    EXCEL_PATH = "./Data/Cleaned_Vietnam_Marketcap.xlsx"
    xls = pd.ExcelFile(EXCEL_PATH, engine="openpyxl")
    df1 = xls.parse("Sheet1").fillna({"Sector": "Unknown Sector"})
    df1["Sector"] = df1["Sector"].replace("-", "Uncategorized")

    df2 = xls.parse("Sheet2")
    df2.columns = [str(col).replace(" 00:00:00", "") for col in df2.columns]
    df2["Name"] = df2["Name"].str.replace(" - MARKET VALUE", "", regex=False)
    df2["Code"] = df2["Code"].str.replace("(MV)", "", regex=False)

    merged_df = df2.merge(df1[["Name", "Sector"]], on="Name", how="left")
    date_columns = merged_df.columns[2:-1]
    merged_df[date_columns] = merged_df[date_columns].apply(pd.to_numeric, errors='coerce')

    return df1, merged_df, date_columns

# Load data globally
DF1, MERGED_DF, DATE_COLUMNS = load_and_process_data()

# Helper function to plot stock price
def plot_stock_price(merged_df, stock_code):
    """V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng gi√° c·ªï phi·∫øu theo m√£ c·ªï phi·∫øu."""
    stock_data = merged_df[merged_df['Code'] == stock_code]
    if stock_data.empty:
        st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu c√≥ m√£ {stock_code}")
        return None

    stock_data = stock_data.iloc[:, 2:-1]  # Exclude 'Name', 'Code', 'Sector' columns
    stock_data = stock_data.T  # Transpose so that dates are on the x-axis
    stock_data.index = pd.to_datetime(stock_data.index)  # Convert index to datetime

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(stock_data, label=f"{stock_code}")
    ax.set_title(f"Gi√° tr·ªã v·ªën ho√° th·ªã tr∆∞·ªùng c·ªßa {stock_code} theo th·ªùi gian")
    ax.set_xlabel("Th·ªùi gian")
    ax.set_ylabel("Gi√° tr·ªã v·ªën ho√° th·ªã tr∆∞·ªùng")
    ax.legend()
    ax.grid(True)
    return fig

# Plot sector treemap
def plot_sector_treemap(selected_date):
    sector_marketcap = MERGED_DF.groupby('Sector')[selected_date].sum().reset_index()
    fig = px.treemap(sector_marketcap, path=['Sector'], values=selected_date,
                        title=f'V·ªën h√≥a th·ªã tr∆∞·ªùng theo ng√†nh ({selected_date})',
                        color=selected_date, color_continuous_scale='blues', height=600)
    return fig

# Plot bubble chart
def plot_bubble_chart(selected_date):
    bubble_data = MERGED_DF.groupby(['Sector', 'Code'])[selected_date].sum().reset_index()
    bubble_data = bubble_data[bubble_data[selected_date] > 0]
    if bubble_data.empty:
        st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá cho ng√†y {selected_date}!")
        return None

    fig = px.scatter(
        bubble_data, x='Sector', y=selected_date, size=selected_date,
        hover_name='Code', title=f'Bubble Chart ({selected_date})',
        size_max=50, color='Sector', width=1000, height=600
    )
    return fig

# Generate PDF report with stock price plot
def generate_pdf_by_stock_code(stock_code):
    progress_bar = st.progress(0)  # Initialize progress bar
    with st.spinner("üìÑ ƒêang t·∫°o b√°o c√°o PDF, vui l√≤ng ƒë·ª£i..."):
        # Define SECTOR_MARKETCAP_T inside the function or globally
        SECTOR_MARKETCAP_T = MERGED_DF.groupby("Sector")[DATE_COLUMNS].sum().T
        SECTOR_MARKETCAP_T.index = pd.to_datetime(SECTOR_MARKETCAP_T.index)

        # Initialize PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", r"./DejaVuSans.ttf", uni=True)
        pdf.set_font("DejaVu", size=12)

        pdf.cell(200, 10, "B√°o c√°o th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam", ln=True, align='C')
        pdf.ln(10)

        # Calculate top sectors
        top_sectors = SECTOR_MARKETCAP_T.sum().nlargest(5)
        for sector, value in top_sectors.items():
            pdf.cell(200, 10, f"{sector}: {value:,.0f} VNƒê", ln=True)

        pdf.ln(10)

    for i, plot_func in enumerate([plot_sector_treemap, plot_bubble_chart]):
        progress_bar.progress((i + 1) / 4)  # Update progress
        if plot_func in [plot_sector_treemap, plot_bubble_chart]:
            fig = plot_func(DATE_COLUMNS[-1])
        else:
            fig = plot_func()

        if fig is None:
            continue

        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_img:
            if hasattr(fig, "write_image"):
                fig.write_image(temp_img.name, format="png", width=800, height=600, engine="kaleido")
            else:
                fig.savefig(temp_img.name, format="png", dpi=100)

        pdf.image(temp_img.name, x=10, w=180)
        pdf.ln(5)

    # Generate the stock price plot for the given stock code
    fig_stock = plot_stock_price(MERGED_DF, stock_code)
    if fig_stock:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_img_stock:
            fig_stock.savefig(temp_img_stock.name, format="png", dpi=100)

        pdf.ln(10)  # Adding some space before the image
        pdf.image(temp_img_stock.name, x=10, w=180)  # Adding the stock price plot image

    # Save the PDF to a file
    pdf_name = "Tong_quan_thi_truong_{stock_code}.pdf"
    pdf_path = "{pdf_name}.pdf"
    pdf.output(pdf_path, "F")

    with open(pdf_path, "rb") as file:
        st.success(f"‚úÖ PDF ƒë√£ ƒë∆∞·ª£c t·∫°o: {pdf_path}")
        st.download_button("T·ªïng quan th·ªã tr∆∞·ªùng", data=file, file_name=pdf_path, mime="application/pdf")

def load_data_by_file(files):
    dfs = {}
    for path in files:
        df = pd.read_csv(path, encoding='utf-8')
        df.columns = df.columns.str.strip()  # X√≥a kho·∫£ng tr·∫Øng
        df["Date"] = pd.to_datetime(df["Date"], format="%d/%m/%Y", errors="coerce")  # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng Date
        dfs[path] = df

    # G·ªôp t·∫•t c·∫£ d·ªØ li·ªáu v√†o m·ªôt dataframe chung
    data = pd.concat(dfs.values(), ignore_index=True)

    # L·ªçc b·ªè ng√†y kh√¥ng c√≥ d·ªØ li·ªáu
    data = data.dropna(subset=["Date", "Net.F_Val", "Close"])  # Gi·ªØ l·∫°i c√°c ng√†y c√≥ d·ªØ li·ªáu h·ª£p l·ªá

    # S·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu theo th·ªùi gian
    data = data.sort_values(by=["Date"]).reset_index(drop=True)

    return data


# üìå Load d·ªØ li·ªáu t·ª´ file Excel
@st.cache_data
def load_data_tab3():
    PRICE_DATA_PATH = r'./Data/Processed_Vietnam_Price.xlsx'
    VOLUME_DATA_PATH = r'./Data/Processed_Vietnam_volume_2.xlsx'

    file_price = "./Data/Thong_ke_gia_phan_loai_NDT/Processed_Vietnam_Price_Long.csv.gz"
    file_volume = "./Data/Thong_ke_gia_phan_loai_NDT/Processed_Vietnam_Volume_Long.csv.gz"

    # Ph√¢n t√≠ch k·ªπ thu·∫≠t v·ªõi MA
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSV tr√™n backend
    FILE_PATH1 = "./Data/Processed_Vietnam_Price.xlsx - Processed_Sheet2.csv"

    # Load d·ªØ li·ªáu t·ª´ file Excel
    df_price = pd.read_excel(PRICE_DATA_PATH)
    df_volume = pd.read_excel(VOLUME_DATA_PATH)

    # Ch·ªçn ƒë√∫ng c·ªôt ng√†y t·ª´ H -> BHN (c·ªôt ng√†y)
    date_columns = df_price.columns[7:]  # C·ªôt H l√† c·ªôt th·ª© 7 (0-based index)

    return df_price, df_volume, date_columns


def select_date(date_columns):
    return st.selectbox("üìÖ Ch·ªçn ng√†y ƒë·ªÉ hi·ªÉn th·ªã", date_columns)


def select_time_period():
    """Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn kho·∫£ng th·ªùi gian"""
    return st.slider("‚è≥ Ch·ªçn s·ªë tu·∫ßn ph√¢n t√≠ch", min_value=4, max_value=104, value=52, step=2)


def select_time_period_tab3():
    """Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn kho·∫£ng th·ªùi gian"""
    return st.selectbox("‚è≥ Ch·ªçn kho·∫£ng th·ªùi gian", [
        "1 tu·∫ßn", "1 th√°ng", "3 th√°ng", "6 th√°ng", "1 nƒÉm", "2 nƒÉm", "3 nƒÉm", "To√†n b·ªô"
    ])


def load_data2(price_file, volume_file):
    """T·∫£i d·ªØ li·ªáu t·ª´ file CSV n√©n"""
    try:
        df_price = pd.read_csv(price_file, compression="gzip")
        df_volume = pd.read_csv(volume_file, compression="gzip")

        df_price['Date'] = pd.to_datetime(df_price['Date'], format='%Y%m%d')
        df_volume['Date'] = pd.to_datetime(df_volume['Date'], format='%Y%m%d')

        return df_price, df_volume
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return None, None


# PDF Export Functionality using Matplotlib
def export_pdf_combined(fig_plot, date):
    buf = BytesIO()
    with PdfPages(buf) as pdf:
        plt.figure(figsize=(8, 6))
        plt.text(0.5, 0.8, "Foreign Investor Trading Report", fontsize=14, ha='center')
        plt.text(0.5, 0.6, f"Date Extracted: {date.strftime('%d/%m/%Y')}", fontsize=12, ha='center')
        plt.axis("off")
        pdf.savefig()
        plt.close()

        fig_bytes = pio.to_image(fig_plot, format="png")
        img = plt.imread(BytesIO(fig_bytes))
        plt.figure(figsize=(10, 6))
        plt.imshow(img)
        plt.axis("off")
        pdf.savefig()
        plt.close()
    buf.seek(0)
    return buf


def select_date1(df_price):
    available_dates = sorted(df_price['Date'].dropna().unique())
    return st.date_input("üìÖ Ch·ªçn ng√†y", value=available_dates[-1], min_value=available_dates[0],
                            max_value=available_dates[-1])


def create_summary_table(df_price, df_volume, selected_date):
    if selected_date not in df_price.columns or selected_date not in df_volume.columns:
        st.warning(f"‚ö† Ng√†y {selected_date} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
        return None

    # üìå Chuy·ªÉn c·ªôt ng√†y th√†nh ki·ªÉu s·ªë (float) ƒë·ªÉ tr√°nh l·ªói khi t√≠nh to√°n
    df_price[selected_date] = pd.to_numeric(df_price[selected_date], errors='coerce')
    df_volume[selected_date] = pd.to_numeric(df_volume[selected_date], errors='coerce')

    # L·∫•y ng√†y tr∆∞·ªõc ƒë√≥ ƒë·ªÉ t√≠nh % Change
    prev_day_index = df_price.columns.get_loc(selected_date) - 1
    if prev_day_index < 7:  # ƒê·∫£m b·∫£o kh√¥ng l·∫•y c·ªôt kh√¥ng h·ª£p l·ªá
        st.warning("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n % thay ƒë·ªïi.")
        return None

    prev_day = df_price.columns[prev_day_index]

    # üìå Chuy·ªÉn ƒë·ªïi ng√†y tr∆∞·ªõc ƒë√≥ th√†nh s·ªë
    df_price[prev_day] = pd.to_numeric(df_price[prev_day], errors='coerce')

    # T·∫°o b·∫£ng k·∫øt qu·∫£
    df_selected_price = df_price[['Code', 'Name', selected_date]].copy()
    df_selected_volume = df_volume[['Code', selected_date]].copy()

    # T√≠nh % thay ƒë·ªïi
    df_selected_price["% Change"] = ((df_price[selected_date] - df_price[prev_day]) / df_price[prev_day]) * 100

    # G·ªôp d·ªØ li·ªáu
    df_summary = df_selected_price.merge(df_selected_volume, on="Code", suffixes=("_Gi√°", "_Kh·ªëi l∆∞·ª£ng"))

    df_summary = df_summary.rename(columns={
        str(selected_date) + "_Gi√°": "Gi√° ƒë√≥ng c·ª≠a",
        str(selected_date) + "_Kh·ªëi l∆∞·ª£ng": "Kh·ªëi l∆∞·ª£ng giao d·ªãch"
    })
    # S·∫Øp x·∫øp theo % Change gi·∫£m d·∫ßn
    df_summary = df_summary.sort_values(by="% Change", ascending=False)

    return df_summary


# üìå Hi·ªÉn th·ªã b·∫£ng trong Streamlit v·ªõi m√†u s·∫Øc
def plot_price_trend(df_price, tickers, selected_date, start_date, date_columns):
    """
    V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a theo th·ªùi gian.
    """
    # ‚úÖ Chuy·ªÉn ƒë·ªïi `date_columns` th√†nh `datetime`
    date_columns_dt = pd.to_datetime(date_columns, format="%Y-%m-%d", errors="coerce").dropna().sort_values()

    # ‚úÖ Ki·ªÉm tra n·∫øu `selected_date` kh√¥ng c√≥ trong `date_columns_dt`, ch·ªçn ng√†y g·∫ßn nh·∫•t
    if selected_date not in date_columns_dt.values:
        st.warning(f"‚ö† Ng√†y {selected_date.date()} kh√¥ng c√≥ trong d·ªØ li·ªáu! ƒêang ch·ªçn ng√†y g·∫ßn nh·∫•t...")
        selected_date = date_columns_dt.max()  # Ch·ªçn ng√†y g·∫ßn nh·∫•t c√≥ trong d·ªØ li·ªáu

    # ‚úÖ L·ªçc d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
    selected_dates = date_columns_dt[(date_columns_dt >= start_date) & (date_columns_dt <= selected_date)]

    if selected_dates.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn!")
        return

    # ‚úÖ Ki·ªÉm tra n·∫øu t·∫•t c·∫£ c√°c ng√†y ƒë√£ ch·ªçn c√≥ trong `df_price`
    selected_dates = selected_dates.intersection(df_price.columns)

    if selected_dates.empty:
        st.warning("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu n√†o cho c√°c ng√†y ƒë√£ ch·ªçn!")
        return

    # ‚úÖ L·ªçc d·ªØ li·ªáu
    df_filtered = df_price[["Code", "Name"] + list(selected_dates)].copy()

    # ‚úÖ Ch·ªâ gi·ªØ l·∫°i c√°c m√£ c·ªï phi·∫øu ƒë∆∞·ª£c ch·ªçn
    df_filtered = df_filtered[df_filtered["Code"].isin(tickers)]

    if df_filtered.empty:
        st.warning("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi m√£ c·ªï phi·∫øu ƒë√£ ch·ªçn!")
        return

    # ‚úÖ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
    df_melted = df_filtered.melt(id_vars=["Code", "Name"], var_name="Date", value_name="Price")

    # ‚úÖ Chuy·ªÉn ƒë·ªïi ng√†y th√†nh datetime ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
    df_melted["Date"] = pd.to_datetime(df_melted["Date"], errors="coerce")

    # ‚úÖ V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a
    fig = px.line(df_melted, x="Date", y="Price", color="Code",
                    title=f"üìà Xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a",
                    labels={"Price": "Gi√° ƒë√≥ng c·ª≠a", "Date": "", "Code": "M√£ c·ªï phi·∫øu"})

    st.plotly_chart(fig, use_container_width=True)


def calculate_indicators_snapshot(df_price, df_volume, selected_date):
    """
    T√≠nh to√°n c√°c ch·ªâ b√°o (theo snapshot) cho c·ªï phi·∫øu d·ª±a tr√™n d·ªØ li·ªáu gi√° v√† kh·ªëi l∆∞·ª£ng.
    H√†m n√†y d√πng ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng ch·ªâ b√°o.
    """
    if selected_date not in df_price.columns or selected_date not in df_volume.columns:
        st.warning(f"‚ö† Ng√†y {selected_date} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu!")
        return None

    prev_day_index = df_price.columns.get_loc(selected_date) - 1
    if prev_day_index < 7:
        st.warning("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n ch·ªâ b√°o.")
        return None
    prev_day = df_price.columns[prev_day_index]

    df = pd.DataFrame()
    df['Code'] = df_price['Code']
    df['open'] = pd.to_numeric(df_price[prev_day], errors='coerce')
    df['close'] = pd.to_numeric(df_price[selected_date], errors='coerce')
    df['high'] = df_price.loc[:, prev_day:selected_date].max(axis=1)
    df['low'] = df_price.loc[:, prev_day:selected_date].min(axis=1)
    df['volume'] = pd.to_numeric(df_volume[selected_date], errors='coerce')
    df = df.dropna()

    # T√≠nh to√°n MA
    for period in [20, 50, 100, 200]:
        df[f'sma_{period}'] = SMAIndicator(close=df['close'], window=period).sma_indicator()
        df[f'ema_{period}'] = EMAIndicator(close=df['close'], window=period).ema_indicator()
    # MACD
    macd = MACD(close=df['close'], window_slow=26, window_fast=12, window_sign=9)
    df['macd_line'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    df['macd_histogram'] = macd.macd_diff()
    # PSAR
    psar = PSARIndicator(high=df['high'], low=df['low'], close=df['close'])
    df['psar'] = psar.psar()
    # RSI
    for period in [9, 14, 21]:
        df[f'rsi_{period}'] = RSIIndicator(close=df['close'], window=period).rsi()
    # CCI
    for period in [10, 20, 30]:
        df[f'cci_{period}'] = (df['close'] - df['close'].rolling(period).mean()) / (
                0.015 * df['close'].rolling(period).std())
    # Bollinger Bands
    bollinger = BollingerBands(close=df['close'], window=20, window_dev=2)
    df['bb_middle'] = bollinger.bollinger_mavg()
    df['bb_upper'] = bollinger.bollinger_hband()
    df['bb_lower'] = bollinger.bollinger_lband()
    # OBV
    df['obv'] = (np.sign(df['close'].diff()) * df['volume']).fillna(0).cumsum()
    # MFI
    df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3
    df['raw_money_flow'] = df['typical_price'] * df['volume']
    df['money_flow_ratio'] = df['raw_money_flow'].rolling(14).sum() / df['raw_money_flow'].rolling(14).sum().shift(
        1)
    df['mfi'] = 100 - (100 / (1 + df['money_flow_ratio']))
    return df


def get_stock_timeseries(stock, df_price, df_volume, date_columns_dt, start_date, end_date):
    """
    Tr√≠ch xu·∫•t chu·ªói th·ªùi gian cho m√£ c·ªï phi·∫øu ƒë√£ ch·ªçn.
    Ch·ªâ l·∫•y c√°c ng√†y trong kho·∫£ng [start_date, end_date].
    Gi·∫£ s·ª≠ c√°c c·ªôt c·ªßa df_price, df_volume c√≥ t√™n l√† chu·ªói 'YYYY-MM-DD'.
    """
    # L·ªçc c√°c ng√†y h·ª£p l·ªá
    valid_dates = [d for d in date_columns_dt if start_date <= d <= end_date]

    stock_row = df_price[df_price['Code'] == stock]
    volume_row = df_volume[df_volume['Code'] == stock]
    if stock_row.empty or volume_row.empty:
        st.error("‚ö† Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu n√†y!")
        return None

    prices = []
    volumes = []
    for date_str in valid_dates:
        price_val = pd.to_numeric(stock_row[date_str].values[0], errors='coerce')
        volume_val = pd.to_numeric(volume_row[date_str].values[0], errors='coerce')
        prices.append(price_val)
        volumes.append(volume_val)
    df_ts = pd.DataFrame({
        'Date': valid_dates,
        'close': prices,
        'volume': volumes
    })

    # X√°c ƒë·ªãnh gi√° m·ªü: l·∫•y gi√° ƒë√≥ng c·ªßa ng√†y tr∆∞·ªõc ƒë√≥ (v·ªõi ng√†y ƒë·∫ßu ti√™n th√¨ open = close)
    df_ts['open'] = df_ts['close'].shift(1)
    df_ts.loc[df_ts['open'].isna(), 'open'] = df_ts['close']
    # Gi·∫£ ƒë·ªãnh high = max(open, close), low = min(open, close)
    df_ts['high'] = df_ts[['open', 'close']].max(axis=1)
    df_ts['low'] = df_ts[['open', 'close']].min(axis=1)
    return df_ts


def compute_timeseries_indicators(df):
    n = len(df)
    # T√≠nh SMA & EMA: n·∫øu kh√¥ng ƒë·ªß d·ªØ li·ªáu cho period, g√°n NaN
    for period in [20, 50, 100, 200]:
        if n >= period:
            df[f'sma_{period}'] = SMAIndicator(close=df['close'], window=period).sma_indicator()
            df[f'ema_{period}'] = EMAIndicator(close=df['close'], window=period).ema_indicator()
        else:
            df[f'sma_{period}'] = np.nan
            df[f'ema_{period}'] = np.nan

    macd = MACD(close=df['close'], window_slow=26, window_fast=12, window_sign=9)
    df['macd_line'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    df['macd_histogram'] = macd.macd_diff()

    psar = PSARIndicator(high=df['high'], low=df['low'], close=df['close'])
    df['psar'] = psar.psar()

    for period in [9, 14, 21]:
        if n >= period:
            df[f'rsi_{period}'] = RSIIndicator(close=df['close'], window=period).rsi()
        else:
            df[f'rsi_{period}'] = np.nan

    for period in [10, 20, 30]:
        if n >= period:
            df[f'cci_{period}'] = (df['close'] - df['close'].rolling(period).mean()) / (
                    0.015 * df['close'].rolling(period).std())
        else:
            df[f'cci_{period}'] = np.nan

    bollinger = BollingerBands(close=df['close'], window=20, window_dev=2)
    df['bb_middle'] = bollinger.bollinger_mavg()
    df['bb_upper'] = bollinger.bollinger_hband()
    df['bb_lower'] = bollinger.bollinger_lband()

    df['obv'] = (np.sign(df['close'].diff()) * df['volume']).fillna(0).cumsum()
    df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3
    df['raw_money_flow'] = df['typical_price'] * df['volume']
    df['money_flow_ratio'] = df['raw_money_flow'].rolling(14).sum() / df['raw_money_flow'].rolling(14).sum().shift(
        1)
    df['mfi'] = 100 - (100 / (1 + df['money_flow_ratio']))
    return df

    
def update_chart(df, company, selected_indicators, selected_ma, selected_rsi, selected_cci,
                    selected_indicator_combination):
    """
    X√¢y d·ª±ng bi·ªÉu ƒë·ªì Plotly d·ª±a tr√™n d·ªØ li·ªáu chu·ªói th·ªùi gian (df) v√† c√°c l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng.
    Phi√™n b·∫£n n√†y ƒë∆∞·ª£c chuy·ªÉn th·ªÉ t·ª´ code Dash (update_graph).
    """
    # N·∫øu kh√¥ng ch·ªçn ch·ªâ b√°o hay t·ªï h·ª£p n√†o, ch·ªâ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn
    # T·∫°o figure
    fig = go.Figure(
        data=[
            go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Price',
                increasing_line_color='green',
                decreasing_line_color='red',
            )
        ]
    )
    if not selected_indicators and not selected_indicator_combination:
        # Ch·ªâ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn
        return fig
    # N·∫øu ch·ªçn t·ªï h·ª£p ch·ªâ b√°o, ∆∞u ti√™n hi·ªÉn th·ªã t·ªï h·ª£p
    if selected_indicator_combination:
        if selected_indicator_combination == 'PSAR + SMA':
            # V·∫Ω PSAR
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['psar'],
                mode='markers',
                name='PSAR',
                marker=dict(color='purple', size=6, symbol='circle'),
                opacity=0.8
            ))

            # V·∫Ω SMA 20 (ng·∫Øn h·∫°n)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['sma_20'],
                mode='lines',
                name='SMA 20 (Short Term)',
                line=dict(color='blue', width=2),
                opacity=0.8
            ))

            # V·∫Ω SMA 100 (d√†i h·∫°n)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['sma_100'],
                mode='lines',
                name='SMA 100 (Long Term)',
                line=dict(color='orange', width=2),
                opacity=0.8
            ))

            # T√≠n hi·ªáu ti·∫øp t·ª•c xu h∆∞·ªõng gi·∫£m m·∫°nh:
            # SMA 20 c·∫Øt xu·ªëng SMA 100 v√† PSAR n·∫±m ph√≠a tr√™n gi√°
            bearish_signal = (
                    (df['sma_20'] < df['sma_100']) &  # SMA 20 n·∫±m d∆∞·ªõi SMA 100
                    (df['sma_20'].shift(1) >= df['sma_100'].shift(1)) &  # SMA 20 v·ª´a c·∫Øt xu·ªëng
                    (df['psar'] > df['close'])  # PSAR n·∫±m tr√™n gi√°
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][bearish_signal],
                y=df['close'][bearish_signal],
                mode='markers',
                name='Bearish Signal (Strong Downtrend)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ))

            # T√≠n hi·ªáu ti·∫øp t·ª•c xu h∆∞·ªõng tƒÉng m·∫°nh:
            # SMA 20 c·∫Øt l√™n SMA 100 v√† PSAR n·∫±m d∆∞·ªõi gi√°
            bullish_signal = (
                    (df['sma_20'] > df['sma_100']) &  # SMA 20 n·∫±m tr√™n SMA 100
                    (df['sma_20'].shift(1) <= df['sma_100'].shift(1)) &  # SMA 20 v·ª´a c·∫Øt l√™n
                    (df['psar'] < df['close'])  # PSAR n·∫±m d∆∞·ªõi gi√°
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][bullish_signal],
                y=df['close'][bullish_signal],
                mode='markers',
                name='Bullish Signal (Strong Uptrend)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ))
        elif selected_indicator_combination == 'PSAR + RSI':
            # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + PSAR, 1 h√†ng cho RSI
            fig = make_subplots(
                rows=2,
                cols=1,
                shared_xaxes=True,  # D√πng chung tr·ª•c X
                row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                subplot_titles=["Candlestick with PSAR", "RSI"]
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Price',
                    increasing_line_color='green',
                    decreasing_line_color='red'
                ),
                row=1, col=1
            )

            # V·∫Ω PSAR tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['psar'],
                    mode='markers',
                    name='PSAR',
                    marker=dict(color='purple', size=6, symbol='circle'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # V·∫Ω RSI ·ªü subplot th·ª© 2 (h√†ng 2)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['rsi_14'],
                    mode='lines',
                    name='RSI 14',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ),
                row=2, col=1
            )

            # V·∫Ω t√≠n hi·ªáu MUA tr√™n bi·ªÉu ƒë·ªì n·∫øn
            buy_signal = (
                    (df['psar'] < df['close']) &
                    (df['rsi_14'] < 30) &
                    (df['rsi_14'].shift(1) <= df['rsi_14'])
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][buy_signal],
                    y=df['close'][buy_signal],
                    mode='markers',
                    name='Buy Signal (PSAR + RSI)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ),
                row=1, col=1
            )
            # V·∫Ω t√≠n hi·ªáu B√ÅN tr√™n bi·ªÉu ƒë·ªì n·∫øn
            sell_signal = (
                    (df['psar'] > df['close']) &
                    (df['rsi_14'] > 70) &
                    (df['rsi_14'].shift(1) >= df['rsi_14'])
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][sell_signal],
                    y=df['close'][sell_signal],
                    mode='markers',
                    name='Sell Signal (PSAR + RSI)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # Th√™m d·∫£i m√†u cho v√πng qu√° mua (RSI > 70) v√† qu√° b√°n (RSI < 30)
            fig.add_shape(
                # V√πng qu√° mua (RSI > 70) - M√†u ƒë·ªè
                go.layout.Shape(
                    type="rect",
                    x0=df['Date'].iloc[0], x1=df['Date'].iloc[-1],
                    y0=70, y1=100,
                    line=dict(color="red", width=0),
                    fillcolor="rgba(255, 0, 0, 0.2)",  # M√†u ƒë·ªè nh·∫°t
                ),
                row=2, col=1
            )
            fig.add_shape(
                # V√πng qu√° b√°n (RSI < 30) - M√†u xanh
                go.layout.Shape(
                    type="rect",
                    x0=df['Date'].iloc[0], x1=df['Date'].iloc[-1],
                    y0=0, y1=30,
                    line=dict(color="green", width=0),
                    fillcolor="rgba(0, 255, 0, 0.2)",  # M√†u xanh nh·∫°t
                ),
                row=2, col=1
            )
        elif selected_indicator_combination == 'PSAR + MACD':
            # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + PSAR, 1 h√†ng cho MACD
            fig = make_subplots(
                rows=2,
                cols=1,
                shared_xaxes=True,  # D√πng chung tr·ª•c X
                row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                subplot_titles=["Candlestick with PSAR", "MACD"]
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Price',
                    increasing_line_color='green',
                    decreasing_line_color='red'
                ),
                row=1, col=1
            )

            # V·∫Ω PSAR tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['psar'],
                    mode='markers',
                    name='PSAR',
                    marker=dict(color='purple', size=6, symbol='circle'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # V·∫Ω MACD Line ·ªü subplot th·ª© 2 (h√†ng 2)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['macd_line'],
                    mode='lines',
                    name='MACD Line',
                    line=dict(color='blue', width=2),
                    opacity=0.8
                ),
                row=2, col=1
            )

            # V·∫Ω Signal Line
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['macd_signal'],
                    mode='lines',
                    name='Signal Line',
                    line=dict(color='red', width=2, dash='dot'),
                    opacity=0.8
                ),
                row=2, col=1
            )

            # V·∫Ω Histogram
            fig.add_trace(
                go.Bar(
                    x=df['Date'],
                    y=df['macd_histogram'],
                    name='MACD Histogram',
                    marker_color=df['macd_histogram'].apply(lambda x: 'green' if x > 0 else 'red'),
                    opacity=0.6
                ),
                row=2, col=1
            )

            # T√≠n hi·ªáu MUA
            buy_signal = (
                    (df['psar'] < df['close']) &  # PSAR n·∫±m d∆∞·ªõi gi√°
                    (df['macd_line'] > df['macd_signal']) &  # MACD Line c·∫Øt Signal Line t·ª´ d∆∞·ªõi l√™n
                    (df['macd_histogram'] > 0) &  # Histogram chuy·ªÉn t·ª´ √¢m sang d∆∞∆°ng
                    (df['macd_histogram'].shift(1) <= 0)  # X√°c nh·∫≠n chuy·ªÉn ƒë·ªïi t·ª´ √¢m sang d∆∞∆°ng
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][buy_signal],
                    y=df['close'][buy_signal],
                    mode='markers',
                    name='Buy Signal (PSAR + MACD)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # T√≠n hi·ªáu B√ÅN
            sell_signal = (
                    (df['psar'] > df['close']) &  # PSAR n·∫±m tr√™n gi√°
                    (df['macd_line'] < df['macd_signal']) &  # MACD Line c·∫Øt Signal Line t·ª´ tr√™n xu·ªëng
                    (df['macd_histogram'] < 0) &  # Histogram chuy·ªÉn t·ª´ d∆∞∆°ng sang √¢m
                    (df['macd_histogram'].shift(1) >= 0)  # X√°c nh·∫≠n chuy·ªÉn ƒë·ªïi t·ª´ d∆∞∆°ng sang √¢m
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][sell_signal],
                    y=df['close'][sell_signal],
                    mode='markers',
                    name='Sell Signal (PSAR + MACD)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ),
                row=1, col=1
            )
        elif selected_indicator_combination == 'Bollinger Bands + RSI':
            # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + Bollinger Bands, 1 h√†ng cho RSI
            fig = make_subplots(
                rows=2,
                cols=1,
                shared_xaxes=True,  # D√πng chung tr·ª•c X
                row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                subplot_titles=["Candlestick with Bollinger Bands", "RSI"]
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Price',
                    increasing_line_color='green',
                    decreasing_line_color='red'
                ),
                row=1, col=1
            )

            # V·∫Ω Bollinger Bands tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['bb_upper'],
                    mode='lines',
                    name='Bollinger Upper Band',
                    line=dict(color='blue', width=1, dash='dash'),
                    opacity=0.8
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['bb_middle'],
                    mode='lines',
                    name='Bollinger Middle Band',
                    line=dict(color='grey', width=1),
                    opacity=0.8
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['bb_lower'],
                    mode='lines',
                    name='Bollinger Lower Band',
                    line=dict(color='blue', width=1, dash='dash'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # V·∫Ω RSI tr√™n subplot th·ª© 2 (h√†ng 2)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['rsi_14'],
                    mode='lines',
                    name='RSI (14)',
                    line=dict(color='purple', width=2),
                    opacity=0.8,
                    yaxis='y2'  # Hi·ªÉn th·ªã RSI tr√™n tr·ª•c y ph·ª•
                ),
                row=2, col=1
            )

            # T√≠n hi·ªáu MUA
            buy_signal = (
                    (df['close'] <= df['bb_lower']) &  # Gi√° ch·∫°m ho·∫∑c th·∫•p h∆°n d·∫£i d∆∞·ªõi c·ªßa Bollinger Bands
                    (df['rsi_14'] < 30)  # RSI d∆∞·ªõi 30 (qu√° b√°n)
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][buy_signal],
                    y=df['close'][buy_signal],
                    mode='markers',
                    name='Buy Signal (BB + RSI)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # T√≠n hi·ªáu B√ÅN
            sell_signal = (
                    (df['close'] >= df['bb_upper']) &  # Gi√° ch·∫°m ho·∫∑c v∆∞·ª£t d·∫£i tr√™n c·ªßa Bollinger Bands
                    (df['rsi_14'] > 70)  # RSI tr√™n 70 (qu√° mua)
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][sell_signal],
                    y=df['close'][sell_signal],
                    mode='markers',
                    name='Sell Signal (BB + RSI)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # Th√™m tr·ª•c y th·ª© hai cho RSI
            fig.update_layout(
                yaxis2=dict(
                    showgrid=True
                )
            )
        elif selected_indicator_combination == 'Bollinger Bands + MACD':
            # T·∫°o subplots v·ªõi 2 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn + Bollinger Bands, 1 h√†ng cho MACD
            fig = make_subplots(
                rows=2,
                cols=1,
                shared_xaxes=True,  # D√πng chung tr·ª•c X
                row_heights=[0.7, 0.3],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                subplot_titles=["Candlestick with Bollinger Bands", "MACD"]
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Price',
                    increasing_line_color='green',
                    decreasing_line_color='red'
                ),
                row=1, col=1
            )

            # V·∫Ω Bollinger Bands tr√™n bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['bb_upper'],
                    mode='lines',
                    name='Bollinger Upper Band',
                    line=dict(color='blue', width=1, dash='dash'),
                    opacity=0.8
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['bb_middle'],
                    mode='lines',
                    name='Bollinger Middle Band',
                    line=dict(color='grey', width=1),
                    opacity=0.8
                ),
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['bb_lower'],
                    mode='lines',
                    name='Bollinger Lower Band',
                    line=dict(color='blue', width=1, dash='dash'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # V·∫Ω MACD Line tr√™n subplot th·ª© 2 (h√†ng 2)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['macd_line'],
                    mode='lines',
                    name='MACD Line',
                    line=dict(color='purple', width=2),
                    opacity=0.8
                ),
                row=2, col=1
            )

            # V·∫Ω Signal Line tr√™n subplot th·ª© 2 (h√†ng 2)
            fig.add_trace(
                go.Scatter(
                    x=df['Date'],
                    y=df['macd_signal'],
                    mode='lines',
                    name='Signal Line',
                    line=dict(color='red', width=2, dash='dot'),
                    opacity=0.8
                ),
                row=2, col=1
            )

            # T√≠n hi·ªáu MUA
            buy_signal = (
                    (df['macd_line'] > df['macd_signal']) &  # MACD Line c·∫Øt l√™n Signal Line
                    (df['macd_line'].shift(1) <= df['macd_signal'].shift(1)) &  # X√°c nh·∫≠n c·∫Øt l√™n
                    (df['close'] <= df['bb_lower'])  # Gi√° n·∫±m d∆∞·ªõi d·∫£i d∆∞·ªõi Bollinger Bands
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][buy_signal],
                    y=df['close'][buy_signal],
                    mode='markers',
                    name='Buy Signal (BB + MACD)',
                    marker=dict(color='blue', size=20, symbol='triangle-up'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # T√≠n hi·ªáu B√ÅN
            sell_signal = (
                    (df['macd_line'] < df['macd_signal']) &  # MACD Line c·∫Øt xu·ªëng Signal Line
                    (df['macd_line'].shift(1) >= df['macd_signal'].shift(1)) &  # X√°c nh·∫≠n c·∫Øt xu·ªëng
                    (df['close'] >= df['bb_upper'])  # Gi√° n·∫±m tr√™n d·∫£i tr√™n Bollinger Bands
            )
            fig.add_trace(
                go.Scatter(
                    x=df['Date'][sell_signal],
                    y=df['close'][sell_signal],
                    mode='markers',
                    name='Sell Signal (BB + MACD)',
                    marker=dict(color='orange', size=20, symbol='triangle-down'),
                    opacity=0.8
                ),
                row=1, col=1
            )

            # Thi·∫øt l·∫≠p layout cho tr·ª•c y th·ª© hai c·ªßa MACD (h√†ng 2)
            fig.update_layout(
                yaxis2=dict(
                    showgrid=True
                )
            )
            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn (h√†ng 1)
            fig.add_trace(
                go.Candlestick(
                    x=df['Date'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name='Price',
                    increasing_line_color='green',
                    decreasing_line_color='red'
                ),
                row=1, col=1
            )
            # Thi·∫øt l·∫≠p layout cho tr·ª•c y th·ª© hai c·ªßa MACD (h√†ng 2)
            fig.update_layout(
                yaxis2=dict(
                    showgrid=True
                )
            )

            
        elif selected_indicator_combination == 'RSI + MACD':
            # T·∫°o subplots v·ªõi 3 h√†ng: 1 h√†ng cho bi·ªÉu ƒë·ªì n·∫øn, 1 h√†ng cho RSI, 1 h√†ng cho MACD
            fig = make_subplots(
                rows=3,
                cols=1,
                shared_xaxes=True,  # D√πng chung tr·ª•c X
                row_heights=[0.6, 0.2, 0.2],  # T·ª∑ l·ªá chi·ªÅu cao c·ªßa c√°c h√†ng
                vertical_spacing=0.05,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                subplot_titles=('Candlestick Chart', 'RSI', 'MACD'),  # Ti√™u ƒë·ªÅ cho m·ªói subplot
                shared_yaxes=True  # D√πng chung tr·ª•c Y
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn trong subplot ch√≠nh (row 1)
            fig.add_trace(go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Candlestick',
            ), row=1, col=1)

            # V·∫Ω RSI trong subplot 1 (row 2)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['rsi_14'],
                mode='lines',
                name='RSI (14)',
                line=dict(color='blue', width=2),
                opacity=0.8
            ), row=2, col=1)

            # V√πng qu√° mua (RSI > 70)
            fig.add_shape(
                type='rect',
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=70,
                y1=100,
                fillcolor='red',
                opacity=0.2,
                layer='below',
                line_width=0,
                yref='y2',
                row=2, col=1
            )

            # V√πng qu√° b√°n (RSI < 30)
            fig.add_shape(
                type='rect',
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=0,
                y1=30,
                fillcolor='green',
                opacity=0.2,
                layer='below',
                line_width=0,
                yref='y2',
                row=2, col=1
            )

            # V·∫Ω MACD trong subplot 2 (row 3)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['macd_line'],
                mode='lines',
                name='MACD Line',
                line=dict(color='green', width=2),
                opacity=0.8
            ), row=3, col=1)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['macd_signal'],
                mode='lines',
                name='Signal Line',
                line=dict(color='red', width=2, dash='dot'),
                opacity=0.8
            ), row=3, col=1)
            fig.add_trace(go.Bar(
                x=df['Date'],
                y=df['macd_histogram'],
                name='MACD Histogram',
                marker_color=df['macd_histogram'].apply(lambda x: 'green' if x > 0 else 'red'),
                opacity=0.6
            ), row=3, col=1)

            # T√≠n hi·ªáu MUA
            buy_signal = (
                    (df['rsi_14'] < 30) &  # RSI trong v√πng qu√° b√°n
                    (df['macd_line'] > df['macd_signal']) &  # Giao c·∫Øt tƒÉng c·ªßa MACD
                    (df['macd_line'].shift(1) <= df['macd_signal'].shift(1))  # MACD tr∆∞·ªõc ƒë√≥ ·ªü d∆∞·ªõi Signal
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][buy_signal],
                y=df['close'][buy_signal],
                mode='markers',
                name='Buy Signal (RSI + MACD)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ), row=1, col=1)  # V·∫Ω tr√™n bi·ªÉu ƒë·ªì n·∫øn ch√≠nh

            # T√≠n hi·ªáu B√ÅN
            sell_signal = (
                    (df['rsi_14'] > 70) &  # RSI trong v√πng qu√° mua
                    (df['macd_line'] < df['macd_signal']) &  # Giao c·∫Øt gi·∫£m c·ªßa MACD
                    (df['macd_line'].shift(1) >= df['macd_signal'].shift(1))  # MACD tr∆∞·ªõc ƒë√≥ ·ªü tr√™n Signal
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][sell_signal],
                y=df['close'][sell_signal],
                mode='markers',
                name='Sell Signal (RSI + MACD)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ), row=1, col=1)  # V·∫Ω tr√™n bi·ªÉu ƒë·ªì n·∫øn ch√≠nh
    else:
        # V√≠ d·ª•: t√≠ch h·ª£p Moving Averages n·∫øu "MA" ƒë∆∞·ª£c ch·ªçn
        if 'MA' in selected_indicators:
            ma_pairs = {
                'sma_20': 'SMA 20',
                'sma_50': 'SMA 50',
                'sma_100': 'SMA 100',
                'sma_200': 'SMA 200',
                'ema_20': 'EMA 20',
                'ema_50': 'EMA 50',
                'ema_100': 'EMA 100',
                'ema_200': 'EMA 200'
            }
            if selected_ma:
                for short_ma, long_ma in ma_pairs:
                    # Ki·ªÉm tra n·∫øu c·∫£ 2 MA ƒë∆∞·ª£c ch·ªçn
                    if short_ma in selected_ma and long_ma in selected_ma:
                        short_ma_series = df[short_ma]
                        long_ma_series = df[long_ma]

                        # T√≠n hi·ªáu MUA: MA ng·∫Øn h·∫°n c·∫Øt l√™n MA d√†i h·∫°n
                        buy_signals = (short_ma_series > long_ma_series) & (
                                short_ma_series.shift(1) <= long_ma_series.shift(1))
                        fig.add_trace(go.Scatter(
                            x=df['Date'][buy_signals],
                            y=df['close'][buy_signals],
                            mode='markers',
                            name=f'Buy Signal ({short_ma} vs {long_ma})',
                            marker=dict(color='purple', size=20, symbol='triangle-up'),
                            opacity=0.8
                        ))

                        # T√≠n hi·ªáu B√ÅN: MA ng·∫Øn h·∫°n c·∫Øt xu·ªëng MA d√†i h·∫°n
                        sell_signals = (short_ma_series < long_ma_series) & (
                                short_ma_series.shift(1) >= long_ma_series.shift(1))
                        fig.add_trace(go.Scatter(
                            x=df['Date'][sell_signals],
                            y=df['close'][sell_signals],
                            mode='markers',
                            name=f'Sell Signal ({short_ma} vs {long_ma})',
                            marker=dict(color='pink', size=20, symbol='triangle-down'),
                            opacity=0.8
                        ))

            # V·∫Ω c√°c ƒë∆∞·ªùng MA m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
            ma_columns = {
                'sma_20': 'SMA 20',
                'sma_50': 'SMA 50',
                'sma_100': 'SMA 100',
                'sma_200': 'SMA 200',
                'ema_20': 'EMA 20',
                'ema_50': 'EMA 50',
                'ema_100': 'EMA 100',
                'ema_200': 'EMA 200'
            }

            # V·∫Ω t·ª´ng ƒë∆∞·ªùng MA ƒë∆∞·ª£c ch·ªçn v√† t√≠nh t√≠n hi·ªáu giao d·ªãch n·∫øu ch·ªâ ch·ªçn 1 MA
            for ma_column, ma_label in ma_columns.items():
                if ma_column in selected_ma:
                    # V·∫Ω ƒë∆∞·ªùng MA tr√™n bi·ªÉu ƒë·ªì n·∫øn
                    fig.add_trace(go.Scatter(
                        x=df['Date'],
                        y=df[ma_column],
                        mode='lines',
                        name=ma_label,
                        line=dict(width=2, dash='solid'),
                        opacity=0.8
                    ))

                    # N·∫øu ch·ªâ ch·ªçn 1 MA, th√™m t√≠n hi·ªáu giao c·∫Øt v·ªõi gi√°
                    buy_signals = (df['close'] > df[ma_column]) & (df['close'].shift(1) <= df[ma_column].shift(1))
                    sell_signals = (df['close'] < df[ma_column]) & (df['close'].shift(1) >= df[ma_column].shift(1))

                    # V·∫Ω t√≠n hi·ªáu MUA
                    fig.add_trace(go.Scatter(
                        x=df['Date'][buy_signals],
                        y=df['close'][buy_signals],
                        mode='markers',
                        name=f'Buy Signal ({ma_label})',
                        marker=dict(color='blue', size=20, symbol='triangle-up'),
                        opacity=0.8
                    ))

                    # V·∫Ω t√≠n hi·ªáu B√ÅN
                    fig.add_trace(go.Scatter(
                        x=df['Date'][sell_signals],
                        y=df['close'][sell_signals],
                        mode='markers',
                        name=f'Sell Signal ({ma_label})',
                        marker=dict(color='orange', size=20, symbol='triangle-down'),
                        opacity=0.8
                    ))
        elif 'MACD' in selected_indicators:
            # T·∫°o subplot cho MACD
            fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                                vertical_spacing=0.02, row_heights=[0.7, 0.3])
            fig.add_trace(go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Candlestick'
            ), row=1, col=1)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['macd_line'],
                mode='lines',
                name='MACD Line',
                line=dict(color='blue', width=2),
                opacity=0.8
            ), row=2, col=1)
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['macd_signal'],
                mode='lines',
                name='Signal Line',
                line=dict(color='red', width=2, dash='dot'),
                opacity=0.8
            ), row=2, col=1)
            fig.add_trace(go.Bar(
                x=df['Date'],
                y=df['macd_histogram'],
                name='MACD Histogram',
                marker_color=df['macd_histogram'].apply(lambda x: 'green' if x >= 0 else 'red'),
                opacity=0.6
            ), row=2, col=1)
            # T√≠n hi·ªáu giao d·ªãch d·ª±a tr√™n MACD Line v√† Signal Line
            buy_signals = (df['macd_line'] > df['macd_signal']) & (
                    df['macd_line'].shift(1) <= df['macd_signal'].shift(1))
            sell_signals = (df['macd_line'] < df['macd_signal']) & (
                    df['macd_line'].shift(1) >= df['macd_signal'].shift(1))

            # V·∫Ω t√≠n hi·ªáu MUA
            fig.add_trace(go.Scatter(
                x=df['Date'][buy_signals],
                y=df['macd_line'][buy_signals],  # Ch·ªçn macd_line ƒë·ªÉ hi·ªán tr√™n MACD chart
                mode='markers',
                name='Buy Signal (MACD)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ), row=2, col=1)

            # V·∫Ω t√≠n hi·ªáu B√ÅN
            fig.add_trace(go.Scatter(
                x=df['Date'][sell_signals],
                y=df['macd_line'][sell_signals],  # Ch·ªçn macd_line ƒë·ªÉ hi·ªán tr√™n MACD chart
                mode='markers',
                name='Sell Signal (MACD)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ), row=2, col=1)

            # Zero Line Crossover
            zero_cross_up = (df['macd_line'] > 0) & (df['macd_line'].shift(1) <= 0)
            zero_cross_down = (df['macd_line'] < 0) & (df['macd_line'].shift(1) >= 0)

            # T√≠n hi·ªáu Zero Line Crossover (TƒÉng gi√°)
            fig.add_trace(go.Scatter(
                x=df['Date'][zero_cross_up],
                y=df['macd_line'][zero_cross_up],
                mode='markers',
                name='Zero Line Up (MACD)',
                marker=dict(color='blue', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)

            # T√≠n hi·ªáu Zero Line Crossover (Gi·∫£m gi√°)
            fig.add_trace(go.Scatter(
                x=df['Date'][zero_cross_down],
                y=df['macd_line'][zero_cross_down],
                mode='markers',
                name='Zero Line Down (MACD)',
                marker=dict(color='purple', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)
        elif 'PSAR' in selected_indicators:
            # V·∫Ω c√°c ƒëi·ªÉm SAR tr√™n bi·ªÉu ƒë·ªì n·∫øn
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['psar'],
                mode='markers',
                name='PSAR',
                marker=dict(color='purple', size=6, symbol='circle'),
                opacity=0.8
            ))

            # T√≠n hi·ªáu giao d·ªãch t·ª´ PSAR
            buy_signals = (df['psar'] < df['low']) & (df['psar'].shift(1) >= df['high'].shift(1))
            sell_signals = (df['psar'] > df['high']) & (df['psar'].shift(1) <= df['low'].shift(1))

            # V·∫Ω t√≠n hi·ªáu MUA
            fig.add_trace(go.Scatter(
                x=df['Date'][buy_signals],
                y=df['close'][buy_signals],
                mode='markers',
                name='Buy Signal (PSAR)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ))

            # V·∫Ω t√≠n hi·ªáu B√ÅN
            fig.add_trace(go.Scatter(
                x=df['Date'][sell_signals],
                y=df['close'][sell_signals],
                mode='markers',
                name='Sell Signal (PSAR)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ))
        # T√≠ch h·ª£p RSI n·∫øu ƒë∆∞·ª£c ch·ªçn
        elif 'RSI' in selected_indicators and selected_rsi:
            # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: RSI)
            fig = make_subplots(
                rows=2, cols=1,
                shared_xaxes=True,
                vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† RSI
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn
            fig.add_trace(go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Candlestick'
            ), row=1, col=1)

            # V·∫Ω ƒë∆∞·ªùng RSI trong h√†ng 2
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df[selected_rsi],
                mode='lines',
                name=f'{selected_rsi.upper()}',
                line=dict(color='blue', width=2),
                opacity=0.8
            ), row=2, col=1)  # Ch·ªâ r√µ v·∫Ω ·ªü h√†ng 2

            # V√πng Overbought (RSI > 70)
            fig.add_shape(
                type='rect',
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=70,
                y1=100,
                fillcolor='red',
                opacity=0.2,
                layer='below',
                line_width=0,
                row=2, col=1  # Ch·ªâ r√µ shape n·∫±m ·ªü h√†ng 2
            )

            # V√πng Oversold (RSI < 30)
            fig.add_shape(
                type='rect',
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=0,
                y1=30,
                fillcolor='green',
                opacity=0.2,
                layer='below',
                line_width=0,
                row=2, col=1  # Ch·ªâ r√µ shape n·∫±m ·ªü h√†ng 2
            )

            # T√≠n hi·ªáu qu√° mua/qu√° b√°n
            overbought_signals = df[selected_rsi] > 70
            oversold_signals = df[selected_rsi] < 30

            # T√≠n hi·ªáu MUA (qu√° b√°n)
            fig.add_trace(go.Scatter(
                x=df['Date'][oversold_signals],
                y=df[selected_rsi][oversold_signals],
                mode='markers',
                name='Buy Signal (RSI)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu MUA ·ªü h√†ng 2

            # T√≠n hi·ªáu B√ÅN (qu√° mua)
            fig.add_trace(go.Scatter(
                x=df['Date'][overbought_signals],
                y=df[selected_rsi][overbought_signals],
                mode='markers',
                name='Sell Signal (RSI)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu B√ÅN ·ªü h√†ng 2

            # C·∫Øt m·ª©c 50
            cross_up_50 = (df[selected_rsi] > 50) & (df[selected_rsi].shift(1) <= 50)
            cross_down_50 = (df[selected_rsi] < 50) & (df[selected_rsi].shift(1) >= 50)

            # V·∫Ω t√≠n hi·ªáu c·∫Øt m·ª©c 50
            fig.add_trace(go.Scatter(
                x=df['Date'][cross_up_50],
                y=df[selected_rsi][cross_up_50],
                mode='markers',
                name='RSI Cross Up 50',
                marker=dict(color='blue', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu c·∫Øt l√™n ·ªü h√†ng 2

            fig.add_trace(go.Scatter(
                x=df['Date'][cross_down_50],
                y=df[selected_rsi][cross_down_50],
                mode='markers',
                name='RSI Cross Down 50',
                marker=dict(color='purple', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)  # V·∫Ω t√≠n hi·ªáu c·∫Øt xu·ªëng ·ªü h√†ng 2
        # T√≠ch h·ª£p CCI
        elif 'CCI' in selected_indicators and selected_cci:
            # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: CCI)
            fig = make_subplots(
                rows=2, cols=1,
                shared_xaxes=True,
                vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† CCI
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
            fig.add_trace(go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Candlestick'
            ), row=1, col=1)

            # V·∫Ω ƒë∆∞·ªùng CCI ·ªü h√†ng th·ª© 2
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df[selected_cci],
                mode='lines',
                name=f'{selected_cci.upper()}',
                line=dict(color='purple', width=2),
                opacity=0.8
            ), row=2, col=1)

            # V√πng Overbought (> +100) ·ªü h√†ng th·ª© 2
            fig.add_shape(
                type='rect',
                xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=100,
                y1=300,
                fillcolor='red',
                opacity=0.2,
                layer='below',
                line_width=0
            )

            # V√πng Oversold (< -100) ·ªü h√†ng th·ª© 2
            fig.add_shape(
                type='rect',
                xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=-300,
                y1=-100,
                fillcolor='green',
                opacity=0.2,
                layer='below',
                line_width=0
            )

            # T√≠n hi·ªáu giao d·ªãch CCI
            buy_signals = df[selected_cci] < -100
            sell_signals = df[selected_cci] > 100

            # V·∫Ω t√≠n hi·ªáu MUA (qu√° b√°n) ·ªü h√†ng th·ª© 2
            fig.add_trace(go.Scatter(
                x=df['Date'][buy_signals],
                y=df[selected_cci][buy_signals],
                mode='markers',
                name='Buy Signal (CCI)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ), row=2, col=1)

            # V·∫Ω t√≠n hi·ªáu B√ÅN (qu√° mua) ·ªü h√†ng th·ª© 2
            fig.add_trace(go.Scatter(
                x=df['Date'][sell_signals],
                y=df[selected_cci][sell_signals],
                mode='markers',
                name='Sell Signal (CCI)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ), row=2, col=1)

            # Zero Line Crossover
            cross_up_zero = (df[selected_cci] > 0) & (df[selected_cci].shift(1) <= 0)
            cross_down_zero = (df[selected_cci] < 0) & (df[selected_cci].shift(1) >= 0)

            # T√≠n hi·ªáu CCI c·∫Øt l√™n 0 ·ªü h√†ng th·ª© 2
            fig.add_trace(go.Scatter(
                x=df['Date'][cross_up_zero],
                y=df[selected_cci][cross_up_zero],
                mode='markers',
                name='CCI Cross Up 0',
                marker=dict(color='blue', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)

            # T√≠n hi·ªáu CCI c·∫Øt xu·ªëng 0 ·ªü h√†ng th·ª© 2
            fig.add_trace(go.Scatter(
                x=df['Date'][cross_down_zero],
                y=df[selected_cci][cross_down_zero],
                mode='markers',
                name='CCI Cross Down 0',
                marker=dict(color='purple', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)

        # T√≠ch h·ª£p Bollinger Bands
        elif 'Bollinger Bands' in selected_indicators:
            # V·∫Ω Middle Band
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['bb_middle'],
                mode='lines',
                name='Middle Band',
                line=dict(color='blue', width=2),
                opacity=0.8
            ))

            # V·∫Ω Upper Band
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['bb_upper'],
                mode='lines',
                name='Upper Band',
                line=dict(color='red', width=2, dash='dot'),
                opacity=0.8
            ))

            # V·∫Ω Lower Band
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['bb_lower'],
                mode='lines',
                name='Lower Band',
                line=dict(color='green', width=2, dash='dot'),
                opacity=0.8
            ))

            # T√≠n hi·ªáu giao d·ªãch:
            # Qu√° mua: Gi√° ch·∫°m Upper Band
            overbought_signals = df['close'] >= df['bb_upper']
            fig.add_trace(go.Scatter(
                x=df['Date'][overbought_signals],
                y=df['close'][overbought_signals],
                mode='markers',
                name='Overbought (Sell Signal)',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ))

            # Qu√° b√°n: Gi√° ch·∫°m Lower Band
            oversold_signals = df['close'] <= df['bb_lower']
            fig.add_trace(go.Scatter(
                x=df['Date'][oversold_signals],
                y=df['close'][oversold_signals],
                mode='markers',
                name='Oversold (Buy Signal)',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ))

            # Breakout
            breakout_upper = df['high'] > df['bb_upper']
            breakout_lower = df['low'] < df['bb_lower']
            fig.add_trace(go.Scatter(
                x=df['Date'][breakout_upper],
                y=df['high'][breakout_upper],
                mode='markers',
                name='Breakout Above Upper Band',
                marker=dict(color='purple', size=10, symbol='circle'),
                opacity=0.8
            ))
            fig.add_trace(go.Scatter(
                x=df['Date'][breakout_lower],
                y=df['low'][breakout_lower],
                mode='markers',
                name='Breakout Below Lower Band',
                marker=dict(color='orange', size=10, symbol='circle'),
                opacity=0.8
            ))
        
        # T√≠ch h·ª£p OBV
        if 'OB' in selected_indicators:
            # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: OBV)
            fig = make_subplots(
                rows=2, cols=1,
                shared_xaxes=True,
                vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† OBV
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
            fig.add_trace(go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Candlestick'
            ), row=1, col=1)

            # V·∫Ω ƒë∆∞·ªùng OBV ·ªü h√†ng th·ª© hai
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['obv'],
                mode='lines',
                name='OBV',
                line=dict(color='blue', width=2),
                opacity=0.8
            ), row=2, col=1)

            # T√≠n hi·ªáu ph√¢n k·ª≥ tƒÉng (Bullish Divergence)
            bullish_divergence = (
                    (df['close'] < df['close'].shift(1)) & (df['obv'] > df['obv'].shift(1))
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][bullish_divergence],
                y=df['obv'][bullish_divergence],
                mode='markers',
                name='Bullish Divergence',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ), row=2, col=1)

            # T√≠n hi·ªáu ph√¢n k·ª≥ gi·∫£m (Bearish Divergence)
            bearish_divergence = (
                    (df['close'] > df['close'].shift(1)) & (df['obv'] < df['obv'].shift(1))
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][bearish_divergence],
                y=df['obv'][bearish_divergence],
                mode='markers',
                name='Bearish Divergence',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ), row=2, col=1)

            # T√≠n hi·ªáu breakout (OBV tƒÉng c√πng gi√°)
            breakout_signal = (
                    (df['obv'] > df['obv'].shift(1)) & (df['close'] > df['close'].shift(1))
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][breakout_signal],
                y=df['obv'][breakout_signal],
                mode='markers',
                name='Breakout Signal',
                marker=dict(color='purple', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)

        # T√≠ch h·ª£p MFI
        if 'MFI' in selected_indicators:
            # T·∫°o subplot v·ªõi 2 h√†ng (1: Candlestick, 2: MFI)
            fig = make_subplots(
                rows=2, cols=1,
                shared_xaxes=True,
                vertical_spacing=0.02,  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng
                row_heights=[0.7, 0.3]  # T·ª∑ l·ªá chi·ªÅu cao gi·ªØa candlestick v√† MFI
            )

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn ·ªü h√†ng ƒë·∫ßu
            fig.add_trace(go.Candlestick(
                x=df['Date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Candlestick'
            ), row=1, col=1)

            # V·∫Ω ƒë∆∞·ªùng MFI ·ªü h√†ng th·ª© hai
            fig.add_trace(go.Scatter(
                x=df['Date'],
                y=df['mfi'],
                mode='lines',
                name='MFI',
                line=dict(color='purple', width=2),
                opacity=0.8
            ), row=2, col=1)

            # V√πng Overbought (MFI > 80) ·ªü h√†ng th·ª© hai
            fig.add_shape(
                type='rect',
                xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=80,
                y1=100,
                fillcolor='red',
                opacity=0.2,
                layer='below',
                line_width=0
            )

            # V√πng Oversold (MFI < 20) ·ªü h√†ng th·ª© hai
            fig.add_shape(
                type='rect',
                xref='x2',  # Tham chi·∫øu ƒë·∫øn x-axis c·ªßa h√†ng th·ª© 2
                yref='y2',  # Tham chi·∫øu ƒë·∫øn y-axis c·ªßa h√†ng th·ª© 2
                x0=df['Date'].min(),
                x1=df['Date'].max(),
                y0=0,
                y1=20,
                fillcolor='green',
                opacity=0.2,
                layer='below',
                line_width=0
            )

            # T√≠n hi·ªáu ph√¢n k·ª≥ tƒÉng (Bullish Divergence)
            bullish_divergence = (
                    (df['close'] < df['close'].shift(1)) & (df['mfi'] > df['mfi'].shift(1))
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][bullish_divergence],
                y=df['mfi'][bullish_divergence],
                mode='markers',
                name='Bullish Divergence',
                marker=dict(color='blue', size=20, symbol='triangle-up'),
                opacity=0.8
            ), row=2, col=1)

            # T√≠n hi·ªáu ph√¢n k·ª≥ gi·∫£m (Bearish Divergence)
            bearish_divergence = (
                    (df['close'] > df['close'].shift(1)) & (df['mfi'] < df['mfi'].shift(1))
            )
            fig.add_trace(go.Scatter(
                x=df['Date'][bearish_divergence],
                y=df['mfi'][bearish_divergence],
                mode='markers',
                name='Bearish Divergence',
                marker=dict(color='orange', size=20, symbol='triangle-down'),
                opacity=0.8
            ), row=2, col=1)

            # S·ª± v∆∞·ª£t qua ng∆∞·ª°ng 50
            cross_up_50 = (df['mfi'] > 50) & (df['mfi'].shift(1) <= 50)
            cross_down_50 = (df['mfi'] < 50) & (df['mfi'].shift(1) >= 50)

            fig.add_trace(go.Scatter(
                x=df['Date'][cross_up_50],
                y=df['mfi'][cross_up_50],
                mode='markers',
                name='MFI Cross Up 50',
                marker=dict(color='blue', size=10, symbol='circle'),
                opacity=0.8
            ), row=2, col=1)
    # C·∫≠p nh·∫≠t layout
    title_text = f"Bi·ªÉu ƒë·ªì {company} - "
    if selected_indicator_combination:
        title_text += selected_indicator_combination
    elif selected_indicators:
        title_text += ", ".join(selected_indicators)
    else:
        title_text += "Price"
    fig.update_layout(
        xaxis_rangeslider_visible=False,
        title=title_text,
        xaxis_title="Date",
        yaxis_title="Price / Indicators",
        template='plotly_dark',
        plot_bgcolor='rgb(0,0,0)',
        showlegend=True
    )
    return fig


# H√†m ƒë·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu
def load_data_TA():
    df = pd.read_csv(FILE_PATH1, dtype=str, low_memory=False, encoding="utf-8")
    df_long = df.melt(id_vars=["Name", "Code"], var_name="Date", value_name="Close_Price")
    invalid_dates = ["RIC", "Start Date", "Exchange", "Sector", "Activity"]
    df_long = df_long[~df_long["Date"].isin(invalid_dates)]
    df_long["Date"] = df_long["Date"].astype(str).str.split().str[0]
    df_long["Date"] = pd.to_datetime(df_long["Date"], format="%Y-%m-%d", errors="coerce")
    df_long["Close_Price"] = pd.to_numeric(df_long["Close_Price"], errors="coerce")
    df_long = df_long.dropna(subset=["Date", "Close_Price"])
    df_long = df_long.sort_values(by=["Code", "Date"])
    return df_long


# H√†m t√≠nh MA
def calculate_moving_averages(df_long, ma_periods):
    for ma in ma_periods:
        df_long[f"MA{ma}"] = df_long.groupby("Code")["Close_Price"].transform(
            lambda x: x.rolling(window=ma, min_periods=1).mean())
    return df_long


# H√†m t√≠nh s·ªë l∆∞·ª£ng c·ªï phi·∫øu tr√™n MA
def count_stocks_above_ma(df_long, ma_periods):
    above_ma_counts = df_long.copy()
    for ma in ma_periods:
        above_ma_counts[f"Above_MA{ma}"] = above_ma_counts["Close_Price"] > above_ma_counts[f"MA{ma}"]
    return above_ma_counts.groupby("Date")[[f"Above_MA{ma}" for ma in ma_periods]].sum()


# H√†m t√≠nh s·ªë l∆∞·ª£ng MA ƒëang tƒÉng
def count_increasing_ma(df_long, ma_periods):
    df_ma_increase = df_long.copy()
    for ma in ma_periods:
        df_ma_increase[f"Increase_MA{ma}"] = df_ma_increase[f"MA{ma}"].diff() > 0
    return df_ma_increase.groupby("Date")[[f"Increase_MA{ma}" for ma in ma_periods]].sum()

    buf = BytesIO()
    with PdfPages(buf) as pdf:
        plt.figure(figsize=(8, 6))
        plt.text(0.5, 0.8, "Foreign Investor Trading Report", fontsize=14, ha='center')
        plt.text(0.5, 0.6, f"Date Extracted: {date.strftime('%d/%m/%Y')}", fontsize=12, ha='center')
        plt.axis("off")
        pdf.savefig()
        plt.close()

        fig_bytes = pio.to_image(fig_plot, format="png")
        img = plt.imread(BytesIO(fig_bytes))
        plt.figure(figsize=(10, 6))
        plt.imshow(img)
        plt.axis("off")
        pdf.savefig()
        plt.close()
    buf.seek(0)
    return buf

def createFigureTab2(filtered_data, ticker_selected):
    # L·ªçc b·ªè ng√†y kh√¥ng c√≥ d·ªØ li·ªáu v√† s·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu ƒë·ªÉ kh√¥ng c√≥ kho·∫£ng tr·ªëng tr√™n bi·ªÉu ƒë·ªì
    filtered_data = filtered_data.dropna(subset=["Net.F_Val", "Close"]).sort_values(by="Date").reset_index(
        drop=True)

    # T·∫°o d·ªØ li·ªáu ri√™ng cho mua r√≤ng v√† b√°n r√≤ng
    buy_data = filtered_data[filtered_data["Net.F_Val"] >= 0]
    sell_data = filtered_data[filtered_data["Net.F_Val"] < 0]

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt gi√° tr·ªã r√≤ng v√† ƒë∆∞·ªùng gi√° ƒë√≥ng c·ª≠a
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=buy_data["Date"],
        y=buy_data["Net.F_Val"],
        name="Mua r√≤ng",
        marker_color="#007bff",
        opacity=0.9,
        yaxis='y1'
    ))
    fig.add_trace(go.Bar(
        x=sell_data["Date"],
        y=sell_data["Net.F_Val"],
        name="B√°n r√≤ng",
        marker_color="#dc3545",
        opacity=0.9,
        yaxis='y1'
    ))

    # Th√™m ƒë∆∞·ªùng gi√° ƒë√≥ng c·ª≠a tr√™n tr·ª•c y th·ª© hai
    fig.add_trace(go.Scatter(
        x=filtered_data["Date"],
        y=filtered_data["Close"],
        mode='lines+markers',
        name="Gi√° ƒë√≥ng c·ª≠a",
        line=dict(color='#ffcc00', width=2),
        marker=dict(size=4),
        yaxis='y2'
    ))

    # C·∫≠p nh·∫≠t layout v·ªõi n·ªÅn t·ªëi ƒë·ªÉ n·ªïi b·∫≠t bi·ªÉu ƒë·ªì
    fig.update_layout(
        title=f"D√≤ng ti·ªÅn v√† Gi√° ƒë√≥ng c·ª≠a - {ticker_selected}",
        xaxis_title="Th·ªùi gian",
        xaxis=dict(
            tickmode='array',
            tickvals=filtered_data["Date"].iloc[::max(len(filtered_data) // 10, 1)],
            tickformat='%Y-%m-%d'
        ),
        yaxis=dict(
            title="D√≤ng ti·ªÅn (T·ª∑ VND)",
            side='left',
            showgrid=False
        ),
        yaxis2=dict(
            title="Gi√° ƒë√≥ng c·ª≠a",
            overlaying='y',
            side='right',
            showgrid=False
        ),
        legend=dict(
            orientation="v",
            yanchor="top",
            y=1,
            xanchor="right",
            x=1.15
        ),
        template="plotly_dark",
        width=1200,
        height=600
    )

    return fig

# Ph·ª•c v·ª• cho tab 2. T·ªïng quan theo ng√†nh
file_paths = {
    "./Data/CleanedFT/FT1921_cleaned.csv",
    "./Data/CleanedFT/FT2123_cleaned.csv",
    "./Data/CleanedFT/FT2325_cleaned.csv"
}

# T·∫£i d·ªØ li·ªáu
dataframesTab2 = load_data_by_file(file_paths)

# üìå G·ªçi h√†m v·∫Ω bi·ªÉu ƒë·ªì
df_price_tab3, df_volume_tab3, date_columns_tab3 = load_data_tab3()
# ============================================ MAIN ========================================================
if selected == "1. T·ªïng quan th·ªã tr∆∞·ªùng":
    st.markdown("<h1>üìä T·ªïng quan th·ªã tr∆∞·ªùng</h1>", unsafe_allow_html=True)
    st.markdown("<h6>T·ªïng quan v·ªÅ v·ªën h√≥a TTCK Vi·ªát Nam</h6>", unsafe_allow_html=True)

    selected_date = st.selectbox("Ch·ªçn ng√†y ƒë·ªÉ hi·ªÉn th·ªã Treemap", DATE_COLUMNS[::-1])
    st.plotly_chart(plot_sector_treemap(selected_date))
    st.plotly_chart(plot_bubble_chart(selected_date))

    # Get the stock code input from the user
    stock_codes = MERGED_DF["Code"].dropna().unique()
    stock_code = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu ƒë·ªÉ xem gi√° tr·ªã th·ªã tr∆∞·ªùng", options=stock_codes)
    if stock_code:
        fig_stock = plot_stock_price(MERGED_DF, stock_code)
        if fig_stock:
            st.pyplot(fig_stock)
        # Pass the stock code to generate_pdf function when button is clicked
    if st.button("Xu·∫•t b√°o c√°o PDF"):
        generate_pdf_by_stock_code(stock_code)  # Pass stock_code to generate_pdf

elif selected == "2. T·ªïng quan theo ng√†nh":
    st.markdown("<h1>üìä T·ªïng quan theo ng√†nh</h1>", unsafe_allow_html=True)
    st.markdown("<h6>D√≤ng ti·ªÅn v√† gi√° ƒë√≥ng c·ª≠a</h6>", unsafe_allow_html=True)

    data = dataframesTab2.copy()

    # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu r·ªóng
    if data.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.")
    else:
        # Ch·ªçn m√£ c·ªï phi·∫øu
        tickers = sorted(data["Ticker"].dropna().unique())
        ticker_selected = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", tickers)

        # Ch·ªçn kho·∫£ng th·ªùi gian
        min_date = data["Date"].min()
        max_date = data["Date"].max()
        if pd.isna(min_date) or pd.isna(max_date):
            st.warning("D·ªØ li·ªáu kh√¥ng c√≥ ng√†y h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            min_date, max_date = pd.to_datetime("2025-01-01"), pd.to_datetime("2025-02-28")
        start_date = st.date_input("Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", min_date)
        end_date = st.date_input("Ch·ªçn ng√†y k·∫øt th√∫c", max_date)

        # L·ªçc d·ªØ li·ªáu theo m√£ c·ªï phi·∫øu v√† th·ªùi gian
        filtered_data = data[(data["Ticker"] == ticker_selected) & (data["Date"] >= pd.to_datetime(start_date)) & (
                data["Date"] <= pd.to_datetime(end_date))].copy()

        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc
        if filtered_data.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
        else:
            fig = createFigureTab2(filtered_data, ticker_selected)
            st.plotly_chart(fig)
            
            if st.button("üìÑ Export PDF"):
                pdf_output = export_pdf_combined(fig, datetime.now())
                st.download_button(
                    label="T·ªïng quan theo ng√†nh",
                    data=pdf_output,
                    file_name=f"Tong_quan_theo_nganh_{ticker_selected}.pdf",
                    mime="application/pdf"
                )

elif selected == "3. Ph√¢n t√≠ch k·ªπ thu·∫≠t":
    st.markdown("<h1>üìäPh√¢n t√≠ch k·ªπ thu·∫≠t</h1>", unsafe_allow_html=True)
 
    # if subpage == "Chi ti·∫øt c·ªï phi·∫øu":
    st.title("üìà Ph√¢n t√≠ch Chi Ti·∫øt M√£ C·ªï Phi·∫øu")
    if df_price_tab3 is None or df_volume_tab3 is None:
        st.stop()

    # Chuy·ªÉn ƒë·ªïi date_columns_tab3 sang datetime
    date_columns_dt_tab3 = pd.to_datetime(date_columns_tab3, format="%Y-%m-%d", errors="coerce").dropna().sort_values()
    # L·∫•y ng√†y k·∫øt th√∫c
    selected_date = select_date(date_columns_dt_tab3)
    # Hi·ªÉn th·ªã b·∫£ng snapshot ch·ªâ b√°o
    df_snapshot_tab3 = calculate_indicators_snapshot(df_price_tab3, df_volume_tab3, selected_date)
    if df_snapshot_tab3 is not None:
        st.write("üîç **B·∫£ng ch·ªâ b√°o k·ªπ thu·∫≠t (snapshot)**")
        st.dataframe(df_snapshot_tab3)
        # Dropdown ch·ªçn m√£ c·ªï phi·∫øu
        stock_list = df_snapshot_tab3['Code'].unique().tolist()

        selected_stock_tab3 = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", stock_list)
        if not selected_stock_tab3:
            st.warning("‚ö† Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√£ c·ªï phi·∫øu!")
            st.stop()
        # Dropdown ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t
        indicators = [
            "SMA", "EMA", "MACD", "PSAR", "RSI",
            "CCI", "Bollinger Bands", "OB", "MFI"
        ]
        selected_indicators = st.multiselect("Ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t", indicators)
        # N·∫øu ch·ªçn MA th√¨ cho ph√©p ch·ªçn c√°c ƒë∆∞·ªùng MA c·ª• th·ªÉ
        selected_ma = []
        if "SMA" in selected_indicators or "EMA" in selected_indicators or "MA" in selected_indicators:
            ma_options = ["sma_20", "sma_50", "sma_100", "sma_200", "ema_20", "ema_50", "ema_100", "ema_200"]
            selected_ma = st.multiselect("Ch·ªçn ƒë∆∞·ªùng trung b√¨nh ƒë·ªông", ma_options)
        selected_rsi = None
        if "RSI" in selected_indicators:
            rsi_options = ["rsi_9", "rsi_14", "rsi_21"]
            selected_rsi = st.selectbox("Ch·ªçn RSI", rsi_options)
        selected_cci = None
        if "CCI" in selected_indicators:
            cci_options = ["cci_10", "cci_20", "cci_30"]
            selected_cci = st.selectbox("Ch·ªçn CCI", cci_options)
        # Dropdown ch·ªçn t·ªï h·ª£p ch·ªâ b√°o
        indicator_combinations = [
            "PSAR + SMA", "PSAR + EMA", "PSAR + RSI", "PSAR + MACD",
            "Bollinger Bands + RSI", "Bollinger Bands + MACD",
            "RSI + MACD"
        ]
        selected_combination = st.selectbox("Ch·ªçn t·ªï h·ª£p ch·ªâ b√°o", [None] + indicator_combinations)
        # Ch·ªçn kho·∫£ng th·ªùi gian (t√≠nh theo chu·ªói th·ªùi gian t·ª´ d·ªØ li·ªáu Excel)
        time_range_tab3 = select_time_period_tab3()
        # X√°c ƒë·ªãnh ng√†y b·∫Øt ƒë·∫ßu d·ª±a tr√™n kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn
        time_ranges_tab3 = {
            "1 tu·∫ßn": selected_date - pd.DateOffset(weeks=1),
            "1 th√°ng": selected_date - pd.DateOffset(months=1),
            "3 th√°ng": selected_date - pd.DateOffset(months=3),
            "6 th√°ng": selected_date - pd.DateOffset(months=6),
            "1 nƒÉm": selected_date - pd.DateOffset(years=1),
            "2 nƒÉm": selected_date - pd.DateOffset(years=2),
            "3 nƒÉm": selected_date - pd.DateOffset(years=3),
            "To√†n b·ªô": date_columns_dt_tab3.min(),
        }
        start_date = time_ranges_tab3.get(time_range_tab3, date_columns_dt_tab3.min())
        if start_date < date_columns_dt_tab3.min():
            st.warning(f"‚ö† Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh {time_range_tab3}! ƒêang ch·ªçn ng√†y s·ªõm nh·∫•t c√≥ th·ªÉ.")
            start_date = date_columns_dt_tab3.min()

        # L·∫•y chu·ªói th·ªùi gian cho m√£ ƒë∆∞·ª£c ch·ªçn (s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ file Excel)
        df_ts = get_stock_timeseries(selected_stock_tab3, df_price_tab3, df_volume_tab3, date_columns_dt_tab3, start_date,
                                        selected_date)
        
        if df_ts is None or df_ts.empty:
            st.error("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu th·ªùi gian cho m√£ ƒë∆∞·ª£c ch·ªçn.")
            st.stop()
        # T√≠nh to√°n c√°c ch·ªâ b√°o tr√™n chu·ªói th·ªùi gian
        df_ts = compute_timeseries_indicators(df_ts)

        # X√¢y d·ª±ng bi·ªÉu ƒë·ªì d·ª±a tr√™n c√°c l·ª±a ch·ªçn
        fig = update_chart(df_ts, selected_stock_tab3, selected_indicators, selected_ma, selected_rsi, selected_cci,
                            selected_combination)
        st.plotly_chart(fig, use_container_width=True)

    if "pdf_exported" not in st.session_state:
        st.session_state["pdf_exported"] = False

    if st.button("üìÑ Export PDF") and not st.session_state["pdf_exported"]:
        st.session_state["pdf_exported"] = True
        pdf_output = export_pdf_combined(fig, datetime.now())
        st.download_button(
            label="Download PDF",
            data=pdf_output,
            file_name=f"Ph√¢n t√≠ch k·ªπ thu·∫≠t {selected_stock_tab3}.pdf",
            mime="application/pdf"
        )

elif selected == "4. B√°o c√°o t√†i ch√≠nh":
    st.title("üìù B√°o c√°o t√†i ch√≠nh")

    stock_codes = MERGED_DF["Code"].dropna().unique()
    stock_code = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", options=stock_codes)

    # N√∫t xu·∫•t b√°o c√°o PDF
    if st.button("üìÑ Xu·∫•t b√°o c√°o PDF"):
        with st.spinner("‚è≥ ƒêang t·∫°o bi·ªÉu ƒë·ªì..."):
            draw_chart(stock_code)
        with st.spinner("‚è≥ ƒêang t·∫°o b√°o c√°o PDF..."):
            generate_pdf(stock_code)
        st.success(f"‚úÖ B√°o c√°o PDF cho {stock_code} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        
elif selected == "0. PH√ÇN T√çCH T·ªîNG H·ª¢P":
    st.title("üîç Ph√¢n t√≠ch T·ªïng H·ª£p - Cung c·∫•p g√≥c nh√¨n 360 ƒë·ªô th·ªÉ thao")
    
    # Create columns for better layout
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Get the stock code input from the user
        stock_codes = MERGED_DF["Code"].dropna().unique()
        stock_code = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", options=stock_codes)
        
        # Technical Analysis Filters
        st.subheader("1. B·ªô l·ªçc - T·ªïng quan th·ªã tr∆∞·ªùng")
        st.markdown("<h6>ƒê·∫ßu v√†o bao g·ªìm: M√£ c·ªï phi·∫øu</h6>", unsafe_allow_html=True)

        # Financial Report Filters
        st.subheader("2. B·ªô l·ªçc - T·ªïng quan theo ng√†nh")
        st.markdown("<h6>ƒê·∫ßu v√†o bao g·ªìm: M√£ c·ªï phi·∫øu + ng√†y b·∫Øt ƒë·∫ßu & k·∫øt th√∫c.</h6>", unsafe_allow_html=True)

        dataTab2 = dataframesTab2.copy()

        min_date = dataTab2["Date"].min()
        max_date = dataTab2["Date"].max()

        start_date = st.date_input("Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", min_date)
        end_date = st.date_input("Ch·ªçn ng√†y k·∫øt th√∫c", max_date)
        
        filtered_data = dataTab2[(dataTab2["Ticker"] == stock_code) & (dataTab2["Date"] >= pd.to_datetime(start_date)) & (
            dataTab2["Date"] <= pd.to_datetime(end_date))].copy()

        figTab2 = createFigureTab2(filtered_data, stock_code)
        
        if st.button("Xu·∫•t B√°o C√°o T·ªïng H·ª£p"):
            pdf_output = export_pdf_combined(figTab2, datetime.now())
            st.download_button(
                label="T·ªïng quan theo ng√†nh",
                data=pdf_output,
                file_name=f"Tong_quan_theo_nganh_{stock_code}.pdf",
                mime="application/pdf"
            )

        # Industry Overview Filters
        st.subheader("3. B·ªô l·ªçc - Ph√¢n t√≠ch k·ªπ thu·∫≠t")
        st.markdown("<h6>ƒê·∫ßu v√†o bao g·ªìm: M√£ c·ªï phi·∫øu + ch·ªâ b√°o kƒ© thu·∫≠t + kho·∫£ng th·ªùi gian.</h6>", unsafe_allow_html=True)
        
        if not stock_code:
            st.warning("‚ö† Vui l√≤ng ch·ªçn m√£ c·ªï phi·∫øu!")
            st.stop()
        # Dropdown ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t
        indicators = [
            "SMA", "EMA", "MACD", "PSAR", "RSI",
            "CCI", "Bollinger Bands", "OB", "MFI"
        ]
        selected_indicators = st.multiselect("Ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t", indicators)
        # N·∫øu ch·ªçn MA th√¨ cho ph√©p ch·ªçn c√°c ƒë∆∞·ªùng MA c·ª• th·ªÉ
        selected_ma = []
        if "SMA" in selected_indicators or "EMA" in selected_indicators or "MA" in selected_indicators:
            ma_options = ["sma_20", "sma_50", "sma_100", "sma_200", "ema_20", "ema_50", "ema_100", "ema_200"]
            selected_ma = st.multiselect("Ch·ªçn ƒë∆∞·ªùng trung b√¨nh ƒë·ªông", ma_options)
        selected_rsi = None
        if "RSI" in selected_indicators:
            rsi_options = ["rsi_9", "rsi_14", "rsi_21"]
            selected_rsi = st.selectbox("Ch·ªçn RSI", rsi_options)
        selected_cci = None
        if "CCI" in selected_indicators:
            cci_options = ["cci_10", "cci_20", "cci_30"]
            selected_cci = st.selectbox("Ch·ªçn CCI", cci_options)
        # Dropdown ch·ªçn t·ªï h·ª£p ch·ªâ b√°o
        indicator_combinations = [
            "PSAR + SMA", "PSAR + EMA", "PSAR + RSI", "PSAR + MACD",
            "Bollinger Bands + RSI", "Bollinger Bands + MACD",
            "RSI + MACD"
        ]
        selected_combination = st.selectbox("Ch·ªçn t·ªï h·ª£p ch·ªâ b√°o", [None] + indicator_combinations)
        # Ch·ªçn kho·∫£ng th·ªùi gian (t√≠nh theo chu·ªói th·ªùi gian t·ª´ d·ªØ li·ªáu Excel)
        time_range_tab3 = select_time_period_tab3()
        # X√°c ƒë·ªãnh ng√†y b·∫Øt ƒë·∫ßu d·ª±a tr√™n kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn

        # Chuy·ªÉn ƒë·ªïi date_columns_tab3 sang datetime
        date_columns_dt_tab3 = pd.to_datetime(date_columns_tab3, format="%Y-%m-%d", errors="coerce").dropna().sort_values()
        # L·∫•y ng√†y k·∫øt th√∫c
        selected_date = select_date(date_columns_dt_tab3)

        time_ranges_tab3 = {
            "1 tu·∫ßn": selected_date - pd.DateOffset(weeks=1),
            "1 th√°ng": selected_date - pd.DateOffset(months=1),
            "3 th√°ng": selected_date - pd.DateOffset(months=3),
            "6 th√°ng": selected_date - pd.DateOffset(months=6),
            "1 nƒÉm": selected_date - pd.DateOffset(years=1),
            "2 nƒÉm": selected_date - pd.DateOffset(years=2),
            "3 nƒÉm": selected_date - pd.DateOffset(years=3),
            "To√†n b·ªô": date_columns_dt_tab3.min(),
        }
        start_date = time_ranges_tab3.get(time_range_tab3, date_columns_dt_tab3.min())
        if start_date < date_columns_dt_tab3.min():
            st.warning(f"‚ö† Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh {time_range_tab3}! ƒêang ch·ªçn ng√†y s·ªõm nh·∫•t c√≥ th·ªÉ.")
            start_date = date_columns_dt_tab3.min()

        # L·∫•y chu·ªói th·ªùi gian cho m√£ ƒë∆∞·ª£c ch·ªçn (s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ file Excel)
        df_ts = get_stock_timeseries(stock_code, df_price_tab3, df_volume_tab3, date_columns_dt_tab3, start_date,
                                        selected_date)
        
        if df_ts is None or df_ts.empty:
            st.error("‚ö† Kh√¥ng ƒë·ªß d·ªØ li·ªáu th·ªùi gian cho m√£ ƒë∆∞·ª£c ch·ªçn.")
            st.stop()
        # T√≠nh to√°n c√°c ch·ªâ b√°o tr√™n chu·ªói th·ªùi gian
        df_ts = compute_timeseries_indicators(df_ts)

        # X√¢y d·ª±ng bi·ªÉu ƒë·ªì d·ª±a tr√™n c√°c l·ª±a ch·ªçn
        fig = update_chart(df_ts, stock_code, selected_indicators, selected_ma, selected_rsi, selected_cci, selected_combination)
        
        if st.button("üìÑ Export PDF"):
            pdf_output = export_pdf_combined(fig, datetime.now())
            st.download_button(
                label="Download PDF",
                data=pdf_output,
                file_name=f"Ph√¢n t√≠ch k·ªπ thu·∫≠t {stock_code}.pdf",
                mime="application/pdf"
            )


        # Market Overview Filters
        st.subheader("4. B√°o c√°o t√†i ch√≠nh")
        st.markdown("<h6>ƒê·∫ßu v√†o bao g·ªìm: M√£ c·ªï phi·∫øu</h6>", unsafe_allow_html=True)
    
    with col2:
        st.subheader("üìÑ Xu·∫•t B√°o C√°o T·ªïng H·ª£p")
        if st.button("T·∫°o B√°o C√°o PDF"):
            with st.spinner("‚è≥ ƒêang t·∫°o b√°o c√°o t·ªïng h·ª£p..."):
                # Create a comprehensive PDF report
                def generate_comprehensive_pdf():
                    pdf = FPDF()
                    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
                    pdf.set_font("DejaVu", size=12)
                    
                    # Title Page
                    pdf.add_page()
                    pdf.set_font("DejaVu", size=24)
                    pdf.cell(200, 40, "B√°o C√°o Ph√¢n T√≠ch T·ªïng H·ª£p", ln=True, align='C')
                    pdf.set_font("DejaVu", size=12)
                    pdf.cell(200, 10, f"Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y')}", ln=True, align='C')
                    
                    # Technical Analysis Section
                    pdf.add_page()
                    pdf.set_font("DejaVu", size=16)
                    pdf.cell(200, 20, "1. Ph√¢n t√≠ch K·ªπ thu·∫≠t", ln=True)
                    if selected_indicators:
                        fig_technical = update_chart(df_ts, stock_code, selected_indicators, 
                                                   selected_ma, selected_rsi, selected_cci, None)
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_img:
                            fig_technical.write_image(temp_img.name)
                            pdf.image(temp_img.name, x=10, w=190)
                    
                    # Financial Report Section
                    pdf.add_page()
                    pdf.cell(200, 20, "2. B√°o c√°o T√†i ch√≠nh", ln=True)
                    if stock_code:
                        transposed_df = process_financial_data(stock_code)
                        # Add financial data visualization
                        
                    # Industry Overview Section
                    pdf.add_page()
                    pdf.cell(200, 20, "3. T·ªïng quan Ng√†nh", ln=True)
                    if selected_date:
                        fig_industry = plot_sector_treemap(selected_date)
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_img:
                            fig_industry.write_image(temp_img.name)
                            pdf.image(temp_img.name, x=10, w=190)
                    
                    # Market Overview Section
                    pdf.add_page()
                    pdf.cell(200, 20, "4. T·ªïng quan Th·ªã tr∆∞·ªùng", ln=True)
                    # Add market overview visualization
                    
                    return pdf
                
                # Generate and save the PDF
                pdf = generate_comprehensive_pdf()
                pdf_path = "comprehensive_report.pdf"
                pdf.output(pdf_path)
                
                # Provide download button
                with open(pdf_path, "rb") as file:
                    st.download_button(
                        "üì• T·∫£i xu·ªëng B√°o c√°o T·ªïng h·ª£p",
                        data=file,
                        file_name="comprehensive_report.pdf",
                        mime="application/pdf"
                    )
                st.success("‚úÖ B√°o c√°o t·ªïng h·ª£p ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
# ============================== T·ªîNG H·ª¢P - END ===============================